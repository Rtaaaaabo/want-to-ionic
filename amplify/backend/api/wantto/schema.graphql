type Company
  @model
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  id: ID!
  name: String!
  officer: [Officer]! # 担当者は複数人であるべき
  isRegistered: Boolean!
  otp: string! # Tokenを入れて、ここで企業情報を取得する
  tel: String
  officialEmail: String
  iconCompany: S3Object
  room: [Room] @connection(keyName: "byCompany", fields: ["id"])
  companyMembers: [User] @connection(keyName: "byCompany", fields: ["id"])
}

type Officer {
  officerEmail: String!
  officerName: String!
}

type TaskGroup
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byTask", fields: ["taskID"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  taskID: ID!
  userID: ID!
  task: Task @connection(fields: ["taskID"])
  user: User @connection(fields: ["userID"])
}

type Task
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byRoom", fields: ["roomID"])
  @key(name: "byUser", fields: ["chargePersonID"]) {
  id: ID!
  authorID: ID!
  roomID: ID!
  chargePersonID: ID!
  title: String!
  room: Room! @connection(fields: ["roomID"])
  description: String
  iconTask: S3Object
  scheduleDate: AWSDateTime
  priority: Int
  status: Int
  createdAt: AWSDateTime
  chargePerson: User! @connection(fields: ["chargePersonID"])
  messages: [Message] @connection(keyName: "byTask", fields: ["id"])
  users: [TaskGroup] @connection(keyName: "byTask", fields: ["id"])
}

type User
  @model
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) # 所有者のみがCreate, Update, Deleteが可能で, Readは誰でも可能
  @key(name: "byCompany", fields: ["companyID"]) {
  id: ID!
  username: String!
  email: String!
  companyID: ID!
  tel: String
  positionName: String
  iconImage: S3Object
  registered: Boolean
  authority: Boolean
  company: Company! @connection(fields: ["companyID"])
  messages: [Message] @connection(keyName: "byUser", fields: ["id"])
  room: [RoomGroup] @connection(keyName: "byUser", fields: ["id"])
  task: [TaskGroup] @connection(keyName: "byUser", fields: ["id"])
  chargeTask: [Task] @connection(keyName: "byUser", fields: ["id"])
}

type RoomGroup
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byRoom", fields: ["roomID"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  roomID: ID!
  userID: ID!
  room: Room @connection(fields: ["roomID"])
  user: User @connection(fields: ["userID"])
}

type Room
  @model
  # ログインしている人かつ招待されているユーザーのみが Create, Read, Update, Deleteが可能とする
  @auth(rules: [{ allow: private }])
  @key(name: "byCompany", fields: ["companyID"]) {
  id: ID!
  name: String!
  companyID: ID!
  description: String!
  company: Company! @connection(fields: ["companyID"])
  tasks: [Task] @connection(name: "byRoom", fields: ["id"])
  users: [RoomGroup] @connection(keyName: "byRoom", fields: ["id"])
}

type Message
  @model
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }])
  @key(name: "byTask", fields: ["taskID"])
  @key(name: "byUser", fields: ["authorID"])
  @key(
    name: "taskIndex"
    fields: ["taskID", "createdAt"]
    queryField: "taskByCreatedAt"
  ) {
  id: ID!
  taskID: ID!
  authorID: ID!
  content: String!
  createdAt: AWSDateTime!
  isSent: Boolean
  attachment: [S3Object]
  author: User! @connection(fields: ["authorID"])
  task: Task! @connection(fields: ["taskID"])
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}
