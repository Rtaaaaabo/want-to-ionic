{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///node_modules/@ionic/core/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","webpack:///src/app/app.component.html","webpack:///src/app/shared/component/modal/add-room-modal/add-room-modal.component.html","webpack:///src/app/shared/component/modal/add-task-modal/add-task-modal.component.html","webpack:///src/app/shared/component/modal/delete-task-modal/delete-task-modal.component.html","webpack:///src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.scss","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/guard/auth.guard.ts","webpack:///src/app/pages/home/logic/home-logic.service.ts","webpack:///src/app/pages/home/service/home-service.service.ts","webpack:///src/app/shared/component/modal/add-room-modal/add-room-modal.component.scss","webpack:///src/app/shared/component/modal/add-room-modal/add-room-modal.component.ts","webpack:///src/app/shared/component/modal/add-task-modal/add-task-modal.component.scss","webpack:///src/app/shared/component/modal/add-task-modal/add-task-modal.component.ts","webpack:///src/app/shared/component/modal/delete-task-modal/delete-task-modal.component.scss","webpack:///src/app/shared/component/modal/delete-task-modal/delete-task-modal.component.ts","webpack:///src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.scss","webpack:///src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts","webpack:///src/app/shared/logic/shared-logic.service.ts","webpack:///src/app/shared/service/amplify.service.ts","webpack:///src/app/shared/service/session.service.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/aws-exports.js","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","map","webpackAsyncContext","__webpack_require__","o","ids","all","slice","webpackAsyncContextKeys","Object","routes","path","loadChildren","m","TabsPageModule","canActivate","HomePageModule","SettingPageModule","OwnTaskPageModule","SignupPageModule","ConfirmPageModule","LoginPageModule","TaskPageModule","TaskDetailPageModule","CommentPageModule","AppRoutingModule","imports","forRoot","preloadingStrategy","scrollPositionRestoration","anchorScrolling","scrollOffset","AppComponent","platform","splashScreen","statusBar","initializeApp","ready","styleDefault","hide","selector","template","AppModule","declarations","entryComponents","providers","provide","useClass","bootstrap","AuthGuard","sessionService","router","next","state","isAuthenticated","pipe","loggedIn","navigate","providedIn","HomeLogicService","homeService","attribute","checkRegistrationUser","email","fetchCurrentUser","res","attributes","content","requestContent","companyID","name","nameItem","description","descriptionItem","createRoom","formContent","get","value","username","positionName","tel","iconImage","console","log","createUser","companyId","fetchRoomList","result","items","roomId","deleteRoomItem","HomeService","amplifyService","filterContent","eq","ListUsers","CreateRoom","CreateUser","ListRooms","DeleteRoom","AddRoomModalComponent","modalCtrl","roomItemGroup","required","dismiss","AddTaskModalComponent","taskItemForm","scheduleDateItem","minYear","maxYear","taskDetail","undefined","patchValue","title","room","currentDate","Date","getFullYear","toString","currentIsoString","toISOString","DeleteTaskModalComponent","taskItem","EditProfileModalComponent","logic","editProfileForm","userName","targetEmail","status","userId","user","subscribe","SharedLogicService","ModelAttributeTypes","AmplifyService","OnCreateCompanyListener","graphql","OnUpdateCompanyListener","OnDeleteCompanyListener","OnCreateRoomListener","OnUpdateRoomListener","OnDeleteRoomListener","OnCreateTaskListener","OnUpdateTaskListener","OnDeleteTaskListener","OnCreateMessageListener","OnUpdateMessageListener","OnDeleteMessageListener","OnCreateUserListener","OnUpdateUserListener","OnDeleteUserListener","input","condition","statement","gqlAPIServiceArguments","response","data","createCompany","updateCompany","deleteCompany","updateRoom","deleteRoom","createTask","updateTask","deleteTask","createMessage","updateMessage","deleteMessage","updateUser","deleteUser","getCompany","filter","limit","nextToken","listCompanys","getRoom","listRooms","getTask","listTasks","getMessage","listMessages","getUser","listUsers","SessionService","valueObj","signUp","currentAuthenticatedUser","confirmSignUp","resendSignUp","password","signIn","signOut","SharedModule","awsmobile","environment","production","configure","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-action-sheet.entry.js\",\n\t\t\"common\",\n\t\t0\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-alert.entry.js\",\n\t\t\"common\",\n\t\t1\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-app_8.entry.js\",\n\t\t\"common\",\n\t\t2\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-avatar_3.entry.js\",\n\t\t\"common\",\n\t\t3\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-back-button.entry.js\",\n\t\t\"common\",\n\t\t4\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-backdrop.entry.js\",\n\t\t5\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-button_2.entry.js\",\n\t\t\"common\",\n\t\t6\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-card_5.entry.js\",\n\t\t\"common\",\n\t\t7\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-checkbox.entry.js\",\n\t\t\"common\",\n\t\t8\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-chip.entry.js\",\n\t\t\"common\",\n\t\t9\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-col_3.entry.js\",\n\t\t10\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-datetime_3.entry.js\",\n\t\t\"common\",\n\t\t11\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-fab_3.entry.js\",\n\t\t\"common\",\n\t\t12\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-img.entry.js\",\n\t\t13\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js\",\n\t\t14\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-input.entry.js\",\n\t\t\"common\",\n\t\t15\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-item-option_3.entry.js\",\n\t\t\"common\",\n\t\t16\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-item_8.entry.js\",\n\t\t\"common\",\n\t\t17\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-loading.entry.js\",\n\t\t\"common\",\n\t\t18\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-menu_3.entry.js\",\n\t\t\"common\",\n\t\t19\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-modal.entry.js\",\n\t\t\"common\",\n\t\t20\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js\",\n\t\t\"common\",\n\t\t21\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-popover.entry.js\",\n\t\t\"common\",\n\t\t22\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-progress-bar.entry.js\",\n\t\t\"common\",\n\t\t23\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-radio_2.entry.js\",\n\t\t\"common\",\n\t\t24\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-range.entry.js\",\n\t\t\"common\",\n\t\t25\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-refresher_2.entry.js\",\n\t\t\"common\",\n\t\t26\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-reorder_2.entry.js\",\n\t\t\"common\",\n\t\t27\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-ripple-effect.entry.js\",\n\t\t28\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js\",\n\t\t\"common\",\n\t\t29\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-searchbar.entry.js\",\n\t\t\"common\",\n\t\t30\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js\",\n\t\t\"common\",\n\t\t31\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-select_3.entry.js\",\n\t\t\"common\",\n\t\t32\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-slide_2.entry.js\",\n\t\t33\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-spinner.entry.js\",\n\t\t\"common\",\n\t\t34\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-split-pane.entry.js\",\n\t\t35\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-tab-bar_2.entry.js\",\n\t\t\"common\",\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-tab_2.entry.js\",\n\t\t\"common\",\n\t\t37\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-text.entry.js\",\n\t\t\"common\",\n\t\t38\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-textarea.entry.js\",\n\t\t\"common\",\n\t\t39\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-toast.entry.js\",\n\t\t\"common\",\n\t\t40\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-toggle.entry.js\",\n\t\t\"common\",\n\t\t41\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t\"./node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js\",\n\t\t42\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./node_modules/@ionic/core/dist/esm lazy recursive ^\\\\.\\\\/.*\\\\.entry\\\\.js$ include: \\\\.entry\\\\.js$ exclude: \\\\.system\\\\.entry\\\\.js$\";\nmodule.exports = webpackAsyncContext;","export default \"<ion-app>\\n  <ion-router-outlet></ion-router-outlet>\\n</ion-app>\\n\";","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-title>案件の追加</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"dismissModal()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"close-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"roomItemGroup\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">案件名</ion-label>\\n      <ion-input formControlName=\\\"nameItem\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">詳細</ion-label>\\n      <ion-textarea autoGrow=\\\"true\\b\\\" formControlName=\\\"descriptionItem\\\">\\n      </ion-textarea>\\n    </ion-item>\\n\\n    <ion-button\\n      (click)=\\\"createItem()\\\"\\n      [disabled]=\\\"nameItem.invalid\\\"\\n      expand=\\\"full\\\"\\n      >追加\\n    </ion-button>\\n  </form>\\n</ion-content>\\n\";","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-title>{{ room.name }}</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"dismissModal()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"close-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"taskItemForm\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">名前</ion-label>\\n      <ion-input formControlName=\\\"nameItem\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">説明</ion-label>\\n      <ion-input formControlName=\\\"descriptionItem\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">期限</ion-label>\\n      <ion-datetime\\n        (ionChange)=\\\"changeDate()\\\"\\n        displayFormat=\\\"YYYY/MM/DD\\\"\\n        displayTimezone=\\\"Asia/Tokyo\\\"\\n        cancelText=\\\"キャンセル\\\"\\n        dayNames=\\\"曜日\\\"\\n        formControlName=\\\"scheduleDateItem\\\"\\n        doneText=\\\"完了\\\"\\n        [min]=\\\"minYear\\\"\\n        [max]=\\\"maxYear\\\"\\n        [value]=\\\"currentIsoString\\\"\\n      ></ion-datetime>\\n    </ion-item>\\n\\n    \\b<ion-button\\n      (click)=\\\"createTaskItem()\\\"\\n      [disabled]=\\\"taskItemForm.invalid\\\"\\n      expand=\\\"full\\\"\\n    >\\n      追加\\n    </ion-button>\\n  </form>\\n</ion-content>\\n\";","export default \"<!-- <ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-title>タスクを削除してもよいでしょうか？</ion-title>\\n  </ion-toolbar>\\n</ion-header> -->\\n\\n<ion-content fullscreen padding>\\n  <ion-grid class=\\\"item-paddind\\\">\\n    <ion-row class=\\\"ion-align-items-center ion-padding-vertical\\\">\\n      <ion-col size=\\\"12\\\" class=\\\"ion-text-center\\\">\\n        <p>「{{ task.title }}」</p>\\n        <p>削除してもよいでしょうか？</p>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row class=\\\"ion-align-items-center\\\">\\n      <ion-col size=\\\"6\\\" class=\\\"ion-text-center ion-padding-top\\\">\\n        <ion-button (click)=\\\"onCancel()\\\">キャンセル</ion-button>\\n      </ion-col>\\n      <ion-col size=\\\"6\\\" class=\\\"ion-text-center\\\">\\n        <ion-button\\n          (click)=\\\"deleteTargetTask(task)\\\"\\n          color=\\\"danger\\\"\\n          fill=\\\"outline\\\"\\n        >\\n          削除\\n        </ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-title>{{ title }}</ion-title>\\n    <ion-buttons *ngIf=\\\"status !== 'new'\\\" slot=\\\"start\\\">\\n      <ion-button (click)=\\\"dismissModal()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"close-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button [disabled]=\\\"editProfileForm.invalid\\\" (click)=\\\"saveProfile()\\\"\\n        >保存</ion-button\\n      >\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"editProfileForm\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"header\\\">\\n        <div class=\\\"avatar\\\">\\n          <img src=\\\"../../../../../assets/svg/anonymous.svg\\\" alt=\\\"\\\" />\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"user-meta ion-text-center\\\">\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">名前</ion-label>\\n          <ion-input\\n            formControlName=\\\"userName\\\"\\n            placeholder=\\\"名前を追加\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">役職</ion-label>\\n          <ion-input\\n            formControlName=\\\"positionName\\\"\\n            placeholder=\\\"役職や職種、ポジションなどを追加\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Email</ion-label>\\n          <ion-input\\n            [disabled]=\\\"true\\\"\\n            formControlName=\\\"targetEmail\\\"\\n            placeholder=\\\"メールアドレスを追加\\\"\\n          ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">電話番号</ion-label>\\n          <ion-input\\n            formControlName=\\\"tel\\\"\\n            placeholder=\\\"電話番号を追加\\\"\\n          ></ion-input>\\n        </ion-item>\\n      </div>\\n    </div>\\n  </form>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './guard/auth.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./pages/tabs/tabs.module').then(m => m.TabsPageModule),\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'home',\n    loadChildren: () => import('./pages/home/home.module').then(m => m.HomePageModule),\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'setting',\n    loadChildren: () => import('./pages/setting/setting.module').then(m => m.SettingPageModule),\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'own-task',\n    loadChildren: () => import('./pages/own-task/own-task.module').then(m => m.OwnTaskPageModule),\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'signup',\n    loadChildren: () => import('./pages/signup/signup.module').then(m => m.SignupPageModule),\n  },\n  {\n    path: 'confirm',\n    loadChildren: () => import('./pages/confirm/confirm.module').then(m => m.ConfirmPageModule)\n  },\n  {\n    path: 'login',\n    loadChildren: () => import('./pages/login/login.module').then(m => m.LoginPageModule)\n  },\n  {\n    path: 'task',\n    loadChildren: () => import('./pages/task/task.module').then(m => m.TaskPageModule),\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'task-detail',\n    loadChildren: () => import('./pages/task-detail/task-detail.module').then(m => m.TaskDetailPageModule)\n  },\n  {\n    path: 'comment',\n    loadChildren: () => import('./pages/comment/comment.module').then(m => m.CommentPageModule)\n  }\n];\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n      scrollOffset: [0, 64],\n    })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\nexport class AppComponent {\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar\n  ) {\n    this.initializeApp();\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.statusBar.styleDefault();\n      this.splashScreen.hide();\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(),\n    AppRoutingModule,\n    SharedModule\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { SessionService } from '../shared/service/session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private readonly sessionService: SessionService, private router: Router) { }\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.sessionService.isAuthenticated().pipe(tap(loggedIn => {\n      if (!loggedIn) {\n        this.router.navigate(['/login'])\n      }\n    }))\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HomeService } from '../service/home-service.service';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { v4 as uuid } from 'uuid';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface Attribute {\n  email: string,\n  email_verified: boolean,\n  sub: string,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HomeLogicService {\n\n  constructor(\n    private homeService: HomeService,\n    private sessionService: SessionService,\n  ) { }\n\n\n  checkRegistrationUser(attribute: Attribute): Observable<any> {\n    return this.homeService.checkRegistrationUser(attribute.email);\n  }\n\n  fetchCurrentUser(): Observable<Attribute> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map((res) => res.attributes));\n  }\n\n  createRoom(content): Observable<any> {\n    const requestContent = {\n      id: `${uuid()}`,\n      companyID: 'takuCloudCom',\n      name: content.nameItem,\n      description: content.descriptionItem,\n    };\n    return this.homeService.createRoom(requestContent);\n  }\n\n  createUser(formContent): Observable<any> {\n    const requestContent = {\n      id: formContent.get('id').value,\n      companyID: 'takuCloudCom',\n      email: formContent.get('targetEmail').value,\n      username: formContent.get('userName').value,\n      positionName: formContent.get('positionName').value,\n      tel: formContent.get('tel').value,\n      iconImage: formContent.get('iconImage').value,\n    };\n    console.log(`requestContent: ${requestContent}`);\n    return this.homeService.createUser(requestContent);\n  }\n\n  listRoom(companyId: string): Observable<any> {\n    return this.homeService.fetchRoomList(companyId).pipe(map((result) => result.items));\n  }\n\n  deleteRoomItem(roomId: string): Observable<any> {\n    return this.homeService.deleteRoomItem(roomId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AmplifyService, ModelRoomFilterInput, ListRoomsQuery, ModelUserFilterInput } from '../../../shared/service/amplify.service';\nimport { from, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HomeService {\n\n  constructor(private amplifyService: AmplifyService) { }\n\n  checkRegistrationUser(email: string): Observable<any> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n\n  createRoom(content): Observable<any> {\n    return from(this.amplifyService.CreateRoom(content));\n  }\n\n  createUser(content): Observable<any> {\n    return from(this.amplifyService.CreateUser(content))\n  }\n\n  fetchRoomList(companyId: string): Observable<ListRoomsQuery> {\n    const filterContent: ModelRoomFilterInput = {\n      companyID: {\n        eq: `${companyId}`\n      }\n    }\n    return from(this.amplifyService.ListRooms(filterContent));\n  }\n\n  deleteRoomItem(roomId: string): Observable<any> {\n    const requestContent = {\n      id: roomId\n    }\n    return from(this.amplifyService.DeleteRoom(requestContent));\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnQvbW9kYWwvYWRkLXJvb20tbW9kYWwvYWRkLXJvb20tbW9kYWwuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-room-modal',\n  templateUrl: './add-room-modal.component.html',\n  styleUrls: ['./add-room-modal.component.scss'],\n})\nexport class AddRoomModalComponent implements OnInit {\n\n  roomItemGroup = new FormGroup({\n    nameItem: new FormControl('', [Validators.required]),\n    descriptionItem: new FormControl(''),\n  });\n\n  constructor(\n    private modalCtrl: ModalController,\n  ) { }\n\n  get nameItem() {\n    return this.roomItemGroup.get('nameItem');\n  }\n\n  get descriptionItem() {\n    return this.roomItemGroup.get('descriptionItem');\n  }\n\n  ngOnInit() { }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n  createItem(): void {\n    this.modalCtrl.dismiss(this.roomItemGroup.value);\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnQvbW9kYWwvYWRkLXRhc2stbW9kYWwvYWRkLXRhc2stbW9kYWwuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-task-modal',\n  templateUrl: './add-task-modal.component.html',\n  styleUrls: ['./add-task-modal.component.scss'],\n})\nexport class AddTaskModalComponent implements OnInit {\n\n  taskItemForm = new FormGroup({\n    nameItem: new FormControl('', [Validators.required]),\n    descriptionItem: new FormControl(''),\n    scheduleDateItem: new FormControl(''),\n  });\n\n  room;\n  taskDetail;\n\n  minYear: string = '';\n  maxYear: string = '';\n  currentIsoString: string;\n\n  constructor(\n    private modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit() {\n    if (this.taskDetail !== undefined) {\n      this.taskItemForm.patchValue({\n        nameItem: this.taskDetail.title,\n        descriptionItem: this.taskDetail.description,\n      });\n      this.room = this.taskDetail.room;\n    }\n    console.log(this.taskDetail);\n    const currentDate = new Date();\n    this.minYear = (currentDate.getFullYear()).toString();\n    this.maxYear = (currentDate.getFullYear() + 1).toString();\n    this.currentIsoString = currentDate.toISOString();\n    this.taskItemForm.patchValue({\n      scheduleDateItem: this.currentIsoString\n    })\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n  createTaskItem(): void {\n    this.modalCtrl.dismiss(this.taskItemForm.value);\n  }\n\n  changeDate() {\n    console.log('changeDate');\n  }\n\n}\n","export default \".item-paddind {\\n  margin-top: 50%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90YWt1bmFrYWdhd2EvZGV2L2lvbmljL3dhbnRUby9zcmMvYXBwL3NoYXJlZC9jb21wb25lbnQvbW9kYWwvZGVsZXRlLXRhc2stbW9kYWwvZGVsZXRlLXRhc2stbW9kYWwuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnQvbW9kYWwvZGVsZXRlLXRhc2stbW9kYWwvZGVsZXRlLXRhc2stbW9kYWwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUE7RUFDSSxlQUFBO0FDVEoiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50L21vZGFsL2RlbGV0ZS10YXNrLW1vZGFsL2RlbGV0ZS10YXNrLW1vZGFsLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW9uLWNvbnRlbnQge1xuLy8gICAgIGRpdiB7XG4vLyAgICAgICAgIGhlaWdodDogMTAwJTtcbi8vICAgICAgICAgd2lkdGg6IDEwMCU7XG4vLyAgICAgICAgIC8vIGRpc3BsYXk6IGZsZXg7XG4vLyAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuLy8gICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuLy8gICAgIH1cbi8vIH1cblxuLml0ZW0tcGFkZGluZCB7XG4gICAgbWFyZ2luLXRvcDogNTAlO1xufSIsIi5pdGVtLXBhZGRpbmQge1xuICBtYXJnaW4tdG9wOiA1MCU7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-delete-task-modal',\n  templateUrl: './delete-task-modal.component.html',\n  styleUrls: ['./delete-task-modal.component.scss'],\n})\nexport class DeleteTaskModalComponent implements OnInit {\n  task;\n\n  constructor(\n    private modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit() { }\n\n  onCancel() {\n    this.modalCtrl.dismiss();\n  }\n\n\n  deleteTargetTask(taskItem) {\n    this.modalCtrl.dismiss(taskItem);\n  }\n\n}\n","export default \"@charset \\\"UTF-8\\\";\\n.card {\\n  margin: 0 auto;\\n}\\n.card .header {\\n  height: 200px;\\n}\\n.card .header .avatar {\\n  width: 120px;\\n  height: 120px;\\n  position: relative;\\n  margin: 0 auto;\\n}\\n.card .header .avatar img {\\n  display: block;\\n  border-radius: 50%;\\n  position: absolute;\\n  bottom: calc(-1*(80px + 4px));\\n  border: 3px solid #4dd0e1;\\n}\\n.card-body {\\n  padding: 10px;\\n  height: calc(100vh – (200px + 56px));\\n  overflow: hidden;\\n}\\n.card-body .user-meta {\\n  padding-top: 40px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL2NvbXBvbmVudC9tb2RhbC9lZGl0LXByb2ZpbGUtbW9kYWwvZWRpdC1wcm9maWxlLW1vZGFsLmNvbXBvbmVudC5zY3NzIiwiL1VzZXJzL3Rha3VuYWthZ2F3YS9kZXYvaW9uaWMvd2FudFRvL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudC9tb2RhbC9lZGl0LXByb2ZpbGUtbW9kYWwvZWRpdC1wcm9maWxlLW1vZGFsLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQ0FoQjtFQUNJLGNBQUE7QURFSjtBQ0FJO0VBQ0ksYUFBQTtBREVSO0FDQVE7RUFDSSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtBREVaO0FDQVk7RUFDSSxjQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtFQUNBLDZCQUFBO0VBQ0EseUJBQUE7QURFaEI7QUNJQTtFQUNJLGFBQUE7RUFDQSxvQ0FBQTtFQUNBLGdCQUFBO0FEREo7QUNHSTtFQUNJLGlCQUFBO0FERFIiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50L21vZGFsL2VkaXQtcHJvZmlsZS1tb2RhbC9lZGl0LXByb2ZpbGUtbW9kYWwuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAY2hhcnNldCBcIlVURi04XCI7XG4uY2FyZCB7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxuLmNhcmQgLmhlYWRlciB7XG4gIGhlaWdodDogMjAwcHg7XG59XG4uY2FyZCAuaGVhZGVyIC5hdmF0YXIge1xuICB3aWR0aDogMTIwcHg7XG4gIGhlaWdodDogMTIwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG4uY2FyZCAuaGVhZGVyIC5hdmF0YXIgaW1nIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IGNhbGMoLTEqKDgwcHggKyA0cHgpKTtcbiAgYm9yZGVyOiAzcHggc29saWQgIzRkZDBlMTtcbn1cblxuLmNhcmQtYm9keSB7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGhlaWdodDogY2FsYygxMDB2aCDigJMgKDIwMHB4ICsgNTZweCkpO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLmNhcmQtYm9keSAudXNlci1tZXRhIHtcbiAgcGFkZGluZy10b3A6IDQwcHg7XG59IiwiLmNhcmQge1xuICAgIG1hcmdpbjogMCBhdXRvO1xuXG4gICAgLmhlYWRlciB7XG4gICAgICAgIGhlaWdodDogMjAwcHg7XG5cbiAgICAgICAgLmF2YXRhciB7XG4gICAgICAgICAgICB3aWR0aDogMTIwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDEyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG5cbiAgICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBib3R0b206IGNhbGMoLTEqKDgwcHggKyA0cHgpKTtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDNweCBzb2xpZCAjNGRkMGUxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4uY2FyZC1ib2R5IHtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGhlaWdodDogY2FsYygxMDB2aCDigJMgKDIwMHB4ICsgNTZweCkpO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICAudXNlci1tZXRhIHtcbiAgICAgICAgcGFkZGluZy10b3A6IDQwcHg7XG4gICAgfVxufSJdfQ== */\";","import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { HomeLogicService } from '../../../../pages/home/logic/home-logic.service';\n\n@Component({\n  selector: 'app-edit-profile-modal',\n  templateUrl: './edit-profile-modal.component.html',\n  styleUrls: ['./edit-profile-modal.component.scss'],\n})\nexport class EditProfileModalComponent implements OnInit {\n  editProfileForm = new FormGroup({\n    id: new FormControl(''),\n    iconImage: new FormControl(''),\n    userName: new FormControl('', [Validators.required]),\n    positionName: new FormControl(''),\n    targetEmail: new FormControl('', [Validators.required, Validators.email]),\n    tel: new FormControl(''),\n  });\n  @Input() status: string;\n  @Input() email: string;\n  @Input() userId: string;\n  title: string;\n\n  @Input() user;\n\n  constructor(\n    private modalCtrl: ModalController,\n    private logic: HomeLogicService,\n  ) { }\n\n  ngOnInit() {\n    if (this.status === 'new') {\n      this.editProfileForm.patchValue({\n        id: this.userId,\n        targetEmail: this.email\n      });\n      this.title = 'プロフィールの作成';\n      console.log(this.editProfileForm.value);\n    } else {\n      this.editProfileForm.patchValue({\n        id: this.user.id,\n        targetEmail: this.user.email,\n        userName: this.user.username,\n        positionName: this.user.positionName,\n        tel: this.user.tel,\n      })\n      this.title = 'プロフィールの編集';\n    }\n  }\n\n  saveProfile() {\n    this.logic.createUser(this.editProfileForm).subscribe(() => {\n      this.modalCtrl.dismiss();\n    })\n  }\n\n  dismissModal() {\n    this.modalCtrl.dismiss();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedLogicService {\n\n  constructor(public modalCtrl: ModalController) { }\n}\n","/* tslint:disable */\n/* eslint-disable */\n//  This file was automatically generated and should not be edited.\nimport { Injectable } from \"@angular/core\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { GraphQLResult } from \"@aws-amplify/api/lib/types\";\nimport { Observable } from \"zen-observable-ts\";\n\nexport type CreateCompanyInput = {\n  id?: string | null;\n  name: string;\n  domain: string;\n};\n\nexport type ModelCompanyConditionInput = {\n  name?: ModelStringInput | null;\n  domain?: ModelStringInput | null;\n  and?: Array<ModelCompanyConditionInput | null> | null;\n  or?: Array<ModelCompanyConditionInput | null> | null;\n  not?: ModelCompanyConditionInput | null;\n};\n\nexport type ModelStringInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport enum ModelAttributeTypes {\n  binary = \"binary\",\n  binarySet = \"binarySet\",\n  bool = \"bool\",\n  list = \"list\",\n  map = \"map\",\n  number = \"number\",\n  numberSet = \"numberSet\",\n  string = \"string\",\n  stringSet = \"stringSet\",\n  _null = \"_null\"\n}\n\nexport type ModelSizeInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n};\n\nexport type UpdateCompanyInput = {\n  id: string;\n  name?: string | null;\n  domain?: string | null;\n};\n\nexport type DeleteCompanyInput = {\n  id?: string | null;\n};\n\nexport type CreateRoomInput = {\n  id?: string | null;\n  companyID: string;\n  name: string;\n  description: string;\n};\n\nexport type ModelRoomConditionInput = {\n  companyID?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomConditionInput | null> | null;\n  or?: Array<ModelRoomConditionInput | null> | null;\n  not?: ModelRoomConditionInput | null;\n};\n\nexport type ModelIDInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport type UpdateRoomInput = {\n  id: string;\n  companyID?: string | null;\n  name?: string | null;\n  description?: string | null;\n};\n\nexport type DeleteRoomInput = {\n  id?: string | null;\n};\n\nexport type CreateTaskInput = {\n  id?: string | null;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description?: string | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type ModelTaskConditionInput = {\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskConditionInput | null> | null;\n  or?: Array<ModelTaskConditionInput | null> | null;\n  not?: ModelTaskConditionInput | null;\n};\n\nexport type ModelIntInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type UpdateTaskInput = {\n  id: string;\n  authorID?: string | null;\n  roomID?: string | null;\n  title?: string | null;\n  description?: string | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type DeleteTaskInput = {\n  id?: string | null;\n};\n\nexport type CreateMessageInput = {\n  id?: string | null;\n  taskID: string;\n  content: string;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n};\n\nexport type ModelMessageConditionInput = {\n  taskID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageConditionInput | null> | null;\n  or?: Array<ModelMessageConditionInput | null> | null;\n  not?: ModelMessageConditionInput | null;\n};\n\nexport type ModelBooleanInput = {\n  ne?: boolean | null;\n  eq?: boolean | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type UpdateMessageInput = {\n  id: string;\n  taskID?: string | null;\n  content?: string | null;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n};\n\nexport type DeleteMessageInput = {\n  id?: string | null;\n};\n\nexport type CreateUserInput = {\n  id?: string | null;\n  email: string;\n  companyID: string;\n  username: string;\n  registered?: boolean | null;\n  authority?: string | null;\n};\n\nexport type ModelUserConditionInput = {\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  username?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelStringInput | null;\n  and?: Array<ModelUserConditionInput | null> | null;\n  or?: Array<ModelUserConditionInput | null> | null;\n  not?: ModelUserConditionInput | null;\n};\n\nexport type UpdateUserInput = {\n  id: string;\n  email?: string | null;\n  companyID?: string | null;\n  username?: string | null;\n  registered?: boolean | null;\n  authority?: string | null;\n};\n\nexport type DeleteUserInput = {\n  id?: string | null;\n};\n\nexport type ModelCompanyFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  domain?: ModelStringInput | null;\n  and?: Array<ModelCompanyFilterInput | null> | null;\n  or?: Array<ModelCompanyFilterInput | null> | null;\n  not?: ModelCompanyFilterInput | null;\n};\n\nexport type ModelRoomFilterInput = {\n  id?: ModelIDInput | null;\n  companyID?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomFilterInput | null> | null;\n  or?: Array<ModelRoomFilterInput | null> | null;\n  not?: ModelRoomFilterInput | null;\n};\n\nexport type ModelTaskFilterInput = {\n  id?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskFilterInput | null> | null;\n  or?: Array<ModelTaskFilterInput | null> | null;\n  not?: ModelTaskFilterInput | null;\n};\n\nexport type ModelMessageFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageFilterInput | null> | null;\n  or?: Array<ModelMessageFilterInput | null> | null;\n  not?: ModelMessageFilterInput | null;\n};\n\nexport type ModelUserFilterInput = {\n  id?: ModelIDInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  username?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelStringInput | null;\n  and?: Array<ModelUserFilterInput | null> | null;\n  or?: Array<ModelUserFilterInput | null> | null;\n  not?: ModelUserFilterInput | null;\n};\n\nexport type CreateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type UpdateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type DeleteTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type CreateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type UpdateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type DeleteMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type CreateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteUserMutation = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type GetCompanyQuery = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListCompanysQuery = {\n  __typename: \"ModelCompanyConnection\";\n  items: Array<{\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken: string | null;\n};\n\nexport type GetRoomQuery = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomsQuery = {\n  __typename: \"ModelRoomConnection\";\n  items: Array<{\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken: string | null;\n};\n\nexport type GetTaskQuery = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type ListTasksQuery = {\n  __typename: \"ModelTaskConnection\";\n  items: Array<{\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  } | null> | null;\n  nextToken: string | null;\n};\n\nexport type GetMessageQuery = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type ListMessagesQuery = {\n  __typename: \"ModelMessageConnection\";\n  items: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    author: {\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    content: string;\n    createdAt: string | null;\n    isSent: boolean | null;\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n  } | null> | null;\n  nextToken: string | null;\n};\n\nexport type GetUserQuery = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListUsersQuery = {\n  __typename: \"ModelUserConnection\";\n  items: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken: string | null;\n};\n\nexport type OnCreateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  domain: string;\n  room: {\n    __typename: \"ModelRoomConnection\";\n    items: Array<{\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  members: {\n    __typename: \"ModelUserConnection\";\n    items: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  companyID: string;\n  name: string;\n  description: string;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  tasks: {\n    __typename: \"ModelTaskConnection\";\n    items: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      title: string;\n      description: string | null;\n      scheduleDate: string | null;\n      priority: number | null;\n      status: number | null;\n      createdAt: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  title: string;\n  description: string | null;\n  scheduleDate: string | null;\n  priority: number | null;\n  status: number | null;\n  createdAt: string | null;\n  members: Array<{\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    tasks: {\n      __typename: \"ModelTaskConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages: {\n    __typename: \"ModelMessageConnection\";\n    items: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      content: string;\n      createdAt: string | null;\n      isSent: boolean | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnCreateMessageSubscription = {\n  _isScalar: 'string',\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type OnUpdateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type OnDeleteMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  author: {\n    __typename: \"User\";\n    id: string;\n    email: string;\n    companyID: string;\n    username: string;\n    registered: boolean | null;\n    authority: string | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      domain: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  content: string;\n  createdAt: string | null;\n  isSent: boolean | null;\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    title: string;\n    description: string | null;\n    scheduleDate: string | null;\n    priority: number | null;\n    status: number | null;\n    createdAt: string | null;\n    members: Array<{\n      __typename: \"User\";\n      id: string;\n      email: string;\n      companyID: string;\n      username: string;\n      registered: boolean | null;\n      authority: string | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      companyID: string;\n      name: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages: {\n      __typename: \"ModelMessageConnection\";\n      nextToken: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n};\n\nexport type OnCreateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  email: string;\n  companyID: string;\n  username: string;\n  registered: boolean | null;\n  authority: string | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    domain: string;\n    room: {\n      __typename: \"ModelRoomConnection\";\n      nextToken: string | null;\n    } | null;\n    members: {\n      __typename: \"ModelUserConnection\";\n      nextToken: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AmplifyService {\n  async CreateCompany(\n    input: CreateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<CreateCompanyMutation> {\n    const statement = `mutation CreateCompany($input: CreateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        createCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateCompanyMutation>response.data.createCompany;\n  }\n  async UpdateCompany(\n    input: UpdateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<UpdateCompanyMutation> {\n    const statement = `mutation UpdateCompany($input: UpdateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        updateCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateCompanyMutation>response.data.updateCompany;\n  }\n  async DeleteCompany(\n    input: DeleteCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<DeleteCompanyMutation> {\n    const statement = `mutation DeleteCompany($input: DeleteCompanyInput!, $condition: ModelCompanyConditionInput) {\n        deleteCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteCompanyMutation>response.data.deleteCompany;\n  }\n  async CreateRoom(\n    input: CreateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomMutation> {\n    const statement = `mutation CreateRoom($input: CreateRoomInput!, $condition: ModelRoomConditionInput) {\n        createRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomMutation>response.data.createRoom;\n  }\n  async UpdateRoom(\n    input: UpdateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<UpdateRoomMutation> {\n    const statement = `mutation UpdateRoom($input: UpdateRoomInput!, $condition: ModelRoomConditionInput) {\n        updateRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomMutation>response.data.updateRoom;\n  }\n  async DeleteRoom(\n    input: DeleteRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<DeleteRoomMutation> {\n    const statement = `mutation DeleteRoom($input: DeleteRoomInput!, $condition: ModelRoomConditionInput) {\n        deleteRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomMutation>response.data.deleteRoom;\n  }\n  async CreateTask(\n    input: CreateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<CreateTaskMutation> {\n    const statement = `mutation CreateTask($input: CreateTaskInput!, $condition: ModelTaskConditionInput) {\n        createTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskMutation>response.data.createTask;\n  }\n  async UpdateTask(\n    input: UpdateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<UpdateTaskMutation> {\n    const statement = `mutation UpdateTask($input: UpdateTaskInput!, $condition: ModelTaskConditionInput) {\n        updateTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskMutation>response.data.updateTask;\n  }\n  async DeleteTask(\n    input: DeleteTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<DeleteTaskMutation> {\n    const statement = `mutation DeleteTask($input: DeleteTaskInput!, $condition: ModelTaskConditionInput) {\n        deleteTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskMutation>response.data.deleteTask;\n  }\n  async CreateMessage(\n    input: CreateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<CreateMessageMutation> {\n    const statement = `mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n        createMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          content\n          createdAt\n          isSent\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateMessageMutation>response.data.createMessage;\n  }\n  async UpdateMessage(\n    input: UpdateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<UpdateMessageMutation> {\n    const statement = `mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n        updateMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateMessageMutation>response.data.updateMessage;\n  }\n  async DeleteMessage(\n    input: DeleteMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<DeleteMessageMutation> {\n    const statement = `mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n        deleteMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteMessageMutation>response.data.deleteMessage;\n  }\n\n  async CreateUser(\n    input: CreateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<CreateUserMutation> {\n    const statement = `mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n        createUser(input: $input, condition: $condition) {\n          __typename\n          id\n          email\n          companyID\n          username\n          tel\n          positionName\n          iconImage\n          registered\n          authority\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateUserMutation>response.data.createUser;\n  }\n\n  async UpdateUser(\n    input: UpdateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<UpdateUserMutation> {\n    const statement = `mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n        updateUser(input: $input, condition: $condition) {\n          __typename\n          id\n          email\n          companyID\n          username\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateUserMutation>response.data.updateUser;\n  }\n  async DeleteUser(\n    input: DeleteUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<DeleteUserMutation> {\n    const statement = `mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n        deleteUser(input: $input, condition: $condition) {\n          __typename\n          id\n          email\n          companyID\n          username\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteUserMutation>response.data.deleteUser;\n  }\n  async GetCompany(id: string): Promise<GetCompanyQuery> {\n    const statement = `query GetCompany($id: ID!) {\n        getCompany(id: $id) {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetCompanyQuery>response.data.getCompany;\n  }\n  async ListCompanys(\n    filter?: ModelCompanyFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListCompanysQuery> {\n    const statement = `query ListCompanys($filter: ModelCompanyFilterInput, $limit: Int, $nextToken: String) {\n        listCompanys(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListCompanysQuery>response.data.listCompanys;\n  }\n  async GetRoom(id: string): Promise<GetRoomQuery> {\n    const statement = `query GetRoom($id: ID!) {\n        getRoom(id: $id) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomQuery>response.data.getRoom;\n  }\n  async ListRooms(\n    filter?: ModelRoomFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomsQuery> {\n    const statement = `query ListRooms($filter: ModelRoomFilterInput, $limit: Int, $nextToken: String) {\n        listRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            companyID\n            name\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomsQuery>response.data.listRooms;\n  }\n  async GetTask(id: string): Promise<GetTaskQuery> {\n    const statement = `query GetTask($id: ID!) {\n        getTask(id: $id) {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          room {\n            __typename\n            id\n            companyID\n            name\n            description\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskQuery>response.data.getTask;\n  }\n  async ListTasks(\n    filter?: ModelTaskFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTasksQuery> {\n    const statement = `query ListTasks($filter: ModelTaskFilterInput, $limit: Int, $nextToken: String) {\n        listTasks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTasksQuery>response.data.listTasks;\n  }\n  async GetMessage(id: string): Promise<GetMessageQuery> {\n    const statement = `query GetMessage($id: ID!) {\n        getMessage(id: $id) {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetMessageQuery>response.data.getMessage;\n  }\n  async ListMessages(\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListMessagesQuery> {\n    const statement = `query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            author {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            content\n            createdAt\n            isSent\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListMessagesQuery>response.data.listMessages;\n  }\n  async GetUser(id: string): Promise<GetUserQuery> {\n    const statement = `query GetUser($id: ID!) {\n        getUser(id: $id) {\n          __typename\n          id\n          email\n          companyID\n          username\n          registered\n          authority\n          createdAt\n          updatedAt\n          positionName\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetUserQuery>response.data.getUser;\n  }\n  async ListUsers(\n    filter?: ModelUserFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListUsersQuery> {\n    const statement = `query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n        listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListUsersQuery>response.data.listUsers;\n  }\n  OnCreateCompanyListener: Observable<\n    OnCreateCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnCreateCompanySubscription>;\n\n  OnUpdateCompanyListener: Observable<\n    OnUpdateCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateCompanySubscription>;\n\n  OnDeleteCompanyListener: Observable<\n    OnDeleteCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteCompanySubscription>;\n\n  OnCreateRoomListener: Observable<OnCreateRoomSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          companyID\n          name\n          description\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnCreateRoomSubscription>;\n\n  OnUpdateRoomListener: Observable<OnUpdateRoomSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          companyID\n          name\n          description\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateRoomSubscription>;\n\n  OnDeleteRoomListener: Observable<OnDeleteRoomSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          companyID\n          name\n          description\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteRoomSubscription>;\n\n  OnCreateTaskListener: Observable<OnCreateTaskSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          room {\n            __typename\n            id\n            companyID\n            name\n            description\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnCreateTaskSubscription>;\n\n  OnUpdateTaskListener: Observable<OnUpdateTaskSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          room {\n            __typename\n            id\n            companyID\n            name\n            description\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateTaskSubscription>;\n\n  OnDeleteTaskListener: Observable<OnDeleteTaskSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          members {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          room {\n            __typename\n            id\n            companyID\n            name\n            description\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteTaskSubscription>;\n\n  OnCreateMessageListener: Observable<OnCreateMessageSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnCreateMessageSubscription>;\n\n  OnUpdateMessageListener: Observable<\n    OnUpdateMessageSubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateMessageSubscription>;\n\n  OnDeleteMessageListener: Observable<\n    OnDeleteMessageSubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteMessageSubscription>;\n\n  OnCreateUserListener: Observable<OnCreateUserSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          email\n          companyID\n          username\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnCreateUserSubscription>;\n\n  OnUpdateUserListener: Observable<OnUpdateUserSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          email\n          companyID\n          username\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateUserSubscription>;\n\n  OnDeleteUserListener: Observable<OnDeleteUserSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          email\n          companyID\n          username\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            domain\n            room {\n              __typename\n              nextToken\n            }\n            members {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteUserSubscription>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Auth } from \"aws-amplify\";\nimport { Observable, from, BehaviorSubject, of } from \"rxjs\";\nimport { map, tap, catchError } from \"rxjs/operators\";\nimport { InterfaceSignup } from \"../../interfaces/signup.interface\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SessionService {\n  loggedIn: BehaviorSubject<boolean>;\n\n  constructor(private readonly router: Router) {\n    this.loggedIn = new BehaviorSubject<boolean>(false);\n  }\n\n  entryUserSignup(valueObj): Observable<any> {\n    return from(Auth.signUp(valueObj));\n  }\n\n  isAuthenticated(): Observable<boolean> {\n    return from(Auth.currentAuthenticatedUser()).pipe(\n      map(() => {\n        this.loggedIn.next(true);\n        return true;\n      }),\n      catchError(() => {\n        this.loggedIn.next(false);\n        return of(false);\n      })\n    );\n  }\n\n  confirmSignUp(username, code): Observable<void> {\n    return from(Auth.confirmSignUp(username, code));\n  }\n\n  resendConfirmNumberForSignUp(username): Observable<string> {\n    return from(Auth.resendSignUp(username));\n  }\n\n  userLogin(email, password): Observable<void> {\n    return from(Auth.signIn(email, password))\n      .pipe(tap(() => this.loggedIn.next(true)));\n  }\n\n  fetchCurrentUser(): Observable<any> {\n    return from(Auth.currentAuthenticatedUser());\n  }\n\n  signOut() {\n    return from(Auth.signOut())\n      .pipe(tap(() => this.loggedIn.next(false)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { SessionService } from './service/session.service';\nimport { SharedLogicService } from './logic/shared-logic.service';\nimport { AddRoomModalComponent } from './component/modal/add-room-modal/add-room-modal.component';\nimport { AddTaskModalComponent } from './component/modal/add-task-modal/add-task-modal.component';\nimport { DeleteTaskModalComponent } from './component/modal/delete-task-modal/delete-task-modal.component';\nimport { EditProfileModalComponent } from './component/modal/edit-profile-modal/edit-profile-modal.component';\n\n\n@NgModule({\n  declarations: [\n    AddRoomModalComponent,\n    AddTaskModalComponent,\n    DeleteTaskModalComponent,\n    EditProfileModalComponent,\n  ],\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  entryComponents: [\n    AddRoomModalComponent,\n    AddTaskModalComponent,\n    DeleteTaskModalComponent,\n    EditProfileModalComponent,\n  ],\n  exports: [\n    AddRoomModalComponent,\n    AddTaskModalComponent,\n    DeleteTaskModalComponent,\n    EditProfileModalComponent,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  providers: [\n    SessionService,\n    SharedLogicService,\n  ]\n})\nexport class SharedModule { }\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-1\",\n    \"aws_cognito_identity_pool_id\": \"ap-northeast-1:1c83b07b-ce19-49f6-ae74-da6ffcc69554\",\n    \"aws_cognito_region\": \"ap-northeast-1\",\n    \"aws_user_pools_id\": \"ap-northeast-1_ByovDG4bt\",\n    \"aws_user_pools_web_client_id\": \"47bkbu7qf1aue8v7i0elq754tr\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"http://192.168.0.13:20002/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_appsync_apiKey\": \"da2-fakeApiId123456\",\n    \"aws_appsync_dangerously_connect_to_http_endpoint_for_testing\": true\n};\n\n\nexport default awsmobile;\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\n// Amplify Config\nimport Amplify, { Auth } from 'aws-amplify';\nimport PubSub from '@aws-amplify/pubsub';\nimport API from '@aws-amplify/api';\nimport awsmobile from './aws-exports';\n\nAmplify.configure(awsmobile);\nAPI.configure(awsmobile);\nPubSub.configure(awsmobile);\nAuth.configure(awsmobile);\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"]}