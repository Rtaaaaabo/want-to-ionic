{"version":3,"sources":["webpack:///src/app/pages/task/task.page.html","webpack:///src/app/pages/task/logic/task-logic.service.ts","webpack:///src/app/pages/task/service/task-service.service.ts","webpack:///src/app/pages/task/task-routing.module.ts","webpack:///src/app/pages/task/task.module.ts","webpack:///src/app/pages/task/task.page.scss","webpack:///src/app/pages/task/task.page.ts"],"names":["TaskLogicService","taskService","sessionService","roomId","fetchRoomInfo","fetchCurrentUser","pipe","res","attributes","email","dismissData","iosStringDate","Date","toISOString","undefined","content","id","authorID","roomID","title","nameItem","description","descriptionItem","scheduleDate","scheduleDateItem","createdAt","status","priority","createTaskItem","filterContent","eq","fetchTaskItemsPerRoom","items","data","taskItem","updateTaskItem","taskId","deleteTaskItem","providedIn","TaskServiceService","amplifyService","GetRoom","CreateTask","UpdateTask","ListTasks","DeleteTask","routes","path","component","TaskPageRoutingModule","imports","forChild","exports","TaskPageModule","declarations","providers","TaskPage","router","modalCtrl","route","location","logic","toastCtrl","actionSheetCtrl","room","isReorder","segment","snapshot","paramMap","get","subscribe","roomInfo","fetchCurrentUserInfo","userEmail","fetchActiveTaskPerRoom","taskActiveItems","fetchDoneTaskPerRoom","taskDoneItems","create","message","duration","toast","present","componentProps","modal","dismissObservable","onDidDismiss","createTaskToRoom","back","ev","itemMove","splice","detail","from","to","complete","task","navigate","fragment","value","presentToast","presentDoneToast","buttons","text","role","icon","handler","deleteTask","actionSheet","console","log","result","selector","template"],"mappings":"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","file":"pages-task-task-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title> {{ room.name }} </ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"goBackToRoom()\\\">\\n        <ion-icon name=\\\"chevron-back-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-buttons *ngIf=\\\"segment === 'active'\\\" slot=\\\"end\\\">\\n      <ion-button (click)=\\\"sortTaskItem()\\\">\\n        <ion-icon *ngIf=\\\"!isReorder\\\" name=\\\"swap-vertical-sharp\\\"></ion-icon>\\n        <ion-icon *ngIf=\\\"isReorder\\\" name=\\\"checkmark-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n  <ion-toolbar *ngIf=\\\"!isReorder\\\">\\n    <ion-segment [value]=\\\"segment\\\" (ionChange)=\\\"segmentChanged($event)\\\">\\n      <ion-segment-button value=\\\"active\\\">\\n        <ion-label>Active</ion-label>\\n      </ion-segment-button>\\n      <ion-segment-button value=\\\"done\\\">\\n        <ion-label>Done</ion-label>\\n      </ion-segment-button>\\n    </ion-segment>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content *ngIf=\\\"segment === 'active'\\\">\\n  <ion-list>\\n    <ion-reorder-group\\n      (ionItemReorder)=\\\"reorderTask($event)\\\"\\n      [disabled]=\\\"!isReorder\\\"\\n    >\\n      <ion-card *ngFor=\\\"let item of taskActiveItems\\\">\\n        <ion-card-content\\n          class=\\\"task-card-content\\\"\\n          (click)=\\\"navigateToTaskDetail(item, segment)\\\"\\n        >\\n          <ion-reorder *ngIf=\\\"isReorder\\\">\\n            <ion-item class=\\\"card-background\\\" lines=\\\"none\\\">\\n              <ion-avatar slot=\\\"start\\\">\\n                <img\\n                  src=\\\"https://gravatar.com/avatar/dba6bae8c566f9d4041fb9cd9ada7741?d=identicon&f=y\\\"\\n                />\\n              </ion-avatar>\\n              <ion-label>\\n                <h2 class=\\\"task-title\\\">{{ item.title }}</h2>\\n                <p>{{item.description}}</p>\\n              </ion-label>\\n            </ion-item>\\n          </ion-reorder>\\n          <ion-item *ngIf=\\\"!isReorder\\\" class=\\\"card-background\\\" lines=\\\"none\\\">\\n            <ion-avatar slot=\\\"start\\\">\\n              <img\\n                src=\\\"https://gravatar.com/avatar/dba6bae8c566f9d4041fb9cd9ada7741?d=identicon&f=y\\\"\\n              />\\n            </ion-avatar>\\n            <ion-label *ngIf=\\\"!isReorder\\\">\\n              <h2 class=\\\"task-title\\\">{{ item.title }}</h2>\\n              <p>{{item.description}}</p>\\n            </ion-label>\\n          </ion-item>\\n        </ion-card-content>\\n        <ion-row *ngIf=\\\"!isReorder\\\" class=\\\"cardfooter\\\">\\n          <ion-col class=\\\"button-center\\\">\\n            <ion-button\\n              (click)=\\\"addCommentToTaskDetail(item)\\\"\\n              fill=\\\"clear\\\"\\n              color=\\\"primary\\\"\\n            >\\n              <ion-icon name=\\\"chatbubbles-outline\\\"></ion-icon>\\n            </ion-button>\\n          </ion-col>\\n          <ion-col class=\\\"button-center\\\">\\n            <ion-button (click)=\\\"doneTask(item)\\\" fill=\\\"clear\\\" color=\\\"primary\\\">\\n              <ion-icon name=\\\"checkmark-circle-outline\\\"></ion-icon>\\n            </ion-button>\\n          </ion-col>\\n          <ion-col class=\\\"button-center\\\">\\n            <ion-button\\n              (click)=\\\"presentConfirmDelete(item)\\\"\\n              fill=\\\"clear\\\"\\n              color=\\\"danger\\\"\\n            >\\n              <ion-icon name=\\\"trash-outline\\\"></ion-icon>\\n            </ion-button>\\n          </ion-col>\\n        </ion-row>\\n      </ion-card>\\n    </ion-reorder-group>\\n  </ion-list>\\n</ion-content>\\n<ion-fab *ngIf=\\\"segment === 'active'\\\" vertical=\\\"bottom\\\" horizontal=\\\"end\\\">\\n  <ion-fab-button (click)=\\\"presentAddTask()\\\">\\n    <ion-icon name=\\\"add-sharp\\\"></ion-icon>\\n  </ion-fab-button>\\n</ion-fab>\\n\\n<ion-content *ngIf=\\\"segment === 'done'\\\">\\n  <ion-list>\\n    <ion-card *ngFor=\\\"let item of taskDoneItems\\\">\\n      <ion-card-content\\n        class=\\\"task-card-content\\\"\\n        (click)=\\\"navigateToTaskDetail(item, segment)\\\"\\n      >\\n        <ion-item class=\\\"card-background\\\" lines=\\\"none\\\">\\n          <ion-avatar slot=\\\"start\\\">\\n            <img\\n              src=\\\"https://gravatar.com/avatar/dba6bae8c566f9d4041fb9cd9ada7741?d=identicon&f=y\\\"\\n            />\\n          </ion-avatar>\\n          <ion-label>\\n            <h2 class=\\\"task-title\\\">{{ item.title }}</h2>\\n            <p>{{item.description}}</p>\\n          </ion-label>\\n        </ion-item>\\n      </ion-card-content>\\n    </ion-card>\\n  </ion-list>\\n</ion-content>\\n\";","import { Injectable } from '@angular/core';\nimport { TaskServiceService } from '../service/task-service.service';\nimport { Observable, of } from 'rxjs';\nimport { map, filter, flatMap, mergeMap, toArray } from 'rxjs/operators';\nimport { GetRoomQuery } from 'src/app/shared/service/amplify.service';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskLogicService {\n\n  constructor(\n    private taskService: TaskServiceService,\n    private sessionService: SessionService,\n  ) { }\n\n  fetchRoomInfo(roomId: string): Observable<GetRoomQuery> {\n    return this.taskService.fetchRoomInfo(roomId);\n  }\n\n  fetchCurrentUserInfo(): Observable<string> {\n    return this.sessionService.fetchCurrentUser().pipe(map((res) => res.attributes.email));\n  }\n\n  createTaskToRoom(dismissData, roomId, email): Observable<any> {\n    const iosStringDate = (new Date()).toISOString();\n    if (dismissData === undefined) {\n      return of({});\n    } else {\n      const content = {\n        id: `${uuid()}`,\n        authorID: `${email}`,\n        roomID: `${roomId}`,\n        title: dismissData.nameItem,\n        description: dismissData.descriptionItem,\n        scheduleDate: dismissData.scheduleDateItem,\n        createdAt: iosStringDate,\n        status: 0,\n        priority: 1\n      }\n      return this.taskService.createTaskItem(content);\n    }\n  }\n\n  fetchActiveTaskPerRoom(roomId): Observable<any> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`\n      }\n    }\n    return this.taskService.fetchTaskItemsPerRoom(filterContent)\n      .pipe(mergeMap((res) => res.items))\n      .pipe(filter(data => data.status < 10))\n      .pipe(toArray());\n  }\n\n  fetchDoneTaskPerRoom(roomId): Observable<any> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`\n      }\n    }\n    return this.taskService.fetchTaskItemsPerRoom(filterContent)\n      .pipe(mergeMap((res) => res.items))\n      .pipe(filter(data => data.status === 10))\n      .pipe(toArray());\n  }\n\n  updateTaskItem(taskItem, status): Observable<any> {\n    const content = {\n      id: taskItem.id,\n      status: status,\n    }\n    return this.taskService.updateTaskItem(content);\n  }\n\n  deleteTaskItem(taskId: string): Observable<any> {\n    const content = {\n      id: `${taskId}`,\n    }\n    return this.taskService.deleteTaskItem(content);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AmplifyService, GetRoomQuery, ListTasksQuery } from '../../../shared/service/amplify.service';\nimport { Observable, from } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskServiceService {\n\n  constructor(\n    private amplifyService: AmplifyService\n  ) { }\n\n  fetchRoomInfo(roomId: string): Observable<GetRoomQuery> {\n    return from(this.amplifyService.GetRoom(roomId));\n  }\n\n  createTaskItem(content): Observable<any> {\n    return from(this.amplifyService.CreateTask(content));\n  }\n\n  updateTaskItem(content): Observable<any> {\n    return from(this.amplifyService.UpdateTask(content));\n  }\n\n  fetchTaskItemsPerRoom(content): Observable<ListTasksQuery> {\n    return from(this.amplifyService.ListTasks(content));\n  }\n\n  deleteTaskItem(content): Observable<any> {\n    return from(this.amplifyService.DeleteTask(content));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TaskPage } from './task.page';\n\nconst routes: Routes = [\n  {\n    path: ':id',\n    component: TaskPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TaskPageRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TaskPageRoutingModule } from './task-routing.module';\n\nimport { TaskPage } from './task.page';\nimport { TaskLogicService } from './logic/task-logic.service';\nimport { TaskServiceService } from './service/task-service.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TaskPageRoutingModule\n  ],\n  declarations: [TaskPage],\n  providers: [TaskLogicService, TaskServiceService],\n})\nexport class TaskPageModule { }\n","export default \".task-title {\\n  font-weight: 500;\\n  font-size: large;\\n}\\n\\n.task-card-content {\\n  padding-top: 30px;\\n  padding-bottom: 10px;\\n}\\n\\n.card-background {\\n  --background: \\\"#1c1c1d\\\";\\n}\\n\\n.button-center {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90YWt1bmFrYWdhd2EvZGV2L2lvbmljL3dhbnRUby9zcmMvYXBwL3BhZ2VzL3Rhc2svdGFzay5wYWdlLnNjc3MiLCJzcmMvYXBwL3BhZ2VzL3Rhc2svdGFzay5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLGdCQUFBO0FDQ0o7O0FERUE7RUFDSSxpQkFBQTtFQUNBLG9CQUFBO0FDQ0o7O0FERUE7RUFDSSx1QkFBQTtBQ0NKOztBREVBO0VBQ0ksa0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Rhc2svdGFzay5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGFzay10aXRsZSB7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBmb250LXNpemU6IGxhcmdlO1xufVxuXG4udGFzay1jYXJkLWNvbnRlbnQge1xuICAgIHBhZGRpbmctdG9wOiAzMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4XG59XG5cbi5jYXJkLWJhY2tncm91bmQge1xuICAgIC0tYmFja2dyb3VuZDogJyMxYzFjMWQnO1xufVxuXG4uYnV0dG9uLWNlbnRlciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufSIsIi50YXNrLXRpdGxlIHtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zaXplOiBsYXJnZTtcbn1cblxuLnRhc2stY2FyZC1jb250ZW50IHtcbiAgcGFkZGluZy10b3A6IDMwcHg7XG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xufVxuXG4uY2FyZC1iYWNrZ3JvdW5kIHtcbiAgLS1iYWNrZ3JvdW5kOiBcIiMxYzFjMWRcIjtcbn1cblxuLmJ1dHRvbi1jZW50ZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ModalController, ToastController, ActionSheetController } from '@ionic/angular';\nimport { from, of } from 'rxjs';\nimport { flatMap, catchError, tap } from 'rxjs/operators';\nimport { GetRoomQuery } from 'src/app/shared/service/amplify.service';\nimport { AddTaskModalComponent } from '../../shared/component/modal/add-task-modal/add-task-modal.component';\nimport { DeleteTaskModalComponent } from '../../shared/component/modal/delete-task-modal/delete-task-modal.component';\nimport { TaskLogicService } from './logic/task-logic.service';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.page.html',\n  styleUrls: ['./task.page.scss'],\n})\nexport class TaskPage implements OnInit {\n  room = {} as GetRoomQuery;\n  roomId: string;\n  userEmail: string;\n  taskActiveItems;\n  taskDoneItems;\n  isReorder: boolean;\n  segment;\n\n  constructor(\n    private router: Router,\n    private modalCtrl: ModalController,\n    private route: ActivatedRoute,\n    private location: Location,\n    private logic: TaskLogicService,\n    private toastCtrl: ToastController,\n    private actionSheetCtrl: ActionSheetController,\n  ) { }\n\n  ngOnInit(): void {\n\n  }\n\n  ionViewWillEnter() {\n    this.isReorder = false;\n    this.segment = 'active';\n    this.roomId = this.route.snapshot.paramMap.get('id');\n    this.logic.fetchRoomInfo(this.roomId)\n      .subscribe((roomInfo: GetRoomQuery) => {\n        this.room = roomInfo;\n      });\n    this.logic.fetchCurrentUserInfo().subscribe((email) => this.userEmail = email);\n    this.logic.fetchActiveTaskPerRoom(this.roomId)\n      .subscribe((items) => {\n        this.taskActiveItems = items;\n      })\n\n    this.logic.fetchDoneTaskPerRoom(this.roomId)\n      .subscribe((items) => {\n        this.taskDoneItems = items;\n      })\n  }\n\n  async presentDoneToast(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: 'おつかれさまでした！',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  async presentAddTask() {\n    const modal = await this.modalCtrl.create({\n      component: AddTaskModalComponent,\n      componentProps: { room: this.room },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(flatMap(({ data }) => this.logic.createTaskToRoom(data, this.roomId, this.userEmail)))\n      .pipe(flatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n      .subscribe((items) => {\n        this.taskActiveItems = items;\n      });\n    return modal.present();\n  }\n\n  goBackToRoom(): void {\n    this.location.back();\n  }\n\n  sortTaskItem(): void {\n    this.isReorder = !this.isReorder;\n  }\n\n  reorderTask(ev): void {\n    const itemMove = this.taskActiveItems.splice(ev.detail.from, 1)[0];\n    this.taskActiveItems.splice(ev.detail.to, 0, itemMove);\n    ev.detail.complete();\n  }\n\n  navigateToTaskDetail(task, segment): void {\n    this.router.navigate(['task-detail', `${task.id}`, `${segment}`])\n  }\n\n  addCommentToTaskDetail(task): void {\n    this.router.navigate(['task-detail', `${task.id}`], { fragment: 'comment' })\n  }\n\n  segmentChanged(ev): void {\n    this.segment = ev.detail.value;\n  }\n\n  doneTask(taskItem): void {\n    const presentToast = from(this.presentDoneToast());\n    this.logic.updateTaskItem(taskItem, 10)\n      .pipe(flatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n      .pipe(tap(() => presentToast)).subscribe((data) => this.taskActiveItems = data);\n  }\n\n\n  async presentConfirmDelete(task) {\n    const actionSheet = await this.actionSheetCtrl.create({\n      buttons: [\n        {\n          text: '削除',\n          role: 'destructive',\n          icon: 'trash',\n          handler: () => {\n            this.deleteTask(task)\n          }\n        },\n        {\n          text: 'キャンセル',\n          icon: 'close',\n          role: 'cancel',\n        }\n      ]\n    })\n    return actionSheet.present();\n  }\n\n  deleteTask(task) {\n    console.log(task);\n    this.logic.deleteTaskItem(task.id)\n      .pipe(flatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n      .subscribe((result) => this.taskActiveItems = result);\n  }\n\n}\n"]}