{
    "pipes": [],
    "interfaces": [
        {
            "name": "Attribute",
            "id": "interface-Attribute-84e692cebe62160fbc25812a338ce10d",
            "file": "src/app/pages/task/task.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location, LocationStrategy } from '@angular/common';\nimport { Router, ActivatedRoute, RoutesRecognized, NavigationExtras } from '@angular/router';\nimport { ItemReorderEventDetail } from '@ionic/core';\nimport { ModalController, ToastController, AlertController, Platform } from '@ionic/angular';\nimport { forkJoin, from, of, Observable, Subscription } from 'rxjs';\nimport { tap, map, concatMap, filter, pairwise } from 'rxjs/operators';\nimport { GetRoomQuery, GetUserQuery } from 'src/app/shared/service/amplify.service';\nimport { TaskLogic } from './logic/task.logic';\nimport { CompanyMembersInfo } from './interface/current-user-info.interface';\nimport { AddTaskModalComponent } from '../../shared/component/modal/add-task-modal/add-task-modal.component';\nimport { AddRoomModalComponent } from '../../shared/component/modal/add-room-modal/add-room-modal.component';\nimport { InterfaceTask } from 'src/app/interfaces/task.interface';\nimport { TaskFormModel } from 'src/app/shared/model/task-form.model';\nimport { CompanyMembers, CurrentUser } from './model/task-member.model';\n\ninterface Attribute {\n  name: string,\n  email: string,\n  email_verified: boolean,\n  sub: string,\n}\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.page.html',\n  styleUrls: ['./task.page.scss'],\n})\nexport class TaskPage implements OnInit {\n  room = {} as GetRoomQuery;\n  roomId: string;\n  isReorder: boolean;\n  segment: string;\n  companyId: string;\n  companyMembers: Array<CompanyMembersInfo>;\n  roomMembers: Array<CompanyMembers>;\n  user: GetUserQuery;\n  taskFormData: TaskFormModel;\n  taskActiveItems: Array<InterfaceTask>;\n  taskDoneItems: Array<InterfaceTask>;\n  private previousUrl: string = undefined;\n  private previousParam: string = undefined;\n\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n\n  subscriptionCreateTask: Subscription;\n  subscriptionUpdateTask: Subscription;\n  subscriptionUpdateRoom: Subscription;\n\n  constructor(\n    private readonly locationStrate: LocationStrategy,\n    private readonly router: Router,\n    private readonly location: Location,\n    private readonly alertCtrl: AlertController,\n    private readonly toastCtrl: ToastController,\n    private readonly modalCtrl: ModalController,\n    private readonly route: ActivatedRoute,\n    private readonly logic: TaskLogic,\n    private readonly platform: Platform,\n  ) {\n    this.roomId = this.route.snapshot.paramMap.get('id');\n    this.isReorder = false;\n    this.initializeApp().subscribe(() => {\n      this.subscriptionCreateTask = this.logic.onCreateTaskListener().subscribe({\n        next: () => this.logic.fetchActiveTaskPerRoom(this.roomId)\n          .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n          .subscribe((items) => {\n            this.taskActiveItems = items.sort(this.logic.compareTaskArray);;\n          }),\n      })\n      this.subscriptionUpdateTask = this.logic.onUpdateTaskListener().subscribe({\n        next: () => this.logic.fetchActiveTaskPerRoom(this.roomId)\n          .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n          .pipe(map((data) => this.taskActiveItems = data.sort(this.logic.compareTaskArray)))\n          .pipe(concatMap(() => this.logic.fetchDoneTaskPerRoom(this.roomId).pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 10)))))\n          .pipe(map((doneResult) => this.taskDoneItems = doneResult))\n          .subscribe(() => { }),\n      });\n      this.subscriptionUpdateRoom = this.logic.onUpdateRoomListener().subscribe({\n        next: () => this.logic.fetchRoomInfo(this.roomId)\n          .pipe(map((result) => this.room = result))\n          .pipe(concatMap(() => this.logic.fetchMemberListOnRoom(this.roomId).pipe(map(({ items }) => items))))\n          .subscribe((result) => {\n            this.roomMembers = result\n          })\n      });\n    });\n    this.segment = this.router.getCurrentNavigation().extras.state?.status;\n    if (!this.segment) {\n      this.segment = 'active';\n    }\n\n    this.locationStrate.onPopState(() => {\n      // システムの戻るボタンクリック時の挙動\n    })\n  }\n\n  initializeApp(): Observable<string> {\n    return from(this.platform.ready());\n  }\n\n  ngOnInit(): void {\n    this.isReorder = false;\n    this.companyId = this.roomId.split(/(.*)_room/)[1];\n    this.logic.fetchCurrentUserCognitoInfo()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map((items) => this.currentUser = items[0]))\n      .pipe(concatMap(() => this.logic.fetchCompanyMembers(this.companyId)))\n      .subscribe((data) => {\n        this.companyMembers = data.companyMembers.items;\n      });\n    this.companyId = this.roomId.split(/(.*)_room/)[1];\n    forkJoin({\n      companyUser: this.logic.fetchCompanyMembers(this.companyId),\n      activeTaskItems: this.logic.fetchActiveTaskPerRoom(this.roomId).pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0))),\n      doneTaskItems: this.logic.fetchDoneTaskPerRoom(this.roomId).pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 10))),\n      room: this.logic.fetchRoomInfo(this.roomId),\n      roomMembers: this.logic.fetchMemberListOnRoom(this.roomId).pipe(map(({ items }) => items)),\n    }).subscribe(({ companyUser, activeTaskItems, doneTaskItems, room, roomMembers }) => {\n      this.companyMembers = companyUser.companyMembers.items;\n      this.taskActiveItems = activeTaskItems.sort(this.logic.compareTaskArray);\n      this.taskDoneItems = doneTaskItems;\n      this.room = room;\n      this.roomMembers = roomMembers;\n    });\n  }\n\n  // 前のURLだけを取得\n  public getPreviousParam() {\n    return this.previousParam;\n  }\n\n  async presentDoneToast(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: 'おつかれさまでした！',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  async presentAddTask(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddTaskModalComponent,\n      componentProps: {\n        room: this.room,\n        userId: this.currentUser.id,\n        roomMembers: this.roomMembers\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(map(({ data }) => this.taskFormData = data.taskValue))\n      .pipe(concatMap(() => this.taskActiveItems.length !== 0 ?\n        this.logic.updateStatusTaskItems(this.taskActiveItems) : of(this.taskActiveItems)\n      ))\n      .pipe(concatMap(() => this.logic.createTaskToRoom(this.taskFormData, this.roomId, this.currentUser.id)))\n      .pipe(concatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n      .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n      .subscribe((items) => {\n        this.taskActiveItems = items.sort(this.logic.compareTaskArray);;\n      });\n    return modal.present();\n  }\n\n  async presentEditRoom(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddRoomModalComponent,\n      componentProps: {\n        room: this.room,\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(concatMap(({ data }) => this.logic.updateRoom(data, this.room.id)))\n      .pipe(concatMap(() => this.logic.fetchRoomInfo(this.roomId)))\n      .subscribe((room) => {\n        this.room = room;\n      })\n    return modal.present();\n  }\n\n  goBackToRoom(): void {\n    this.location.back();\n  }\n\n  activeSortTaskItem(): void {\n    this.isReorder = !this.isReorder;\n  }\n\n  get isCheckFabButton(): boolean {\n    if (this.segment === 'active' && !this.isReorder) {\n      return true;\n    } else if (this.segment === 'active' && this.isReorder) {\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n  reorderTask(ev: CustomEvent<ItemReorderEventDetail>): void {\n    const itemMove = this.taskActiveItems.splice(ev.detail.from, 1)[0];\n    this.taskActiveItems.splice(ev.detail.to, 0, itemMove);\n    ev.detail.complete();\n    from(this.taskActiveItems)\n      .pipe(concatMap((taskActiveItem) => this.logic.getIndexNewArray(this.taskActiveItems, taskActiveItem)))\n      .pipe(concatMap((indexArray: number) => this.logic.updateTaskItemPriority(indexArray, this.taskActiveItems)))\n      .pipe(concatMap((data) => this.logic.reorderTaskMessage(data)))\n      .subscribe();\n  }\n\n  navigateToTaskDetail(task, segment: string, isReorder: boolean): void {\n    if (isReorder) return;\n    let navigationExtras: NavigationExtras = {\n      state: {\n        segment: segment,\n      }\n    };\n    this.router.navigate(['task-detail', `${task.id}`, `${segment}`], navigationExtras);\n  }\n\n  async addCommentToTaskDetail(task): Promise<void> {\n    await this.router.navigate(['task-detail', `${task.id}`, 'active'], {\n      fragment: 'comment'\n    });\n  }\n\n  segmentChanged(ev: CustomEvent): void {\n    this.segment = ev.detail.value;\n    this.location.replaceState(`task/${this.roomId}`, `status=${this.segment}`);\n    this.logic.fetchDoneTaskPerRoom(this.roomId)\n      .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 10)))\n      .subscribe((data) => {\n        this.taskDoneItems = data;\n      });\n  }\n\n  async presentDoneTaskAlert(alertBody): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '完了にしますか？',\n      message: `${alertBody.title}を完了にします。`,\n      buttons: [\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        },\n        {\n          text: 'OK',\n          role: 'ok',\n          handler: () => {\n            const presentToast = from(this.presentDoneToast());\n            this.logic.updateDoneTaskItem(alertBody, 10)\n              .pipe(concatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n              .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n              .pipe(tap(() => presentToast))\n              .subscribe((data) => { this.taskActiveItems = data });\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  navigateToRoomMember(): void {\n    this.router.navigate(['room-members', `${this.roomId}`, `${this.companyId}`]);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionCreateTask.unsubscribe();\n    this.subscriptionUpdateRoom.unsubscribe();\n    this.subscriptionUpdateTask.unsubscribe();\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-f8d555bb59a27a3308ef4e82d0b7c8fc-1",
            "file": "src/app/pages/task-detail/task-detail.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewChild, ɵCompiler_compileModuleSync__POST_R3__ } from '@angular/core';\nimport { Location, ViewportScroller, LocationStrategy } from '@angular/common';\nimport { Router, ActivatedRoute, RoutesRecognized } from '@angular/router';\nimport { ModalController, ActionSheetController, ToastController, IonContent, Platform, AlertController } from '@ionic/angular';\nimport { Camera, CameraResultType } from '@capacitor/camera';\nimport { forkJoin, from, Observable, Subscription } from 'rxjs';\nimport { filter, tap, map, concatMap, toArray, pairwise } from 'rxjs/operators';\nimport { TaskDetailLogic } from './logic/task-detail.logic';\nimport { AddTaskModalComponent } from 'src/app/shared/component/modal/add-task-modal/add-task-modal.component';\nimport { GetTaskQuery, ListRoomGroupsQuery } from 'src/app/shared/service/amplify.service';\nimport { IMessageWithAttachUrl, CurrentUser } from './models/task-detail.interface';\nimport { TaskPage } from '../task/task.page';\n\ninterface Attribute {\n  name: string,\n  email: string,\n  email_verified: boolean,\n  sub: string,\n};\n@Component({\n  selector: 'app-task-detail',\n  templateUrl: './task-detail.page.html',\n  styleUrls: ['./task-detail.page.scss'],\n})\nexport class TaskDetailPage implements OnInit {\n  @ViewChild('comment') child: HTMLElement;\n  @ViewChild(IonContent, { static: false }) content: IonContent;\n  @ViewChild(TaskPage) taskPage: TaskPage;\n  taskId: string;\n  segment: string;\n  taskDetail: GetTaskQuery;\n  message: Array<IMessageWithAttachUrl>;\n  currentUserId: string;\n  roomMembers: Array<ListRoomGroupsQuery>;\n  arrayImageBase64Data: Array<string> = [];\n  subscriptionMessage: Subscription;\n  link = \"comment\"\n  fragmentComment = '\u001d';\n  newMsg: string = '';\n  private previousUrl: string = undefined;\n  private previousParam: string = undefined;\n\n  currentUserAttribute: Attribute;\n  currentUserInfo: CurrentUser;\n\n  constructor(\n    private logic: TaskDetailLogic,\n    private readonly scroll: ViewportScroller,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly location: Location,\n    private readonly modalCtrl: ModalController,\n    private readonly actionSheetCtrl: ActionSheetController,\n    private readonly toastCtrl: ToastController,\n    private readonly platform: Platform,\n    private readonly alertCtrl: AlertController,\n    private readonly locationStrate: LocationStrategy,\n  ) {\n    this.segment = this.route.snapshot.paramMap.get('segment');\n\n    let resultMessage;\n    this.taskId = this.route.snapshot.paramMap.get('id');\n    this.initializeApp().subscribe(() => {\n      this.subscriptionMessage = this.logic.onCreateMessageListener()\n        .subscribe({\n          next: () => this.logic.fetchMessagePerTask(this.taskId)\n            .pipe(map((result) => resultMessage = result.items))\n            .pipe(concatMap(() => this.logic.makeMessageAuthorImageUrl(resultMessage)))\n            .pipe(concatMap((result) => this.logic.makeAttachmentUrl(result)))\n            .pipe(concatMap((arrayAttachment) => this.logic.modifiedMessageItems(arrayAttachment, resultMessage)))\n            .subscribe((items) => {\n              this.message = items\n            }),\n        });\n    });\n    this.router.events\n      .pipe(filter((event: any) => event instanceof RoutesRecognized), pairwise())\n      .subscribe((event: any) => {\n        this.previousUrl = event[0].urlAfterRedirects;\n      });\n    this.locationStrate.onPopState(() => {\n      // システムの戻るボタンクリック時の挙動\n    })\n  }\n\n  // 前のURLだけを取得\n  public getPreviousParam() {\n    return this.previousParam;\n  }\n\n  ngOnInit(): void {\n    let resultMessage;\n    this.segment = this.route.snapshot.paramMap.get('segment');\n    const observerFetchCurrentUserInfo = this.logic.fetchCurrentUserInfo()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n    const observerFetchAnyTask = this.logic.fetchAnyTask(this.taskId)\n      .pipe(map((data) => this.taskDetail = data))\n      .pipe(concatMap(() => this.logic.fetchMemberListOnRoom(this.taskDetail.roomID)));\n    const observerFetchMessagePerTask = this.logic.fetchMessagePerTask(this.taskId);\n    const observerMakeMessageAttachmentUrl = observerFetchMessagePerTask\n      .pipe(map((result) => resultMessage = result.items))\n      .pipe(concatMap((result) => this.logic.makeMessageAuthorImageUrl(result))) //AuthorIconのURLを設定する\n      .pipe(concatMap((result) => this.logic.makeAttachmentUrl(result)))\n      .pipe(concatMap((arrayAttachment) => this.logic.modifiedMessageItems(arrayAttachment, resultMessage)))\n\n    forkJoin({\n      currentUserInfo: observerFetchCurrentUserInfo,\n      anyTask: observerFetchAnyTask,\n      messageAttachment: observerMakeMessageAttachmentUrl,\n    }).subscribe((result) => {\n      this.currentUserInfo = result.currentUserInfo[0];\n      this.roomMembers = result.anyTask.items;\n      this.message = result.messageAttachment;\n    });\n  }\n\n  sendMessage(): void {\n    if (this.arrayImageBase64Data.length === 0) {\n      this.logic.sendNewMessage(this.taskId, this.newMsg, this.currentUserInfo.id)\n        .subscribe(() => this.newMsg = '');\n    } else {\n      this.logic.uploadFile(this.arrayImageBase64Data, this.taskId, this.currentUserInfo.id)\n        .pipe(concatMap(({ key }) => this.logic.makeS3Object(key)))\n        .pipe(toArray())\n        .pipe(concatMap((imageContent) => this.logic.sendNewMessage(this.taskId, this.newMsg, this.currentUserInfo.id, imageContent)))\n        .subscribe(() => {\n          this.newMsg = '';\n          this.arrayImageBase64Data = [];\n        });\n    }\n  }\n\n  async presentDoneToast(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: 'おつかれさまでした！',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  async presentMoveTask(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: '再度、戻しました。',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  ngAfterViewInit(): void {\n    this.route.fragment.subscribe((result) => {\n      this.scroll.scrollToAnchor(result);\n    });\n  }\n\n  async presentModalEditTask(taskDetail): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddTaskModalComponent,\n      componentProps: {\n        taskDetail: taskDetail,\n        roomMembers: this.roomMembers,\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    let resultObj;\n    dismissObservable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(map((data) => resultObj = data))\n      .pipe(concatMap(({ data }) => this.logic.updateTaskToRoom(data.taskValue, this.taskId)))\n      .pipe(concatMap((result) => this.logic.createMessage(result, resultObj)))\n      .pipe(concatMap(() => this.logic.fetchAnyTask(this.taskId)))\n      .subscribe((data) => {\n        this.taskDetail = data;\n      });\n    return modal.present();\n  }\n\n  doneTask(taskDetail): void {\n    const presentToast = from(this.presentDoneToast());\n    const messageContent = 'このタスクを完了としました';\n    this.logic.updateTaskItem(taskDetail, 10)\n      .pipe(concatMap((data) => this.logic.createMessage(data, messageContent)))\n      .pipe(concatMap(() => this.logic.fetchAnyTask(taskDetail.id)))\n      .pipe(tap(() => presentToast))\n      .subscribe((data) => {\n        this.taskDetail = data;\n      });\n  }\n\n  moveTask(taskDetail): void {\n    const presentToast = from(this.presentMoveTask());\n    const messageContent = 'このタスクをActiveにもどしました。';\n    this.logic.updateTaskItem(taskDetail, 0)\n      .pipe(concatMap((result) => this.logic.createMessage(result, messageContent)))\n      .pipe(concatMap(() => this.logic.fetchAnyTask(taskDetail.id)))\n      .pipe(tap(() => presentToast))\n      .subscribe((data) => {\n        this.taskDetail = data;\n      });\n  }\n\n  async presentActionSheet(taskDetail): Promise<void> {\n    const activeActionSheet = await this.actionSheetCtrl.create({\n      cssClass: 'my-custom-class',\n      buttons: [\n        {\n          text: '完了',\n          handler: () => {\n            this.doneTask(taskDetail);\n          }\n        },\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        }\n      ]\n    });\n\n    const doneActionSheet = await this.actionSheetCtrl.create({\n      cssClass: 'my-custom-class',\n      buttons: [\n        {\n          text: 'Activeに移動',\n          handler: () => {\n            this.moveTask(taskDetail);\n          }\n        },\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        }\n      ]\n    });\n\n    if (this.segment === 'active') {\n      await activeActionSheet.present();\n    } else if (this.segment === 'done') {\n      await doneActionSheet.present();\n    }\n  }\n\n  goBackToRoom(): void {\n    this.location.back();\n  }\n\n  selectFile(): void { }\n\n  async takePhoto(): Promise<void> {\n    const image = await Camera.getPhoto({\n      quality: 50,\n      allowEditing: true,\n      resultType: CameraResultType.DataUrl,\n      promptLabelHeader: 'カメラ',\n      promptLabelCancel: 'キャンセル',\n      promptLabelPhoto: 'ライブラリから',\n      promptLabelPicture: 'カメラ'\n    });\n    this.arrayImageBase64Data.push(image.dataUrl);\n  }\n\n  initializeApp(): Observable<string> {\n    return from(this.platform.ready());\n  }\n\n  deleteImage(indexTarget: number): void {\n    this.arrayImageBase64Data.splice(indexTarget, 1);\n  }\n\n  async presentAlert(): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: 'アップロード最大値です',\n      message: '一度にアップロードできる数は一件です',\n      buttons: ['了解']\n    });\n    await alert.present();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionMessage.unsubscribe();\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Attribute-1"
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-b7bfcca7b096cae58894d64ae2b7cb4f-2",
            "file": "src/app/pages/home/logic/home.logic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, from, of } from 'rxjs';\nimport { concatMap, map, filter, toArray, find } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { HomeService } from '../service/home.service';\nimport { SessionService } from '../../../shared/service/session.service';\nimport {\n  CreateRoomGroupMutation,\n  CreateRoomMutation,\n  CreateUserMutation,\n  DeleteRoomMutation,\n  ListUsersQuery,\n  ModelRoomGroupFilterInput,\n  UpdateUserInput,\n  ListTaskGroupsQuery,\n  GetUserQuery,\n} from 'src/app/shared/service/amplify.service';\nimport { Storage } from 'aws-amplify';\nimport { CurrentUser, RoomGroupItems, InterfaceLogicArgsCreateRoom, FetchTaskGroup } from '../model/home.interface';\nimport { IS3Object } from '../../task-detail/models/task-detail.interface';\nimport { environment } from 'src/environments/environment';\n\ninterface Attribute {\n  name: string,\n  email: string,\n  email_verified: boolean,\n  sub: string,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HomeLogic {\n\n  constructor(\n    private readonly homeService: HomeService,\n    private readonly sessionService: SessionService,\n  ) { }\n\n  /**\n   * 登録しているユーザ情報をチェックします\n   * @param attribute 登録しているユーザ情報\n   * @returns 登録しているユーザ情報を取得する\n   */\n  checkRegistrationUser(attribute: Attribute): Observable<ListUsersQuery> {\n    return this.homeService.checkRegistrationUser(attribute.email);\n  }\n\n  /**\n   * ログインしているユーザ情報をCognitoから取得します\n   * @returns 現在ログインしているユーザー情報を取得する\n   */\n  fetchCurrentUser(): Observable<Attribute> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map((res) => res.attributes));\n  }\n\n  /**\n  * Roomを新規で作成するメソッドです\n  * @param content ルーム作成するのに必要な情報\n  * @returns Roomを新規作成してその値を取得します\n  */\n  createRoom(content: InterfaceLogicArgsCreateRoom, currentUser: CurrentUser): Observable<CreateRoomMutation> {\n    const requestContent = {\n      id: `${currentUser.companyID}_room_${uuid()}`,\n      companyID: `${currentUser.companyID}`,\n      name: content.nameItem,\n      description: content.descriptionItem,\n    };\n    return this.homeService.createRoom(requestContent);\n  }\n\n  /**\n   * ユーザ情報を新規で作成します\n   * @param formContent Form型のユーザ\n   * @returns ユーザを新規で作成してその結果を返します\n   */\n  createUser(formContent: FormGroup): Observable<CreateUserMutation> {\n    const resultFormIconImageUrl = formContent.get('keyAvatarImage').value;\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    let avatarUserImage: IS3Object;\n    if (resultFormIconImageUrl !== '') {\n      avatarUserImage = {\n        key: resultFormIconImageUrl,\n        bucket: bucket,\n        region: region,\n      }\n    } else {\n      avatarUserImage = {\n        key: '',\n        bucket: bucket,\n        region: region,\n      }\n    }\n    const requestContent = {\n      id: formContent.get('id').value,\n      username: formContent.get('userName').value,\n      email: formContent.get('targetEmail').value,\n      companyID: 'takuCloudCom',\n      tel: formContent.get('tel').value,\n      positionName: formContent.get('positionName').value,\n      iconImage: avatarUserImage,\n      registered: true,\n    };\n    return this.homeService.createUser(requestContent);\n  }\n\n  updateUser(formContent: FormGroup, extraData): Observable<any> {\n    const resultFormIconImageUrl = formContent.get('keyAvatarImage').value;\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    const requestContent: UpdateUserInput = {\n      id: formContent.get('id').value,\n      username: formContent.get('userName').value,\n      email: formContent.get('targetEmail').value,\n      companyID: extraData.companyId,\n      tel: formContent.get('tel').value ? formContent.get('tel').value : '',\n      positionName: formContent.get('positionName').value ? formContent.get('positionName').value : '',\n    };\n    if (resultFormIconImageUrl !== null) {\n      requestContent.iconImage = {\n        key: resultFormIconImageUrl,\n        bucket: bucket,\n        region: region,\n      }\n    }\n    return this.homeService.updateUser(requestContent);\n  }\n\n  deleteRoomItem(roomId: string): Observable<DeleteRoomMutation> {\n    return this.homeService.deleteRoomItem(roomId);\n  }\n\n  createUserRoomGroup(userId: string, roomId: string): Observable<CreateRoomGroupMutation> {\n    const content = {\n      id: `user-room-group-${uuid()}`,\n      roomID: `${roomId}`,\n      userID: `${userId}`,\n    }\n    return this.homeService.createUserRoomGroup(content);\n  }\n\n  fetchRoomMembers(roomId: string, currentUserId: string): Observable<Array<RoomGroupItems>> {\n    const filterContent: ModelRoomGroupFilterInput = {\n      roomID: {\n        eq: `${roomId}`\n      },\n      userID: {\n        ne: `${currentUserId}`\n      }\n    }\n    return this.homeService.fetchRoomMembers(filterContent)\n      .pipe(map((result) => result.items));\n  }\n\n  removeMeFromRoom(roomId: string, meId: string): Observable<any> {\n    return this.fetchRoomGroupsId(roomId, meId)\n      .pipe(concatMap((roomGroupId) => this.homeService.deleteRoomGroupsItem(roomGroupId)));\n  }\n\n  fetchRoomGroupsId(roomId: string, meId: string): Observable<string> {\n    const filterContent = {\n      roomID: {\n        eq: roomId,\n      },\n      userID: {\n        eq: meId,\n      }\n    }\n    return this.homeService.fetchRoomGroupsId(filterContent)\n      .pipe(map(({ items }) => items[0].id));\n  }\n\n  fetchRoomList(currentUseId: string): Observable<Array<RoomGroupItems>> {\n    const filterContent = {\n      userID: {\n        eq: currentUseId\n      }\n    }\n    return this.homeService.fetchRoomList(filterContent)\n      .pipe(map(({ items }) => items));\n  }\n\n  uploadAvatarIconUrl(base64Data: any, userId: string): Observable<any> {\n    let contentType: string;\n    let fileName: string;\n    let uploadFilePath: string;\n    let ext: string;\n    const dt = new Date();\n    const dateDir = this.getDirString(dt, userId);\n    return this.getContentType(base64Data)\n      .pipe(map((result) => contentType = result))\n      .pipe(concatMap((contentType) => this.makeExt(contentType)))\n      .pipe(map(result => ext = result))\n      .pipe(map(() => fileName = `avatar_${uuid()}_/${dateDir}`))\n      .pipe(map(() => uploadFilePath = `${fileName}.${ext}`))\n      .pipe(concatMap(() => this.base64toBlob(base64Data, contentType)))\n      .pipe(concatMap((blobFile) => this.putStorage(uploadFilePath, blobFile, contentType)));\n  }\n\n  getDirString(dt: Date, userId: string): string {\n    return \"\" + userId + \"/\" +\n      (\"00\" + dt.getUTCFullYear()).slice(-2) +\n      (\"00\" + (dt.getMonth() + 1)).slice(-2) +\n      (\"00\" + dt.getUTCDate()).slice(-2) +\n      (\"00\" + dt.getUTCHours()).slice(-2) +\n      (\"00\" + dt.getMinutes()).slice(-2) +\n      (\"00\" + dt.getUTCSeconds()).slice(-2);\n  }\n\n  setExitsRoomAndUser(data: Array<RoomGroupItems>): Observable<any> {\n    return from(data)\n      .pipe(filter((item: RoomGroupItems) => item.room !== null))\n      .pipe(filter((item: RoomGroupItems) => item.user !== null))\n      .pipe(toArray());\n  }\n\n  getContentType(base64data): Observable<string> {\n    const block = base64data.split(\";\");\n    const contentType = block[0].split(\":\")[1];\n    return of(contentType)\n  }\n\n  makeExt(contentType: string): Observable<string> {\n    return of(contentType.match(/([^/]+?)?$/)[0]);\n  }\n\n  base64toBlob(base64Data: any, contentType: string): Observable<Blob> {\n    const byteCharacters = atob(base64Data.replace(/^.*,/, ''));\n    let buffer = new Uint8Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      buffer[i] = byteCharacters.charCodeAt(i);\n    }\n    const blob = new Blob([buffer.buffer], {\n      type: contentType\n    });\n    return of(blob);\n  }\n\n  putStorage(uploadFileName: string, blobFile: Blob, contentType: string): Observable<Object> {\n    return from(Storage.put(\n      uploadFileName,\n      blobFile,\n      {\n        contentType: contentType,\n      }\n    ));\n  }\n\n  makeS3Object(key: string): Observable<IS3Object> {\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    const keyFile = `public/${key}`;\n    const returnResult = {\n      key: keyFile,\n      region: region,\n      bucket: bucket\n    }\n    return of(returnResult);\n  }\n\n  getStorage(filePathName: string): Observable<any> {\n    return from(Storage.get(filePathName));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.homeService.checkRegistrationUser(email)\n      .pipe(map((result) => result.items));\n  }\n\n  onCreateRoomListener(): any {\n    return this.homeService.onCreateRoomListener();\n  }\n\n  onUpdateRoomListener(): any {\n    return this.homeService.onUpdateRoomListener();\n  }\n\n  onDeleteRoomListener(): any {\n    return this.homeService.onDeleteRoomListener();\n  }\n\n  onCreateRoomGroupListener(): any {\n    return this.homeService.onCreateRoomGroupListener();\n  }\n\n  onUpdateRoomGroupListener(): any {\n    return this.homeService.onUpdateRoomGroupListener();\n  }\n\n  onDeleteRoomGroupListener(): any {\n    return this.homeService.onDeleteRoomGroupListener();\n  }\n\n  fetchTaskGroupPerUser(userID: string): Observable<ListTaskGroupsQuery> {\n    const filterContent = {\n      userID: {\n        eq: userID\n      }\n    }\n    return this.homeService.fetchTaskGroupPerUser(filterContent);\n  }\n\n  fetchUserInfo(userId: string): Observable<GetUserQuery> {\n    return this.homeService.fetchUserInfo(userId);\n  }\n\n  verifyExistTaskOnRoom(chargeItems: Array<FetchTaskGroup>, roomId: string): Observable<any> {\n    let isExist = false;\n    const statusDone = 10;\n    return from(chargeItems)\n      .pipe(find((item) => item.roomID === roomId && item.status !== statusDone))\n      .pipe(map((data) => !data ? isExist = false : isExist = true));\n  }\n\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Attribute-2"
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-c91ea18d687dabe470eb07b6518070d1-3",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "Attribute-3"
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-da890d26e996b7d9551b13108cf4dc34-4",
            "file": "src/app/pages/own-task/model/own-task.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "Attribute-4"
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-a3d8e1a88388781114a3c236b72af730-5",
            "file": "src/app/pages/member-list/models/member-list.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RequestRegisterCompanyMember {\n    companyMemberEmail: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface OptionData {\n    companyId: string,\n    companyName: string,\n    officerName: string,\n};\n\nexport interface CompanyMember {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "Attribute-5"
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-00334f795e7f6b4b95fd5a9b36443b73-6",
            "file": "src/app/pages/room-members/models/room-members.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ListRoomMembersInfo = {\n    __typename: string;\n    id: string;\n    userID: string;\n    roomID: string;\n    createdAt: string,\n    updatedAt: string;\n    user: {\n        __typename: string;\n        id: string;\n        companyID: string;\n        username: string\n        positionName: string;\n        authority: string | null;\n        createdAt: string;\n        email: string;\n        iconImage: string;\n        registered: boolean | null;\n        tel: string;\n        updatedAt: string;\n    }\n}\n\nexport type ListUserInfo = {\n    __typename: string;\n    id: string;\n    companyID: string;\n    username: string\n    positionName: string;\n    authority: string | null;\n    createdAt: string;\n    email: string;\n    iconImage: string;\n    registered: boolean | null;\n    tel: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface RoomGroupUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "Attribute-6"
        },
        {
            "name": "Attribute",
            "id": "interface-Attribute-4ca888e704815ed3b4d3c42a65fc77bf-7",
            "file": "src/app/pages/setting/interface/setting.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GetUserQuery } from \"src/app/shared/service/amplify.service\";\nimport { IS3Object } from \"../../task-detail/models/task-detail.interface\";\n\nexport interface IOwnUser {\n    __typename: string;\n    id: string;\n    username: string;\n    email: string;\n    companyID: string;\n    authority: string;\n    positionName: string;\n    tel?: string;\n    iconImage: IS3Object;\n    registered?: boolean\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IUser extends GetUserQuery {\n    avatarUrl?: String | Object;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 7,
            "duplicateName": "Attribute-7"
        },
        {
            "name": "CompanyMember",
            "id": "interface-CompanyMember-a3d8e1a88388781114a3c236b72af730",
            "file": "src/app/pages/member-list/models/member-list.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RequestRegisterCompanyMember {\n    companyMemberEmail: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface OptionData {\n    companyId: string,\n    companyName: string,\n    officerName: string,\n};\n\nexport interface CompanyMember {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 70
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CompanyMembers",
            "id": "interface-CompanyMembers-cd8b0157de54d00628b76c9220ea5563",
            "file": "src/app/pages/task/model/task-member.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from 'src/app/shared/service/amplify.service';\nexport interface MemberTask extends User {\n    checked?: boolean\n}\n\nexport interface CompanyMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CompanyMembersInfo",
            "id": "interface-CompanyMembersInfo-cb2fcfb9ee7fb94190c7d4acf4550021",
            "file": "src/app/pages/task/interface/current-user-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CurrentUserInfo {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n}\n\nexport interface CompanyMembersInfo {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CompanyRegister",
            "id": "interface-CompanyRegister-1bf84866508e83b15c0ae917148cc639",
            "file": "src/app/pages/registration-company/interface/company-register.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CompanyRegister {\n    companyEmail: string;\n    companyIcon: string;\n    companyName: string;\n    companyOfficer: Array<OfficerRegister>;\n    companyTel: string;\n}\n\ninterface OfficerRegister {\n    officerEmail: string;\n    officerName: string;\n}",
            "properties": [
                {
                    "name": "companyEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "companyIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "companyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "companyOfficer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<OfficerRegister>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "companyTel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 72
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-da890d26e996b7d9551b13108cf4dc34-1",
            "file": "src/app/pages/own-task/model/own-task.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CurrentUser-1"
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-a3d8e1a88388781114a3c236b72af730-2",
            "file": "src/app/pages/member-list/models/member-list.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RequestRegisterCompanyMember {\n    companyMemberEmail: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface OptionData {\n    companyId: string,\n    companyName: string,\n    officerName: string,\n};\n\nexport interface CompanyMember {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "CurrentUser-2"
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-00334f795e7f6b4b95fd5a9b36443b73-3",
            "file": "src/app/pages/room-members/models/room-members.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ListRoomMembersInfo = {\n    __typename: string;\n    id: string;\n    userID: string;\n    roomID: string;\n    createdAt: string,\n    updatedAt: string;\n    user: {\n        __typename: string;\n        id: string;\n        companyID: string;\n        username: string\n        positionName: string;\n        authority: string | null;\n        createdAt: string;\n        email: string;\n        iconImage: string;\n        registered: boolean | null;\n        tel: string;\n        updatedAt: string;\n    }\n}\n\nexport type ListUserInfo = {\n    __typename: string;\n    id: string;\n    companyID: string;\n    username: string\n    positionName: string;\n    authority: string | null;\n    createdAt: string;\n    email: string;\n    iconImage: string;\n    registered: boolean | null;\n    tel: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface RoomGroupUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "CurrentUser-3"
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-4ca888e704815ed3b4d3c42a65fc77bf-4",
            "file": "src/app/pages/setting/interface/setting.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GetUserQuery } from \"src/app/shared/service/amplify.service\";\nimport { IS3Object } from \"../../task-detail/models/task-detail.interface\";\n\nexport interface IOwnUser {\n    __typename: string;\n    id: string;\n    username: string;\n    email: string;\n    companyID: string;\n    authority: string;\n    positionName: string;\n    tel?: string;\n    iconImage: IS3Object;\n    registered?: boolean\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IUser extends GetUserQuery {\n    avatarUrl?: String | Object;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "CurrentUser-4"
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-cd8b0157de54d00628b76c9220ea5563-5",
            "file": "src/app/pages/task/model/task-member.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from 'src/app/shared/service/amplify.service';\nexport interface MemberTask extends User {\n    checked?: boolean\n}\n\nexport interface CompanyMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "CurrentUser-5"
        },
        {
            "name": "CurrentUser",
            "id": "interface-CurrentUser-719f26f913f9b71b8b8cc4e3f5a0c96f-6",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "chargeTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "CurrentUser-6"
        },
        {
            "name": "CurrentUserInfo",
            "id": "interface-CurrentUserInfo-cb2fcfb9ee7fb94190c7d4acf4550021",
            "file": "src/app/pages/task/interface/current-user-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CurrentUserInfo {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n}\n\nexport interface CompanyMembersInfo {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "email_verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "FetchTaskGroup",
            "id": "interface-FetchTaskGroup-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "authorID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "chargePersonID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "scheduleDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 167
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "FilterTaskGroupPerUser",
            "id": "interface-FilterTaskGroupPerUser-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 150
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IArgsEntrySignup",
            "id": "interface-IArgsEntrySignup-5853ed4e10fc7bd954357c6883edef6a",
            "file": "src/app/shared/model/task-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TaskFormModel {\n    nameItem: string;\n    descriptionItem: string;\n    chargePersonId: string;\n    scheduleDateItem: string;\n}\n\nexport interface IArgsEntrySignup {\n    username: string;\n    password: string;\n    attributes: {\n        name: string;\n        email: string;\n    }\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IconImage",
            "id": "interface-IconImage-a3d8e1a88388781114a3c236b72af730",
            "file": "src/app/pages/member-list/models/member-list.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RequestRegisterCompanyMember {\n    companyMemberEmail: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface OptionData {\n    companyId: string,\n    companyName: string,\n    officerName: string,\n};\n\nexport interface CompanyMember {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "bucket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IconImage",
            "id": "interface-IconImage-4ca888e704815ed3b4d3c42a65fc77bf-1",
            "file": "src/app/pages/setting/interface/setting.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GetUserQuery } from \"src/app/shared/service/amplify.service\";\nimport { IS3Object } from \"../../task-detail/models/task-detail.interface\";\n\nexport interface IOwnUser {\n    __typename: string;\n    id: string;\n    username: string;\n    email: string;\n    companyID: string;\n    authority: string;\n    positionName: string;\n    tel?: string;\n    iconImage: IS3Object;\n    registered?: boolean\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IUser extends GetUserQuery {\n    avatarUrl?: String | Object;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "bucket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IconImage-1"
        },
        {
            "name": "IImageFile",
            "id": "interface-IImageFile-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ILResponseFetchRoomMembers",
            "id": "interface-ILResponseFetchRoomMembers-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IMessageAttachment",
            "id": "interface-IMessageAttachment-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "bucket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IMessageWithAttachUrl",
            "id": "interface-IMessageWithAttachUrl-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "attachmentWithUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "authorIconWithUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "Message"
        },
        {
            "name": "InterfaceArgsCreateRoom",
            "id": "interface-InterfaceArgsCreateRoom-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InterfaceLogicArgsCreateRoom",
            "id": "interface-InterfaceLogicArgsCreateRoom-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "descriptionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "nameItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InterfaceLogicArgsCreateUser",
            "id": "interface-InterfaceLogicArgsCreateUser-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "targetEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InterfaceRoomMembers",
            "id": "interface-InterfaceRoomMembers-041e03b1bddce1fa22b9e99e134fa262",
            "file": "src/app/pages/room-members/interface/room-members.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface InterfaceRoomMembers {\n    createdAt: string;\n    id: string;\n    roomID: string;\n    updatedAt: string;\n    user: InterfaceUser;\n    userID: string;\n    __typename: string;\n}\n\nexport interface InterfaceUser {\n    authority: string;\n    companyID: string;\n    createdAt: string;\n    email: string;\n    iconImage: string;\n    id: string;\n    positionName: string;\n    registered: string;\n    tel: string;\n    updatedAt: string;\n    username: string;\n    __typename: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InterfaceUser",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InterfaceSignup",
            "id": "interface-InterfaceSignup-69a1f92b05629416641e896eac63ea68",
            "file": "src/app/interfaces/signup.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface InterfaceSignup {\n    name: string;\n    email: string;\n    passwordform: string;\n    confirmPasswordform: string;\n}\n",
            "properties": [
                {
                    "name": "confirmPasswordform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "passwordform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InterfaceTask",
            "id": "interface-InterfaceTask-5193b2668e0295232b93fdc1f9563c97",
            "file": "src/app/interfaces/task.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface InterfaceTask {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    users?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "authorID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "chargePerson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "chargePersonID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "iconTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "scheduleDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "InterfaceUser",
            "id": "interface-InterfaceUser-041e03b1bddce1fa22b9e99e134fa262",
            "file": "src/app/pages/room-members/interface/room-members.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface InterfaceRoomMembers {\n    createdAt: string;\n    id: string;\n    roomID: string;\n    updatedAt: string;\n    user: InterfaceUser;\n    userID: string;\n    __typename: string;\n}\n\nexport interface InterfaceUser {\n    authority: string;\n    companyID: string;\n    createdAt: string;\n    email: string;\n    iconImage: string;\n    id: string;\n    positionName: string;\n    registered: string;\n    tel: string;\n    updatedAt: string;\n    username: string;\n    __typename: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IOwnUser",
            "id": "interface-IOwnUser-4ca888e704815ed3b4d3c42a65fc77bf",
            "file": "src/app/pages/setting/interface/setting.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GetUserQuery } from \"src/app/shared/service/amplify.service\";\nimport { IS3Object } from \"../../task-detail/models/task-detail.interface\";\n\nexport interface IOwnUser {\n    __typename: string;\n    id: string;\n    username: string;\n    email: string;\n    companyID: string;\n    authority: string;\n    positionName: string;\n    tel?: string;\n    iconImage: IS3Object;\n    registered?: boolean\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IUser extends GetUserQuery {\n    avatarUrl?: String | Object;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iconImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IS3Object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IS3Object",
            "id": "interface-IS3Object-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "bucket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ISArgsCreateRoomGroup",
            "id": "interface-ISArgsCreateRoomGroup-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IsMessageContent",
            "id": "interface-IsMessageContent-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "undefined",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-4ca888e704815ed3b4d3c42a65fc77bf",
            "file": "src/app/pages/setting/interface/setting.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GetUserQuery } from \"src/app/shared/service/amplify.service\";\nimport { IS3Object } from \"../../task-detail/models/task-detail.interface\";\n\nexport interface IOwnUser {\n    __typename: string;\n    id: string;\n    username: string;\n    email: string;\n    companyID: string;\n    authority: string;\n    positionName: string;\n    tel?: string;\n    iconImage: IS3Object;\n    registered?: boolean\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IUser extends GetUserQuery {\n    avatarUrl?: String | Object;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String | Object",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "GetUserQuery"
        },
        {
            "name": "MemberTask",
            "id": "interface-MemberTask-cd8b0157de54d00628b76c9220ea5563",
            "file": "src/app/pages/task/model/task-member.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from 'src/app/shared/service/amplify.service';\nexport interface MemberTask extends User {\n    checked?: boolean\n}\n\nexport interface CompanyMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "User"
        },
        {
            "name": "MessageContent",
            "id": "interface-MessageContent-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "authorID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "taskID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "OfficerRegister",
            "id": "interface-OfficerRegister-1bf84866508e83b15c0ae917148cc639",
            "file": "src/app/pages/registration-company/interface/company-register.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CompanyRegister {\n    companyEmail: string;\n    companyIcon: string;\n    companyName: string;\n    companyOfficer: Array<OfficerRegister>;\n    companyTel: string;\n}\n\ninterface OfficerRegister {\n    officerEmail: string;\n    officerName: string;\n}",
            "properties": [
                {
                    "name": "officerEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "officerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "OptionData",
            "id": "interface-OptionData-a3d8e1a88388781114a3c236b72af730",
            "file": "src/app/pages/member-list/models/member-list.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RequestRegisterCompanyMember {\n    companyMemberEmail: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface OptionData {\n    companyId: string,\n    companyName: string,\n    officerName: string,\n};\n\nexport interface CompanyMember {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}",
            "properties": [
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "companyName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "officerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "RequestRegisterCompanyMember",
            "id": "interface-RequestRegisterCompanyMember-a3d8e1a88388781114a3c236b72af730",
            "file": "src/app/pages/member-list/models/member-list.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RequestRegisterCompanyMember {\n    companyMemberEmail: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface OptionData {\n    companyId: string,\n    companyName: string,\n    officerName: string,\n};\n\nexport interface CompanyMember {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}",
            "properties": [
                {
                    "name": "companyMemberEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ResponseListRoomGroupsQueryItems",
            "id": "interface-ResponseListRoomGroupsQueryItems-7895f4ad22d08a4ad2827d0b149e5bdc",
            "file": "src/app/pages/home/service/response/response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ResponseListRoomGroupsQueryItems {\n    // items: {\n    __typename: string,\n    id: string,\n    roomID: string,\n    userID: string,\n    room?: {\n        __typename: string,\n        id: string,\n        name: string,\n        companyID: string,\n        description: string,\n        createdAt: string,\n        updatedAt: string,\n    } | null,\n    user?: {\n        __typename: string,\n        id: string,\n        username: string,\n        email: string,\n        companyID: string,\n        tel: string,\n        positionName: string,\n        iconImage: string,\n        registered: boolean,\n        authority: string,\n        createdAt: string,\n        updatedAt: string,\n    } | null,\n    createdAt: string,\n    updatedAt: string,\n    // }\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "RoomGroupItems",
            "id": "interface-RoomGroupItems-c91ea18d687dabe470eb07b6518070d1",
            "file": "src/app/pages/home/model/home.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Form, FormControl } from \"@angular/forms\";\n\nexport interface InterfaceArgsCreateRoom {\n    id: string;\n    companyID: string;\n    name: string;\n    description: string;\n};\n\nexport interface InterfaceLogicArgsCreateRoom {\n    nameItem: string;\n    descriptionItem: string;\n};\n\nexport interface InterfaceLogicArgsCreateUser {\n    id: string;\n    targetEmail: string;\n    userName: string;\n    positionName: string;\n    tel: string;\n    iconImage: string;\n}\n\nexport interface ISArgsCreateRoomGroup {\n    id: string;\n    roomID: string;\n    userID: string;\n}\n\nexport interface ILResponseFetchRoomMembers {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel: string | null;\n        positionName: string | null;\n        iconImage: string | null;\n        registered: boolean | null;\n        authority: string | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface FilterTaskGroupPerUser {\n    userID: {\n        eq: string\n    }\n}\n\nexport interface FetchTaskGroup {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    description?: string | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    updatedAt: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "RoomGroupItems",
            "id": "interface-RoomGroupItems-00334f795e7f6b4b95fd5a9b36443b73-1",
            "file": "src/app/pages/room-members/models/room-members.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ListRoomMembersInfo = {\n    __typename: string;\n    id: string;\n    userID: string;\n    roomID: string;\n    createdAt: string,\n    updatedAt: string;\n    user: {\n        __typename: string;\n        id: string;\n        companyID: string;\n        username: string\n        positionName: string;\n        authority: string | null;\n        createdAt: string;\n        email: string;\n        iconImage: string;\n        registered: boolean | null;\n        tel: string;\n        updatedAt: string;\n    }\n}\n\nexport type ListUserInfo = {\n    __typename: string;\n    id: string;\n    companyID: string;\n    username: string\n    positionName: string;\n    authority: string | null;\n    createdAt: string;\n    email: string;\n    iconImage: string;\n    registered: boolean | null;\n    tel: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface RoomGroupUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RoomGroupItems-1"
        },
        {
            "name": "RoomGroupItems",
            "id": "interface-RoomGroupItems-4ca888e704815ed3b4d3c42a65fc77bf-2",
            "file": "src/app/pages/setting/interface/setting.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GetUserQuery } from \"src/app/shared/service/amplify.service\";\nimport { IS3Object } from \"../../task-detail/models/task-detail.interface\";\n\nexport interface IOwnUser {\n    __typename: string;\n    id: string;\n    username: string;\n    email: string;\n    companyID: string;\n    authority: string;\n    positionName: string;\n    tel?: string;\n    iconImage: IS3Object;\n    registered?: boolean\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IUser extends GetUserQuery {\n    avatarUrl?: String | Object;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username: string;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface IconImage {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n}\n",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "roomID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": true,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "userID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "RoomGroupItems-2"
        },
        {
            "name": "RoomGroupUser",
            "id": "interface-RoomGroupUser-00334f795e7f6b4b95fd5a9b36443b73",
            "file": "src/app/pages/room-members/models/room-members.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ListRoomMembersInfo = {\n    __typename: string;\n    id: string;\n    userID: string;\n    roomID: string;\n    createdAt: string,\n    updatedAt: string;\n    user: {\n        __typename: string;\n        id: string;\n        companyID: string;\n        username: string\n        positionName: string;\n        authority: string | null;\n        createdAt: string;\n        email: string;\n        iconImage: string;\n        registered: boolean | null;\n        tel: string;\n        updatedAt: string;\n    }\n}\n\nexport type ListUserInfo = {\n    __typename: string;\n    id: string;\n    companyID: string;\n    username: string\n    positionName: string;\n    authority: string | null;\n    createdAt: string;\n    email: string;\n    iconImage: string;\n    registered: boolean | null;\n    tel: string;\n    updatedAt: string;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\nexport interface Attribute {\n    name: string,\n    email: string,\n    email_verified: boolean,\n    sub: string,\n};\n\nexport interface RoomGroupItems {\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n        __typename: \"Room\";\n        id: string;\n        name: string;\n        companyID: string;\n        description: string;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    user?: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface RoomGroupUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    createdAt: string;\n    updatedAt: string;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "authority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "companyID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "positionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "tel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 129
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SignUpValue",
            "id": "interface-SignUpValue-e64e1cd17be163f447309015e59d304b",
            "file": "src/app/pages/create-company/models/signup.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SignUpValue {\n    name: string,\n    email: string,\n    password: string,\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SubscriptionResponse",
            "id": "interface-SubscriptionResponse-32448683c7cc7626414e3cec9a3d2958",
            "file": "src/app/API.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport API, { graphqlOperation, GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport { Observable } from \"zen-observable-ts\";\n\nexport interface SubscriptionResponse<T> {\n  value: GraphQLResult<T>;\n}\n\nexport type CreateCompanyInput = {\n  id?: string | null;\n  name: string;\n  officer: Array<OfficerInput | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type OfficerInput = {\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3ObjectInput = {\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelCompanyConditionInput = {\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyConditionInput | null> | null;\n  or?: Array<ModelCompanyConditionInput | null> | null;\n  not?: ModelCompanyConditionInput | null;\n};\n\nexport type ModelStringInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport enum ModelAttributeTypes {\n  binary = \"binary\",\n  binarySet = \"binarySet\",\n  bool = \"bool\",\n  list = \"list\",\n  map = \"map\",\n  number = \"number\",\n  numberSet = \"numberSet\",\n  string = \"string\",\n  stringSet = \"stringSet\",\n  _null = \"_null\"\n}\n\nexport type ModelSizeInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n};\n\nexport type ModelBooleanInput = {\n  ne?: boolean | null;\n  eq?: boolean | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type Company = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<Officer | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3Object | null;\n  billing?: boolean | null;\n  room?: ModelRoomConnection | null;\n  companyMembers?: ModelUserConnection | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type Officer = {\n  __typename: \"Officer\";\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3Object = {\n  __typename: \"S3Object\";\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelRoomConnection = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<Room | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Room = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: Company;\n  tasks?: ModelTaskConnection | null;\n  users?: ModelRoomGroupConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskConnection = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<Task | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Task = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: Room;\n  description?: string | null;\n  iconTask?: S3Object | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: User;\n  messages?: ModelMessageConnection | null;\n  users?: ModelTaskGroupConnection | null;\n  updatedAt: string;\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3Object | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: Company;\n  messages?: ModelMessageConnection | null;\n  room?: ModelRoomGroupConnection | null;\n  task?: ModelTaskGroupConnection | null;\n  chargeTask?: ModelTaskConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelMessageConnection = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<Message | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Message = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<S3Object | null> | null;\n  author: User;\n  task: Task;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ModelRoomGroupConnection = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<RoomGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type RoomGroup = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: Room | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskGroupConnection = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<TaskGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskGroup = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: Task | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelUserConnection = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<User | null> | null;\n  nextToken?: string | null;\n};\n\nexport type UpdateCompanyInput = {\n  id: string;\n  name?: string | null;\n  officer?: Array<OfficerInput | null> | null;\n  isRegistered?: boolean | null;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type DeleteCompanyInput = {\n  id: string;\n};\n\nexport type CreateTaskGroupInput = {\n  id?: string | null;\n  taskID: string;\n  userID: string;\n};\n\nexport type ModelTaskGroupConditionInput = {\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupConditionInput | null> | null;\n  or?: Array<ModelTaskGroupConditionInput | null> | null;\n  not?: ModelTaskGroupConditionInput | null;\n};\n\nexport type ModelIDInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport type UpdateTaskGroupInput = {\n  id: string;\n  taskID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteTaskGroupInput = {\n  id: string;\n};\n\nexport type CreateTaskInput = {\n  id?: string | null;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type ModelTaskConditionInput = {\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskConditionInput | null> | null;\n  or?: Array<ModelTaskConditionInput | null> | null;\n  not?: ModelTaskConditionInput | null;\n};\n\nexport type ModelIntInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type UpdateTaskInput = {\n  id: string;\n  authorID?: string | null;\n  roomID?: string | null;\n  chargePersonID?: string | null;\n  title?: string | null;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type DeleteTaskInput = {\n  id: string;\n};\n\nexport type CreateUserInput = {\n  id?: string | null;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type ModelUserConditionInput = {\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserConditionInput | null> | null;\n  or?: Array<ModelUserConditionInput | null> | null;\n  not?: ModelUserConditionInput | null;\n};\n\nexport type UpdateUserInput = {\n  id: string;\n  username?: string | null;\n  email?: string | null;\n  companyID?: string | null;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type DeleteUserInput = {\n  id: string;\n};\n\nexport type CreateRoomGroupInput = {\n  id?: string | null;\n  roomID: string;\n  userID: string;\n};\n\nexport type ModelRoomGroupConditionInput = {\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupConditionInput | null> | null;\n  or?: Array<ModelRoomGroupConditionInput | null> | null;\n  not?: ModelRoomGroupConditionInput | null;\n};\n\nexport type UpdateRoomGroupInput = {\n  id: string;\n  roomID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteRoomGroupInput = {\n  id: string;\n};\n\nexport type CreateRoomInput = {\n  id?: string | null;\n  name: string;\n  companyID: string;\n  description: string;\n};\n\nexport type ModelRoomConditionInput = {\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomConditionInput | null> | null;\n  or?: Array<ModelRoomConditionInput | null> | null;\n  not?: ModelRoomConditionInput | null;\n};\n\nexport type UpdateRoomInput = {\n  id: string;\n  name?: string | null;\n  companyID?: string | null;\n  description?: string | null;\n};\n\nexport type DeleteRoomInput = {\n  id: string;\n};\n\nexport type CreateMessageInput = {\n  id?: string | null;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type ModelMessageConditionInput = {\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageConditionInput | null> | null;\n  or?: Array<ModelMessageConditionInput | null> | null;\n  not?: ModelMessageConditionInput | null;\n};\n\nexport type UpdateMessageInput = {\n  id: string;\n  taskID?: string | null;\n  authorID?: string | null;\n  content?: string | null;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type DeleteMessageInput = {\n  id: string;\n};\n\nexport type ModelCompanyFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyFilterInput | null> | null;\n  or?: Array<ModelCompanyFilterInput | null> | null;\n  not?: ModelCompanyFilterInput | null;\n};\n\nexport type ModelCompanyConnection = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<Company | null> | null;\n  nextToken?: string | null;\n};\n\nexport type ModelTaskGroupFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupFilterInput | null> | null;\n  or?: Array<ModelTaskGroupFilterInput | null> | null;\n  not?: ModelTaskGroupFilterInput | null;\n};\n\nexport type ModelTaskFilterInput = {\n  id?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskFilterInput | null> | null;\n  or?: Array<ModelTaskFilterInput | null> | null;\n  not?: ModelTaskFilterInput | null;\n};\n\nexport type ModelUserFilterInput = {\n  id?: ModelIDInput | null;\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserFilterInput | null> | null;\n  or?: Array<ModelUserFilterInput | null> | null;\n  not?: ModelUserFilterInput | null;\n};\n\nexport type ModelRoomGroupFilterInput = {\n  id?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupFilterInput | null> | null;\n  or?: Array<ModelRoomGroupFilterInput | null> | null;\n  not?: ModelRoomGroupFilterInput | null;\n};\n\nexport type ModelRoomFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomFilterInput | null> | null;\n  or?: Array<ModelRoomFilterInput | null> | null;\n  not?: ModelRoomFilterInput | null;\n};\n\nexport type ModelMessageFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageFilterInput | null> | null;\n  or?: Array<ModelMessageFilterInput | null> | null;\n  not?: ModelMessageFilterInput | null;\n};\n\nexport type ModelStringKeyConditionInput = {\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n};\n\nexport enum ModelSortDirection {\n  ASC = \"ASC\",\n  DESC = \"DESC\"\n}\n\nexport type CreateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type CreateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type UpdateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type DeleteTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type CreateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type GetCompanyQuery = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListCompanysQuery = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<{\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskGroupQuery = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListTaskGroupsQuery = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<{\n    __typename: \"TaskGroup\";\n    id: string;\n    taskID: string;\n    userID: string;\n    task?: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskQuery = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type ListTasksQuery = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<{\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetUserQuery = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListUsersQuery = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<{\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomGroupQuery = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomGroupsQuery = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<{\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomQuery = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomsQuery = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<{\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetMessageQuery = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListMessagesQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskByCreatedAtQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type OnCreateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnCreateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnCreateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class APIService {\n  async CreateCompany(\n    input: CreateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<CreateCompanyMutation> {\n    const statement = `mutation CreateCompany($input: CreateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        createCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateCompanyMutation>response.data.createCompany;\n  }\n  async UpdateCompany(\n    input: UpdateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<UpdateCompanyMutation> {\n    const statement = `mutation UpdateCompany($input: UpdateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        updateCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateCompanyMutation>response.data.updateCompany;\n  }\n  async DeleteCompany(\n    input: DeleteCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<DeleteCompanyMutation> {\n    const statement = `mutation DeleteCompany($input: DeleteCompanyInput!, $condition: ModelCompanyConditionInput) {\n        deleteCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteCompanyMutation>response.data.deleteCompany;\n  }\n  async CreateTaskGroup(\n    input: CreateTaskGroupInput,\n    condition?: ModelTaskGroupConditionInput\n  ): Promise<CreateTaskGroupMutation> {\n    const statement = `mutation CreateTaskGroup($input: CreateTaskGroupInput!, $condition: ModelTaskGroupConditionInput) {\n        createTaskGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskGroupMutation>response.data.createTaskGroup;\n  }\n  async UpdateTaskGroup(\n    input: UpdateTaskGroupInput,\n    condition?: ModelTaskGroupConditionInput\n  ): Promise<UpdateTaskGroupMutation> {\n    const statement = `mutation UpdateTaskGroup($input: UpdateTaskGroupInput!, $condition: ModelTaskGroupConditionInput) {\n        updateTaskGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskGroupMutation>response.data.updateTaskGroup;\n  }\n  async DeleteTaskGroup(\n    input: DeleteTaskGroupInput,\n    condition?: ModelTaskGroupConditionInput\n  ): Promise<DeleteTaskGroupMutation> {\n    const statement = `mutation DeleteTaskGroup($input: DeleteTaskGroupInput!, $condition: ModelTaskGroupConditionInput) {\n        deleteTaskGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskGroupMutation>response.data.deleteTaskGroup;\n  }\n  async CreateTask(\n    input: CreateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<CreateTaskMutation> {\n    const statement = `mutation CreateTask($input: CreateTaskInput!, $condition: ModelTaskConditionInput) {\n        createTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskMutation>response.data.createTask;\n  }\n  async UpdateTask(\n    input: UpdateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<UpdateTaskMutation> {\n    const statement = `mutation UpdateTask($input: UpdateTaskInput!, $condition: ModelTaskConditionInput) {\n        updateTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskMutation>response.data.updateTask;\n  }\n  async DeleteTask(\n    input: DeleteTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<DeleteTaskMutation> {\n    const statement = `mutation DeleteTask($input: DeleteTaskInput!, $condition: ModelTaskConditionInput) {\n        deleteTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskMutation>response.data.deleteTask;\n  }\n  async CreateUser(\n    input: CreateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<CreateUserMutation> {\n    const statement = `mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n        createUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateUserMutation>response.data.createUser;\n  }\n  async UpdateUser(\n    input: UpdateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<UpdateUserMutation> {\n    const statement = `mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n        updateUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateUserMutation>response.data.updateUser;\n  }\n  async DeleteUser(\n    input: DeleteUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<DeleteUserMutation> {\n    const statement = `mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n        deleteUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteUserMutation>response.data.deleteUser;\n  }\n  async CreateRoomGroup(\n    input: CreateRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<CreateRoomGroupMutation> {\n    const statement = `mutation CreateRoomGroup($input: CreateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        createRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomGroupMutation>response.data.createRoomGroup;\n  }\n  async UpdateRoomGroup(\n    input: UpdateRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<UpdateRoomGroupMutation> {\n    const statement = `mutation UpdateRoomGroup($input: UpdateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        updateRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomGroupMutation>response.data.updateRoomGroup;\n  }\n  async DeleteRoomGroup(\n    input: DeleteRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<DeleteRoomGroupMutation> {\n    const statement = `mutation DeleteRoomGroup($input: DeleteRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        deleteRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomGroupMutation>response.data.deleteRoomGroup;\n  }\n  async CreateRoom(\n    input: CreateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomMutation> {\n    const statement = `mutation CreateRoom($input: CreateRoomInput!, $condition: ModelRoomConditionInput) {\n        createRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomMutation>response.data.createRoom;\n  }\n  async UpdateRoom(\n    input: UpdateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<UpdateRoomMutation> {\n    const statement = `mutation UpdateRoom($input: UpdateRoomInput!, $condition: ModelRoomConditionInput) {\n        updateRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomMutation>response.data.updateRoom;\n  }\n  async DeleteRoom(\n    input: DeleteRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<DeleteRoomMutation> {\n    const statement = `mutation DeleteRoom($input: DeleteRoomInput!, $condition: ModelRoomConditionInput) {\n        deleteRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomMutation>response.data.deleteRoom;\n  }\n  async CreateMessage(\n    input: CreateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<CreateMessageMutation> {\n    const statement = `mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n        createMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateMessageMutation>response.data.createMessage;\n  }\n  async UpdateMessage(\n    input: UpdateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<UpdateMessageMutation> {\n    const statement = `mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n        updateMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateMessageMutation>response.data.updateMessage;\n  }\n  async DeleteMessage(\n    input: DeleteMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<DeleteMessageMutation> {\n    const statement = `mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n        deleteMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteMessageMutation>response.data.deleteMessage;\n  }\n  async GetCompany(id: string): Promise<GetCompanyQuery> {\n    const statement = `query GetCompany($id: ID!) {\n        getCompany(id: $id) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetCompanyQuery>response.data.getCompany;\n  }\n  async ListCompanys(\n    filter?: ModelCompanyFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListCompanysQuery> {\n    const statement = `query ListCompanys($filter: ModelCompanyFilterInput, $limit: Int, $nextToken: String) {\n        listCompanys(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListCompanysQuery>response.data.listCompanys;\n  }\n  async GetTaskGroup(id: string): Promise<GetTaskGroupQuery> {\n    const statement = `query GetTaskGroup($id: ID!) {\n        getTaskGroup(id: $id) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskGroupQuery>response.data.getTaskGroup;\n  }\n  async ListTaskGroups(\n    filter?: ModelTaskGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTaskGroupsQuery> {\n    const statement = `query ListTaskGroups($filter: ModelTaskGroupFilterInput, $limit: Int, $nextToken: String) {\n        listTaskGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            user {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTaskGroupsQuery>response.data.listTaskGroups;\n  }\n  async GetTask(id: string): Promise<GetTaskQuery> {\n    const statement = `query GetTask($id: ID!) {\n        getTask(id: $id) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskQuery>response.data.getTask;\n  }\n  async ListTasks(\n    filter?: ModelTaskFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTasksQuery> {\n    const statement = `query ListTasks($filter: ModelTaskFilterInput, $limit: Int, $nextToken: String) {\n        listTasks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTasksQuery>response.data.listTasks;\n  }\n  async GetUser(id: string): Promise<GetUserQuery> {\n    const statement = `query GetUser($id: ID!) {\n        getUser(id: $id) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetUserQuery>response.data.getUser;\n  }\n  async ListUsers(\n    filter?: ModelUserFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListUsersQuery> {\n    const statement = `query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n        listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListUsersQuery>response.data.listUsers;\n  }\n  async GetRoomGroup(id: string): Promise<GetRoomGroupQuery> {\n    const statement = `query GetRoomGroup($id: ID!) {\n        getRoomGroup(id: $id) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomGroupQuery>response.data.getRoomGroup;\n  }\n  async ListRoomGroups(\n    filter?: ModelRoomGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomGroupsQuery> {\n    const statement = `query ListRoomGroups($filter: ModelRoomGroupFilterInput, $limit: Int, $nextToken: String) {\n        listRoomGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            user {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomGroupsQuery>response.data.listRoomGroups;\n  }\n  async GetRoom(id: string): Promise<GetRoomQuery> {\n    const statement = `query GetRoom($id: ID!) {\n        getRoom(id: $id) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomQuery>response.data.getRoom;\n  }\n  async ListRooms(\n    filter?: ModelRoomFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomsQuery> {\n    const statement = `query ListRooms($filter: ModelRoomFilterInput, $limit: Int, $nextToken: String) {\n        listRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomsQuery>response.data.listRooms;\n  }\n  async GetMessage(id: string): Promise<GetMessageQuery> {\n    const statement = `query GetMessage($id: ID!) {\n        getMessage(id: $id) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetMessageQuery>response.data.getMessage;\n  }\n  async ListMessages(\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListMessagesQuery> {\n    const statement = `query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            attachment {\n              __typename\n              bucket\n              region\n              key\n            }\n            author {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListMessagesQuery>response.data.listMessages;\n  }\n  async TaskByCreatedAt(\n    taskID?: string,\n    createdAt?: ModelStringKeyConditionInput,\n    sortDirection?: ModelSortDirection,\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<TaskByCreatedAtQuery> {\n    const statement = `query TaskByCreatedAt($taskID: ID, $createdAt: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        taskByCreatedAt(taskID: $taskID, createdAt: $createdAt, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            attachment {\n              __typename\n              bucket\n              region\n              key\n            }\n            author {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (taskID) {\n      gqlAPIServiceArguments.taskID = taskID;\n    }\n    if (createdAt) {\n      gqlAPIServiceArguments.createdAt = createdAt;\n    }\n    if (sortDirection) {\n      gqlAPIServiceArguments.sortDirection = sortDirection;\n    }\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <TaskByCreatedAtQuery>response.data.taskByCreatedAt;\n  }\n  OnCreateCompanyListener: Observable<\n    SubscriptionResponse<OnCreateCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateCompanySubscription>>;\n\n  OnUpdateCompanyListener: Observable<\n    SubscriptionResponse<OnUpdateCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateCompanySubscription>>;\n\n  OnDeleteCompanyListener: Observable<\n    SubscriptionResponse<OnDeleteCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteCompanySubscription>>;\n\n  OnCreateTaskGroupListener: Observable<\n    SubscriptionResponse<OnCreateTaskGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTaskGroup {\n        onCreateTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskGroupSubscription>>;\n\n  OnUpdateTaskGroupListener: Observable<\n    SubscriptionResponse<OnUpdateTaskGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTaskGroup {\n        onUpdateTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateTaskGroupSubscription>>;\n\n  OnDeleteTaskGroupListener: Observable<\n    SubscriptionResponse<OnDeleteTaskGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTaskGroup {\n        onDeleteTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskGroupSubscription>>;\n\n  OnCreateTaskListener: Observable<\n    SubscriptionResponse<OnCreateTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskSubscription>>;\n\n  OnUpdateTaskListener: Observable<\n    SubscriptionResponse<OnUpdateTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateTaskSubscription>>;\n\n  OnDeleteTaskListener: Observable<\n    SubscriptionResponse<OnDeleteTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskSubscription>>;\n\n  OnCreateUserListener: Observable<\n    SubscriptionResponse<OnCreateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateUserSubscription>>;\n\n  OnUpdateUserListener: Observable<\n    SubscriptionResponse<OnUpdateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateUserSubscription>>;\n\n  OnDeleteUserListener: Observable<\n    SubscriptionResponse<OnDeleteUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteUserSubscription>>;\n\n  OnCreateRoomGroupListener: Observable<\n    SubscriptionResponse<OnCreateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoomGroup {\n        onCreateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>;\n\n  OnUpdateRoomGroupListener: Observable<\n    SubscriptionResponse<OnUpdateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoomGroup {\n        onUpdateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>;\n\n  OnDeleteRoomGroupListener: Observable<\n    SubscriptionResponse<OnDeleteRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoomGroup {\n        onDeleteRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>;\n\n  OnCreateRoomListener: Observable<\n    SubscriptionResponse<OnCreateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomSubscription>>;\n\n  OnUpdateRoomListener: Observable<\n    SubscriptionResponse<OnUpdateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomSubscription>>;\n\n  OnDeleteRoomListener: Observable<\n    SubscriptionResponse<OnDeleteRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomSubscription>>;\n\n  OnCreateMessageListener: Observable<\n    SubscriptionResponse<OnCreateMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateMessageSubscription>>;\n\n  OnUpdateMessageListener: Observable<\n    SubscriptionResponse<OnUpdateMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateMessageSubscription>>;\n\n  OnDeleteMessageListener: Observable<\n    SubscriptionResponse<OnDeleteMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteMessageSubscription>>;\n}\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphQLResult<T>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SubscriptionResponse",
            "id": "interface-SubscriptionResponse-60d6d933ba4f3b6cf6ced80f0a72abca-1",
            "file": "src/app/shared/service/amplify.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { GraphQLResult } from \"@aws-amplify/api/lib/types\";\nimport { Observable } from \"zen-observable-ts\";\n\nexport interface SubscriptionResponse<T> {\n  value: GraphQLResult<T>;\n}\n\nexport type CreateCompanyInput = {\n  id?: string | null;\n  name: string;\n  officer: Array<OfficerInput | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type OfficerInput = {\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3ObjectInput = {\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelCompanyConditionInput = {\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyConditionInput | null> | null;\n  or?: Array<ModelCompanyConditionInput | null> | null;\n  not?: ModelCompanyConditionInput | null;\n};\n\nexport type ModelStringInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport enum ModelAttributeTypes {\n  binary = \"binary\",\n  binarySet = \"binarySet\",\n  bool = \"bool\",\n  list = \"list\",\n  map = \"map\",\n  number = \"number\",\n  numberSet = \"numberSet\",\n  string = \"string\",\n  stringSet = \"stringSet\",\n  _null = \"_null\"\n}\n\nexport type ModelSizeInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n};\n\nexport type ModelBooleanInput = {\n  ne?: boolean | null;\n  eq?: boolean | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type Company = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<Officer | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3Object | null;\n  billing?: boolean | null;\n  room?: ModelRoomConnection | null;\n  companyMembers?: ModelUserConnection | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type Officer = {\n  __typename: \"Officer\";\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3Object = {\n  __typename: \"S3Object\";\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelRoomConnection = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<Room | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Room = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: Company;\n  tasks?: ModelTaskConnection | null;\n  users?: ModelRoomGroupConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskConnection = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<Task | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Task = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: Room;\n  description?: string | null;\n  iconTask?: S3Object | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: User;\n  messages?: ModelMessageConnection | null;\n  users?: ModelTaskGroupConnection | null;\n  updatedAt: string;\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3Object | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: Company;\n  messages?: ModelMessageConnection | null;\n  room?: ModelRoomGroupConnection | null;\n  task?: ModelTaskGroupConnection | null;\n  chargeTask?: ModelTaskConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelMessageConnection = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<Message | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Message = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<S3Object | null> | null;\n  author: User;\n  task: Task;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ModelRoomGroupConnection = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<RoomGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type RoomGroup = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: Room | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskGroupConnection = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<TaskGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskGroup = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: Task | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelUserConnection = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<User | null> | null;\n  nextToken?: string | null;\n};\n\nexport type UpdateCompanyInput = {\n  id: string;\n  name?: string | null;\n  officer?: Array<OfficerInput | null> | null;\n  isRegistered?: boolean | null;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type DeleteCompanyInput = {\n  id: string;\n};\n\nexport type CreateTaskGroupInput = {\n  id?: string | null;\n  taskID: string;\n  userID: string;\n};\n\nexport type ModelTaskGroupConditionInput = {\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupConditionInput | null> | null;\n  or?: Array<ModelTaskGroupConditionInput | null> | null;\n  not?: ModelTaskGroupConditionInput | null;\n};\n\nexport type ModelIDInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport type UpdateTaskGroupInput = {\n  id: string;\n  taskID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteTaskGroupInput = {\n  id: string;\n};\n\nexport type CreateTaskInput = {\n  id?: string | null;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type ModelTaskConditionInput = {\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskConditionInput | null> | null;\n  or?: Array<ModelTaskConditionInput | null> | null;\n  not?: ModelTaskConditionInput | null;\n};\n\nexport type ModelIntInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type UpdateTaskInput = {\n  id: string;\n  authorID?: string | null;\n  roomID?: string | null;\n  chargePersonID?: string | null;\n  title?: string | null;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type DeleteTaskInput = {\n  id: string;\n};\n\nexport type CreateUserInput = {\n  id?: string | null;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type ModelUserConditionInput = {\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserConditionInput | null> | null;\n  or?: Array<ModelUserConditionInput | null> | null;\n  not?: ModelUserConditionInput | null;\n};\n\nexport type UpdateUserInput = {\n  id: string;\n  username?: string | null;\n  email?: string | null;\n  companyID?: string | null;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type DeleteUserInput = {\n  id: string;\n};\n\nexport type CreateRoomGroupInput = {\n  id?: string | null;\n  roomID: string;\n  userID: string;\n};\n\nexport type ModelRoomGroupConditionInput = {\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupConditionInput | null> | null;\n  or?: Array<ModelRoomGroupConditionInput | null> | null;\n  not?: ModelRoomGroupConditionInput | null;\n};\n\nexport type UpdateRoomGroupInput = {\n  id: string;\n  roomID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteRoomGroupInput = {\n  id: string;\n};\n\nexport type CreateRoomInput = {\n  id?: string | null;\n  name: string;\n  companyID: string;\n  description: string;\n};\n\nexport type ModelRoomConditionInput = {\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomConditionInput | null> | null;\n  or?: Array<ModelRoomConditionInput | null> | null;\n  not?: ModelRoomConditionInput | null;\n};\n\nexport type UpdateRoomInput = {\n  id: string;\n  name?: string | null;\n  companyID?: string | null;\n  description?: string | null;\n};\n\nexport type DeleteRoomInput = {\n  id: string;\n};\n\nexport type CreateMessageInput = {\n  id?: string | null;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type ModelMessageConditionInput = {\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageConditionInput | null> | null;\n  or?: Array<ModelMessageConditionInput | null> | null;\n  not?: ModelMessageConditionInput | null;\n};\n\nexport type UpdateMessageInput = {\n  id: string;\n  taskID?: string | null;\n  authorID?: string | null;\n  content?: string | null;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type DeleteMessageInput = {\n  id: string;\n};\n\nexport type ModelCompanyFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyFilterInput | null> | null;\n  or?: Array<ModelCompanyFilterInput | null> | null;\n  not?: ModelCompanyFilterInput | null;\n};\n\nexport type ModelCompanyConnection = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<Company | null> | null;\n  nextToken?: string | null;\n};\n\nexport type ModelTaskGroupFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupFilterInput | null> | null;\n  or?: Array<ModelTaskGroupFilterInput | null> | null;\n  not?: ModelTaskGroupFilterInput | null;\n};\n\nexport type ModelTaskFilterInput = {\n  id?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskFilterInput | null> | null;\n  or?: Array<ModelTaskFilterInput | null> | null;\n  not?: ModelTaskFilterInput | null;\n};\n\nexport type ModelUserFilterInput = {\n  id?: ModelIDInput | null;\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserFilterInput | null> | null;\n  or?: Array<ModelUserFilterInput | null> | null;\n  not?: ModelUserFilterInput | null;\n};\n\nexport type ModelRoomGroupFilterInput = {\n  id?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupFilterInput | null> | null;\n  or?: Array<ModelRoomGroupFilterInput | null> | null;\n  not?: ModelRoomGroupFilterInput | null;\n};\n\nexport type ModelRoomFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomFilterInput | null> | null;\n  or?: Array<ModelRoomFilterInput | null> | null;\n  not?: ModelRoomFilterInput | null;\n};\n\nexport type ModelMessageFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageFilterInput | null> | null;\n  or?: Array<ModelMessageFilterInput | null> | null;\n  not?: ModelMessageFilterInput | null;\n};\n\nexport type ModelStringKeyConditionInput = {\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n};\n\nexport enum ModelSortDirection {\n  ASC = \"ASC\",\n  DESC = \"DESC\"\n}\n\nexport type CreateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type CreateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type UpdateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type DeleteTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type CreateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type GetCompanyQuery = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListCompanysQuery = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<{\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskGroupQuery = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListTaskGroupsQuery = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<{\n    __typename: \"TaskGroup\";\n    id: string;\n    taskID: string;\n    userID: string;\n    task?: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskQuery = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type ListTasksQuery = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<{\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetUserQuery = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListUsersQuery = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<{\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomGroupQuery = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomGroupsQuery = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<{\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomQuery = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomsQuery = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<{\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetMessageQuery = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListMessagesQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskByCreatedAtQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type OnCreateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnCreateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnCreateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AmplifyService {\n  async CreateCompany(\n    input: CreateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<CreateCompanyMutation> {\n    const statement = `mutation CreateCompany($input: CreateCompanyInput!, $condition: ModelCompanyConditionInput) {\n      createCompany(input: $input, condition: $condition) {\n        __typename\n        id\n        name\n        officer {\n          __typename\n          officerEmail\n          officerName\n        }\n        isRegistered\n        otp\n        tel\n        officialEmail\n        iconCompany {\n          __typename\n          bucket\n          region\n          key\n        }\n        billing\n        room {\n          __typename\n          items {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        companyMembers {\n          __typename\n          items {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n        owner\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateCompanyMutation>response.data.createCompany;\n  }\n  async UpdateCompany(\n    input: UpdateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<UpdateCompanyMutation> {\n    const statement = `mutation UpdateCompany($input: UpdateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        updateCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateCompanyMutation>response.data.updateCompany;\n  }\n  async DeleteCompany(\n    input: DeleteCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<DeleteCompanyMutation> {\n    const statement = `mutation DeleteCompany($input: DeleteCompanyInput!, $condition: ModelCompanyConditionInput) {\n        deleteCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officerEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteCompanyMutation>response.data.deleteCompany;\n  }\n  async CreateRoom(\n    input: CreateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomMutation> {\n    const statement = `mutation CreateRoom($input: CreateRoomInput!, $condition: ModelRoomConditionInput) {\n        createRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomMutation>response.data.createRoom;\n  }\n  async UpdateRoom(\n    input: UpdateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<UpdateRoomMutation> {\n    const statement = `mutation UpdateRoom($input: UpdateRoomInput!, $condition: ModelRoomConditionInput) {\n      updateRoom(input: $input, condition: $condition) {\n        __typename\n        id\n        name\n        companyID\n        description\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        tasks {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomMutation>response.data.updateRoom;\n  }\n  async DeleteRoom(\n    input: DeleteRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<DeleteRoomMutation> {\n    const statement = `mutation DeleteRoom($input: DeleteRoomInput!, $condition: ModelRoomConditionInput) {\n        deleteRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomMutation>response.data.deleteRoom;\n  }\n  async CreateTask(\n    input: CreateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<CreateTaskMutation> {\n    const statement = `mutation CreateTask($input: CreateTaskInput!, $condition: ModelTaskConditionInput) {\n      createTask(input: $input, condition: $condition) {\n        __typename\n        id\n        authorID\n        roomID\n        chargePersonID\n        title\n        room {\n          __typename\n          id\n          name\n          companyID\n          description\n          tasks {\n            __typename\n            nextToken\n          }\n          users {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        description\n        scheduleDate\n        priority\n        status\n        createdAt\n        chargePerson {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          messages {\n            __typename\n            nextToken\n          }\n          room {\n            __typename\n            nextToken\n          }\n          task {\n            __typename\n            nextToken\n          }\n          chargeTask {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n          }\n          nextToken\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskMutation>response.data.createTask;\n  }\n  async UpdateTask(\n    input: UpdateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<UpdateTaskMutation> {\n    const statement = `mutation UpdateTask($input: UpdateTaskInput!, $condition: ModelTaskConditionInput) {\n        updateTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskMutation>response.data.updateTask;\n  }\n  async DeleteTask(\n    input: DeleteTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<DeleteTaskMutation> {\n    const statement = `mutation DeleteTask($input: DeleteTaskInput!, $condition: ModelTaskConditionInput) {\n        deleteTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskMutation>response.data.deleteTask;\n  }\n  async CreateMessage(\n    input: CreateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<CreateMessageMutation> {\n    const statement = `mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n      createMessage(input: $input, condition: $condition) {\n        __typename\n        id\n        taskID\n        authorID\n        content\n        createdAt\n        isSent\n        attachment {\n          __typename\n          bucket\n          region\n          key\n        }\n        author {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            isRegistered\n            otp\n            tel\n            officialEmail\n            billing\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            nextToken\n          }\n          room {\n            __typename\n            nextToken\n          }\n          task {\n            __typename\n            nextToken\n          }\n          chargeTask {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        task {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            nextToken\n          }\n          users {\n            __typename\n            nextToken\n          }\n          updatedAt\n        }\n        updatedAt\n        owner\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateMessageMutation>response.data.createMessage;\n  }\n  async UpdateMessage(\n    input: UpdateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<UpdateMessageMutation> {\n    const statement = `mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n        updateMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateMessageMutation>response.data.updateMessage;\n  }\n  async DeleteMessage(\n    input: DeleteMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<DeleteMessageMutation> {\n    const statement = `mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n        deleteMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteMessageMutation>response.data.deleteMessage;\n  }\n  async CreateUser(\n    input: CreateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<CreateUserMutation> {\n    const statement = `mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n      createUser(input: $input, condition: $condition) {\n        __typename\n        id\n        username\n        email\n        companyID\n        tel\n        positionName\n        iconImage {\n          __typename\n          bucket\n          region\n          key\n        }\n        registered\n        authority\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n        room {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        task {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        chargeTask {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateUserMutation>response.data.createUser;\n  }\n  async UpdateUser(\n    input: UpdateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<UpdateUserMutation> {\n    const statement = `mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n      updateUser(input: $input, condition: $condition) {\n        __typename\n        id\n        username\n        email\n        companyID\n        tel\n        positionName\n        iconImage {\n          __typename\n          bucket\n          region\n          key\n        }\n        registered\n        authority\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n        room {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        task {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        chargeTask {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateUserMutation>response.data.updateUser;\n  }\n  async DeleteUser(\n    input: DeleteUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<DeleteUserMutation> {\n    const statement = `mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n        deleteUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteUserMutation>response.data.deleteUser;\n  }\n  async GetCompany(id: string): Promise<GetCompanyQuery> {\n    const statement = `query GetCompany($id: ID!) {\n      getCompany(id: $id) {\n        __typename\n        id\n        name\n        officer {\n          __typename\n          officerEmail\n          officerName\n        }\n        isRegistered\n        otp\n        tel\n        officialEmail\n        iconCompany {\n          __typename\n          bucket\n          region\n          key\n        }\n        billing\n        room {\n          __typename\n          items {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        companyMembers {\n          __typename\n          items {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n        owner\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetCompanyQuery>response.data.getCompany;\n  }\n  async ListCompanys(\n    filter?: ModelCompanyFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListCompanysQuery> {\n    const statement = `query ListCompanys($filter: ModelCompanyFilterInput, $limit: Int, $nextToken: String) {\n        listCompanys(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListCompanysQuery>response.data.listCompanys;\n  }\n\n  async GetRoom(id: string): Promise<GetRoomQuery> {\n    const statement = `query GetRoom($id: ID!) {\n        getRoom(id: $id) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomQuery>response.data.getRoom;\n  }\n  async ListRooms(\n    filter?: ModelRoomFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomsQuery> {\n    const statement = `query ListRooms($filter: ModelRoomFilterInput, $limit: Int, $nextToken: String) {\n        listRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            companyID\n            name\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomsQuery>response.data.listRooms;\n  }\n  async GetTask(id: string): Promise<GetTaskQuery> {\n    const statement = `query GetTask($id: ID!) {\n        getTask(id: $id) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskQuery>response.data.getTask;\n  }\n  async ListTasks(\n    filter?: ModelTaskFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTasksQuery> {\n    const statement = `query ListTasks($filter: ModelTaskFilterInput, $limit: Int, $nextToken: String) {\n        listTasks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTasksQuery>response.data.listTasks;\n  }\n\n  async GetMessage(id: string): Promise<GetMessageQuery> {\n    const statement = `query GetMessage($id: ID!) {\n        getMessage(id: $id) {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            createdAt\n            updatedAt\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetMessageQuery>response.data.getMessage;\n  }\n  async ListMessages(\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListMessagesQuery> {\n    const statement = `query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            attachmentUri\n            author {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              iconImage\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListMessagesQuery>response.data.listMessages;\n  }\n\n  async TaskByCreatedAt(\n    taskID?: string,\n    sortDirection?: ModelSortDirection,\n    limit?: number,\n    createdAt?: ModelStringKeyConditionInput,\n    filter?: ModelMessageFilterInput,\n    nextToken?: string\n  ): Promise<TaskByCreatedAtQuery> {\n    const statement = `query TaskByCreatedAt($taskID: ID, $createdAt: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n      taskByCreatedAt(taskID: $taskID, createdAt: $createdAt, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (taskID) {\n      gqlAPIServiceArguments.taskID = taskID;\n    }\n    if (createdAt) {\n      gqlAPIServiceArguments.createdAt = createdAt;\n    }\n    if (sortDirection) {\n      gqlAPIServiceArguments.sortDirection = sortDirection;\n    }\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <TaskByCreatedAtQuery>response.data.taskByCreatedAt;\n  }\n\n  async GetUser(id: string): Promise<GetUserQuery> {\n    const statement = `query GetUser($id: ID!) {\n      getUser(id: $id) {\n        __typename\n        id\n        username\n        email\n        companyID\n        tel\n        positionName\n        iconImage {\n          __typename\n          bucket\n          region\n          key\n        }\n        registered\n        authority\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n        room {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        task {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        chargeTask {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetUserQuery>response.data.getUser;\n  }\n  async ListUsers(\n    filter?: ModelUserFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListUsersQuery> {\n    const statement = `query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n      listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            isRegistered\n            otp\n            tel\n            officialEmail\n            billing\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            nextToken\n          }\n          room {\n            __typename\n            nextToken\n          }\n          task {\n            __typename\n            nextToken\n          }\n          chargeTask {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListUsersQuery>response.data.listUsers;\n  }\n\n  async GetRoomGroup(id: string): Promise<GetRoomGroupQuery> {\n    const statement = `query GetRoomGroup($id: ID!) {\n        getRoomGroup(id: $id) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomGroupQuery>response.data.getRoomGroup;\n  }\n\n  OnCreateCompanyListener: Observable<\n    SubscriptionResponse<OnCreateCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              iconImage\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateCompanySubscription>>;\n\n  OnUpdateCompanyListener: Observable<\n    OnUpdateCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateCompanySubscription>;\n\n  OnDeleteCompanyListener: Observable<\n    OnDeleteCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteCompanySubscription>;\n\n  OnCreateRoomListener: Observable<\n    SubscriptionResponse<OnCreateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomSubscription>>;\n\n  OnUpdateRoomListener: Observable<\n    SubscriptionResponse<OnUpdateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomSubscription>>;\n\n  OnDeleteRoomListener: Observable<\n    SubscriptionResponse<OnDeleteRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomSubscription>>;\n\n  OnCreateTaskListener: Observable<\n    SubscriptionResponse<OnCreateTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskSubscription>>;\n\n  OnUpdateTaskListener: Observable<OnUpdateTaskSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateTaskSubscription>;\n\n  OnDeleteTaskListener: Observable<\n    SubscriptionResponse<OnDeleteTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskSubscription>>;\n\n  OnCreateMessageListener: Observable<\n    SubscriptionResponse<OnCreateMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateMessageSubscription>>;\n\n  OnUpdateMessageListener: Observable<\n    OnUpdateMessageSubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateMessageSubscription>;\n\n  OnDeleteMessageListener: Observable<\n    OnDeleteMessageSubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteMessageSubscription>;\n\n  OnCreateUserListener: Observable<\n    SubscriptionResponse<OnCreateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateUserSubscription>>;\n\n  OnUpdateUserListener: Observable<\n    SubscriptionResponse<OnUpdateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateUserSubscription>>;\n\n  OnDeleteUserListener: Observable<\n    SubscriptionResponse<OnDeleteUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteUserSubscription>>;\n\n  OnCreateRoomGroupListener: Observable<\n    SubscriptionResponse<OnCreateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoomGroup {\n        onCreateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>;\n\n  OnUpdateRoomGroupListener: Observable<\n    SubscriptionResponse<OnUpdateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoomGroup {\n        onUpdateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>;\n\n  OnDeleteRoomGroupListener: Observable<\n    SubscriptionResponse<OnDeleteRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoomGroup {\n        onDeleteRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>;\n\n\n  async CreateRoomGroup(\n    input: CreateRoomGroupInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomGroupMutation> {\n    const statement = `mutation CreateRoomGroup($input: CreateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        createRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomGroupMutation>response.data.createRoomGroup;\n  }\n\n  async ListRoomGroups(\n    filter?: ModelRoomGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomGroupsQuery> {\n    const statement = `query ListRoomGroups($filter: ModelRoomGroupFilterInput, $limit: Int, $nextToken: String) {\n      listRoomGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomGroupsQuery>response.data.listRoomGroups;\n  }\n  async ListTaskGroups(\n    filter?: ModelTaskGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTaskGroupsQuery> {\n    const statement = `query ListTaskGroups($filter: ModelTaskGroupFilterInput, $limit: Int, $nextToken: String) {\n      listTaskGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTaskGroupsQuery>response.data.listTaskGroups;\n  }\n  async UpdateRoomGroup(\n    input: UpdateRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<UpdateRoomGroupMutation> {\n    const statement = `mutation UpdateRoomGroup($input: UpdateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        updateRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomGroupMutation>response.data.updateRoomGroup;\n  }\n  async DeleteRoomGroup(\n    input: DeleteRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<DeleteRoomGroupMutation> {\n    const statement = `mutation DeleteRoomGroup($input: DeleteRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        deleteRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomGroupMutation>response.data.deleteRoomGroup;\n  }\n}\n\n\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphQLResult<T>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SubscriptionResponse-1"
        },
        {
            "name": "TaskByCreatedAtItems",
            "id": "interface-TaskByCreatedAtItems-719f26f913f9b71b8b8cc4e3f5a0c96f",
            "file": "src/app/pages/task-detail/models/task-detail.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from 'src/app/shared/service/amplify.service';\n\nexport interface IMessageAttachment {\n    bucket: string;\n    key: string;\n    region: string;\n}\n\nexport interface IsMessageContent {\n    data: {\n        hasTaskKind: {\n            chargePerson: boolean;\n            description: boolean;\n            name: boolean;\n            scheduleDate: boolean;\n        },\n        taskValue: {\n            chargePersonId: string;\n            descriptionItem: string;\n            nameItem: string;\n            scheduleDateItem: string;\n        }\n    },\n    role: undefined;\n}\n\nexport interface MessageContent {\n    id: string,\n    taskID: string,\n    authorID: string,\n    content: string,\n}\n\nexport interface IImageFile {\n    key: string,\n}\n\nexport interface IS3Object {\n    key: string,\n    bucket: string,\n    region: string,\n}\n\nexport interface IMessageWithAttachUrl extends Message {\n    authorIconWithUrl?: string;\n    attachmentWithUrl?: Array<string>;\n}\n\nexport interface CurrentUser {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n        __typename: \"Company\";\n        id: string;\n        name: string;\n        isRegistered: boolean;\n        otp?: string | null;\n        tel?: string | null;\n        officialEmail?: string | null;\n        billing?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n        owner?: string | null;\n    };\n    messages?: {\n        __typename: \"ModelMessageConnection\";\n        nextToken?: string | null;\n    } | null;\n    room?: {\n        __typename: \"ModelRoomGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    task?: {\n        __typename: \"ModelTaskGroupConnection\";\n        nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n        __typename: \"ModelTaskConnection\";\n        nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n};\n\n\nexport interface TaskByCreatedAtItems {\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n        __typename: \"S3Object\";\n        bucket: string;\n        region: string;\n        key: string;\n    } | null> | null;\n    author: {\n        __typename: \"User\";\n        id: string;\n        username?: string | null;\n        email: string;\n        companyID: string;\n        tel?: string | null;\n        positionName?: string | null;\n        registered?: boolean | null;\n        authority?: boolean | null;\n        createdAt: string;\n        updatedAt: string;\n    };\n    task: {\n        __typename: \"Task\";\n        id: string;\n        authorID: string;\n        roomID: string;\n        chargePersonID: string;\n        title: string;\n        description?: string | null;\n        scheduleDate?: string | null;\n        priority?: number | null;\n        status?: number | null;\n        createdAt?: string | null;\n        updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n    authorIconWithUrl?: string | null;\n}",
            "properties": [
                {
                    "name": "__typename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "attachment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type | null> | null",
                    "optional": true,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "author",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "authorIconWithUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "authorID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "isSent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "taskID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 140
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TaskFormModel",
            "id": "interface-TaskFormModel-5853ed4e10fc7bd954357c6883edef6a",
            "file": "src/app/shared/model/task-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TaskFormModel {\n    nameItem: string;\n    descriptionItem: string;\n    chargePersonId: string;\n    scheduleDateItem: string;\n}\n\nexport interface IArgsEntrySignup {\n    username: string;\n    password: string;\n    attributes: {\n        name: string;\n        email: string;\n    }\n}\n",
            "properties": [
                {
                    "name": "chargePersonId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "descriptionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nameItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "scheduleDateItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AmplifyService",
            "id": "injectable-AmplifyService-60d6d933ba4f3b6cf6ced80f0a72abca",
            "file": "src/app/shared/service/amplify.service.ts",
            "properties": [
                {
                    "name": "OnCreateCompanyListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              iconImage\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateCompanySubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateCompanySubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 7834
                },
                {
                    "name": "OnCreateMessageListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateMessageSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateMessageSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 8612
                },
                {
                    "name": "OnCreateRoomGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoomGroup {\n        onCreateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9235
                },
                {
                    "name": "OnCreateRoomListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateRoomSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 7972
                },
                {
                    "name": "OnCreateTaskListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateTaskSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 8212
                },
                {
                    "name": "OnCreateUserListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateUserSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateUserSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 8884
                },
                {
                    "name": "OnDeleteCompanyListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteCompanySubscription>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<OnDeleteCompanySubscription>",
                    "optional": false,
                    "description": "",
                    "line": 7927
                },
                {
                    "name": "OnDeleteMessageListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteMessageSubscription>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<OnDeleteMessageSubscription>",
                    "optional": false,
                    "description": "",
                    "line": 8810
                },
                {
                    "name": "OnDeleteRoomGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoomGroup {\n        onDeleteRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9425
                },
                {
                    "name": "OnDeleteRoomListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteRoomSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 8132
                },
                {
                    "name": "OnDeleteTaskListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteTaskSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 8478
                },
                {
                    "name": "OnDeleteUserListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteUserSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteUserSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9118
                },
                {
                    "name": "OnUpdateCompanyListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateCompanySubscription>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<OnUpdateCompanySubscription>",
                    "optional": false,
                    "description": "",
                    "line": 7882
                },
                {
                    "name": "OnUpdateMessageListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateMessageSubscription>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<OnUpdateMessageSubscription>",
                    "optional": false,
                    "description": "",
                    "line": 8736
                },
                {
                    "name": "OnUpdateRoomGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoomGroup {\n        onUpdateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9330
                },
                {
                    "name": "OnUpdateRoomListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateRoomSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 8052
                },
                {
                    "name": "OnUpdateTaskListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateTaskSubscription>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<OnUpdateTaskSubscription>",
                    "optional": false,
                    "description": "",
                    "line": 8346
                },
                {
                    "name": "OnUpdateUserListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateUserSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateUserSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9001
                }
            ],
            "methods": [
                {
                    "name": "CreateCompany",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateCompanyMutation>",
                    "typeParameters": [],
                    "line": 5658,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateMessage",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateMessageMutation>",
                    "typeParameters": [],
                    "line": 6251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateRoom",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateRoomMutation>",
                    "typeParameters": [],
                    "line": 5863,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateRoomGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 9521,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateTaskMutation>",
                    "typeParameters": [],
                    "line": 6003,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateUser",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 6607,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteCompany",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteCompanyMutation>",
                    "typeParameters": [],
                    "line": 5800,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteMessage",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteMessageMutation>",
                    "typeParameters": [],
                    "line": 6495,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteRoom",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteRoomMutation>",
                    "typeParameters": [],
                    "line": 5977,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteRoomGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 9776,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteTaskMutation>",
                    "typeParameters": [],
                    "line": 6221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteUser",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteUserMutation>",
                    "typeParameters": [],
                    "line": 6857,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetCompany",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetCompanyQuery>",
                    "typeParameters": [],
                    "line": 6983,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetMessage",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetMessageQuery>",
                    "typeParameters": [],
                    "line": 7329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetRoom",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetRoomQuery>",
                    "typeParameters": [],
                    "line": 7106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetRoomGroup",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetRoomGroupQuery>",
                    "typeParameters": [],
                    "line": 7746,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetTaskQuery>",
                    "typeParameters": [],
                    "line": 7161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetUserQuery>",
                    "typeParameters": [],
                    "line": 7552,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListCompanys",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelCompanyFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListCompanysQuery>",
                    "typeParameters": [],
                    "line": 7048,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelCompanyFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListMessages",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListMessagesQuery>",
                    "typeParameters": [],
                    "line": 7403,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListRoomGroups",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 9556,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListRooms",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelRoomFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListRoomsQuery>",
                    "typeParameters": [],
                    "line": 7126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelRoomFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListTaskGroups",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelTaskGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListTaskGroupsQuery>",
                    "typeParameters": [],
                    "line": 9612,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelTaskGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListTasks",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelTaskFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListTasksQuery>",
                    "typeParameters": [],
                    "line": 7258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelTaskFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListUsers",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelUserFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 7671,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelUserFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TaskByCreatedAt",
                    "args": [
                        {
                            "name": "taskID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sortDirection",
                            "type": "ModelSortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "createdAt",
                            "type": "ModelStringKeyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskByCreatedAtQuery>",
                    "typeParameters": [],
                    "line": 7469,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDirection",
                            "type": "ModelSortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createdAt",
                            "type": "ModelStringKeyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateCompany",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateCompanyMutation>",
                    "typeParameters": [],
                    "line": 5729,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateMessage",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateMessageMutation>",
                    "typeParameters": [],
                    "line": 6383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateRoom",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateRoomMutation>",
                    "typeParameters": [],
                    "line": 5889,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateRoomGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 9673,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 6112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateUser",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateUserMutation>",
                    "typeParameters": [],
                    "line": 6732,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { GraphQLResult } from \"@aws-amplify/api/lib/types\";\nimport { Observable } from \"zen-observable-ts\";\n\nexport interface SubscriptionResponse<T> {\n  value: GraphQLResult<T>;\n}\n\nexport type CreateCompanyInput = {\n  id?: string | null;\n  name: string;\n  officer: Array<OfficerInput | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type OfficerInput = {\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3ObjectInput = {\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelCompanyConditionInput = {\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyConditionInput | null> | null;\n  or?: Array<ModelCompanyConditionInput | null> | null;\n  not?: ModelCompanyConditionInput | null;\n};\n\nexport type ModelStringInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport enum ModelAttributeTypes {\n  binary = \"binary\",\n  binarySet = \"binarySet\",\n  bool = \"bool\",\n  list = \"list\",\n  map = \"map\",\n  number = \"number\",\n  numberSet = \"numberSet\",\n  string = \"string\",\n  stringSet = \"stringSet\",\n  _null = \"_null\"\n}\n\nexport type ModelSizeInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n};\n\nexport type ModelBooleanInput = {\n  ne?: boolean | null;\n  eq?: boolean | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type Company = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<Officer | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3Object | null;\n  billing?: boolean | null;\n  room?: ModelRoomConnection | null;\n  companyMembers?: ModelUserConnection | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type Officer = {\n  __typename: \"Officer\";\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3Object = {\n  __typename: \"S3Object\";\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelRoomConnection = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<Room | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Room = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: Company;\n  tasks?: ModelTaskConnection | null;\n  users?: ModelRoomGroupConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskConnection = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<Task | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Task = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: Room;\n  description?: string | null;\n  iconTask?: S3Object | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: User;\n  messages?: ModelMessageConnection | null;\n  users?: ModelTaskGroupConnection | null;\n  updatedAt: string;\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3Object | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: Company;\n  messages?: ModelMessageConnection | null;\n  room?: ModelRoomGroupConnection | null;\n  task?: ModelTaskGroupConnection | null;\n  chargeTask?: ModelTaskConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelMessageConnection = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<Message | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Message = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<S3Object | null> | null;\n  author: User;\n  task: Task;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ModelRoomGroupConnection = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<RoomGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type RoomGroup = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: Room | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskGroupConnection = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<TaskGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskGroup = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: Task | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelUserConnection = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<User | null> | null;\n  nextToken?: string | null;\n};\n\nexport type UpdateCompanyInput = {\n  id: string;\n  name?: string | null;\n  officer?: Array<OfficerInput | null> | null;\n  isRegistered?: boolean | null;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type DeleteCompanyInput = {\n  id: string;\n};\n\nexport type CreateTaskGroupInput = {\n  id?: string | null;\n  taskID: string;\n  userID: string;\n};\n\nexport type ModelTaskGroupConditionInput = {\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupConditionInput | null> | null;\n  or?: Array<ModelTaskGroupConditionInput | null> | null;\n  not?: ModelTaskGroupConditionInput | null;\n};\n\nexport type ModelIDInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport type UpdateTaskGroupInput = {\n  id: string;\n  taskID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteTaskGroupInput = {\n  id: string;\n};\n\nexport type CreateTaskInput = {\n  id?: string | null;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type ModelTaskConditionInput = {\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskConditionInput | null> | null;\n  or?: Array<ModelTaskConditionInput | null> | null;\n  not?: ModelTaskConditionInput | null;\n};\n\nexport type ModelIntInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type UpdateTaskInput = {\n  id: string;\n  authorID?: string | null;\n  roomID?: string | null;\n  chargePersonID?: string | null;\n  title?: string | null;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type DeleteTaskInput = {\n  id: string;\n};\n\nexport type CreateUserInput = {\n  id?: string | null;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type ModelUserConditionInput = {\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserConditionInput | null> | null;\n  or?: Array<ModelUserConditionInput | null> | null;\n  not?: ModelUserConditionInput | null;\n};\n\nexport type UpdateUserInput = {\n  id: string;\n  username?: string | null;\n  email?: string | null;\n  companyID?: string | null;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type DeleteUserInput = {\n  id: string;\n};\n\nexport type CreateRoomGroupInput = {\n  id?: string | null;\n  roomID: string;\n  userID: string;\n};\n\nexport type ModelRoomGroupConditionInput = {\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupConditionInput | null> | null;\n  or?: Array<ModelRoomGroupConditionInput | null> | null;\n  not?: ModelRoomGroupConditionInput | null;\n};\n\nexport type UpdateRoomGroupInput = {\n  id: string;\n  roomID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteRoomGroupInput = {\n  id: string;\n};\n\nexport type CreateRoomInput = {\n  id?: string | null;\n  name: string;\n  companyID: string;\n  description: string;\n};\n\nexport type ModelRoomConditionInput = {\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomConditionInput | null> | null;\n  or?: Array<ModelRoomConditionInput | null> | null;\n  not?: ModelRoomConditionInput | null;\n};\n\nexport type UpdateRoomInput = {\n  id: string;\n  name?: string | null;\n  companyID?: string | null;\n  description?: string | null;\n};\n\nexport type DeleteRoomInput = {\n  id: string;\n};\n\nexport type CreateMessageInput = {\n  id?: string | null;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type ModelMessageConditionInput = {\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageConditionInput | null> | null;\n  or?: Array<ModelMessageConditionInput | null> | null;\n  not?: ModelMessageConditionInput | null;\n};\n\nexport type UpdateMessageInput = {\n  id: string;\n  taskID?: string | null;\n  authorID?: string | null;\n  content?: string | null;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type DeleteMessageInput = {\n  id: string;\n};\n\nexport type ModelCompanyFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyFilterInput | null> | null;\n  or?: Array<ModelCompanyFilterInput | null> | null;\n  not?: ModelCompanyFilterInput | null;\n};\n\nexport type ModelCompanyConnection = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<Company | null> | null;\n  nextToken?: string | null;\n};\n\nexport type ModelTaskGroupFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupFilterInput | null> | null;\n  or?: Array<ModelTaskGroupFilterInput | null> | null;\n  not?: ModelTaskGroupFilterInput | null;\n};\n\nexport type ModelTaskFilterInput = {\n  id?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskFilterInput | null> | null;\n  or?: Array<ModelTaskFilterInput | null> | null;\n  not?: ModelTaskFilterInput | null;\n};\n\nexport type ModelUserFilterInput = {\n  id?: ModelIDInput | null;\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserFilterInput | null> | null;\n  or?: Array<ModelUserFilterInput | null> | null;\n  not?: ModelUserFilterInput | null;\n};\n\nexport type ModelRoomGroupFilterInput = {\n  id?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupFilterInput | null> | null;\n  or?: Array<ModelRoomGroupFilterInput | null> | null;\n  not?: ModelRoomGroupFilterInput | null;\n};\n\nexport type ModelRoomFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomFilterInput | null> | null;\n  or?: Array<ModelRoomFilterInput | null> | null;\n  not?: ModelRoomFilterInput | null;\n};\n\nexport type ModelMessageFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageFilterInput | null> | null;\n  or?: Array<ModelMessageFilterInput | null> | null;\n  not?: ModelMessageFilterInput | null;\n};\n\nexport type ModelStringKeyConditionInput = {\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n};\n\nexport enum ModelSortDirection {\n  ASC = \"ASC\",\n  DESC = \"DESC\"\n}\n\nexport type CreateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type CreateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type UpdateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type DeleteTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type CreateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type GetCompanyQuery = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListCompanysQuery = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<{\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskGroupQuery = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListTaskGroupsQuery = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<{\n    __typename: \"TaskGroup\";\n    id: string;\n    taskID: string;\n    userID: string;\n    task?: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskQuery = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type ListTasksQuery = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<{\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetUserQuery = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListUsersQuery = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<{\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomGroupQuery = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomGroupsQuery = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<{\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomQuery = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomsQuery = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<{\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetMessageQuery = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListMessagesQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskByCreatedAtQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type OnCreateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnCreateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnCreateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AmplifyService {\n  async CreateCompany(\n    input: CreateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<CreateCompanyMutation> {\n    const statement = `mutation CreateCompany($input: CreateCompanyInput!, $condition: ModelCompanyConditionInput) {\n      createCompany(input: $input, condition: $condition) {\n        __typename\n        id\n        name\n        officer {\n          __typename\n          officerEmail\n          officerName\n        }\n        isRegistered\n        otp\n        tel\n        officialEmail\n        iconCompany {\n          __typename\n          bucket\n          region\n          key\n        }\n        billing\n        room {\n          __typename\n          items {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        companyMembers {\n          __typename\n          items {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n        owner\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateCompanyMutation>response.data.createCompany;\n  }\n  async UpdateCompany(\n    input: UpdateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<UpdateCompanyMutation> {\n    const statement = `mutation UpdateCompany($input: UpdateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        updateCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateCompanyMutation>response.data.updateCompany;\n  }\n  async DeleteCompany(\n    input: DeleteCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<DeleteCompanyMutation> {\n    const statement = `mutation DeleteCompany($input: DeleteCompanyInput!, $condition: ModelCompanyConditionInput) {\n        deleteCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officerEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteCompanyMutation>response.data.deleteCompany;\n  }\n  async CreateRoom(\n    input: CreateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomMutation> {\n    const statement = `mutation CreateRoom($input: CreateRoomInput!, $condition: ModelRoomConditionInput) {\n        createRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomMutation>response.data.createRoom;\n  }\n  async UpdateRoom(\n    input: UpdateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<UpdateRoomMutation> {\n    const statement = `mutation UpdateRoom($input: UpdateRoomInput!, $condition: ModelRoomConditionInput) {\n      updateRoom(input: $input, condition: $condition) {\n        __typename\n        id\n        name\n        companyID\n        description\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        tasks {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomMutation>response.data.updateRoom;\n  }\n  async DeleteRoom(\n    input: DeleteRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<DeleteRoomMutation> {\n    const statement = `mutation DeleteRoom($input: DeleteRoomInput!, $condition: ModelRoomConditionInput) {\n        deleteRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomMutation>response.data.deleteRoom;\n  }\n  async CreateTask(\n    input: CreateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<CreateTaskMutation> {\n    const statement = `mutation CreateTask($input: CreateTaskInput!, $condition: ModelTaskConditionInput) {\n      createTask(input: $input, condition: $condition) {\n        __typename\n        id\n        authorID\n        roomID\n        chargePersonID\n        title\n        room {\n          __typename\n          id\n          name\n          companyID\n          description\n          tasks {\n            __typename\n            nextToken\n          }\n          users {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        description\n        scheduleDate\n        priority\n        status\n        createdAt\n        chargePerson {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          messages {\n            __typename\n            nextToken\n          }\n          room {\n            __typename\n            nextToken\n          }\n          task {\n            __typename\n            nextToken\n          }\n          chargeTask {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n          }\n          nextToken\n        }\n        users {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskMutation>response.data.createTask;\n  }\n  async UpdateTask(\n    input: UpdateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<UpdateTaskMutation> {\n    const statement = `mutation UpdateTask($input: UpdateTaskInput!, $condition: ModelTaskConditionInput) {\n        updateTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskMutation>response.data.updateTask;\n  }\n  async DeleteTask(\n    input: DeleteTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<DeleteTaskMutation> {\n    const statement = `mutation DeleteTask($input: DeleteTaskInput!, $condition: ModelTaskConditionInput) {\n        deleteTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          title\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskMutation>response.data.deleteTask;\n  }\n  async CreateMessage(\n    input: CreateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<CreateMessageMutation> {\n    const statement = `mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n      createMessage(input: $input, condition: $condition) {\n        __typename\n        id\n        taskID\n        authorID\n        content\n        createdAt\n        isSent\n        attachment {\n          __typename\n          bucket\n          region\n          key\n        }\n        author {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            isRegistered\n            otp\n            tel\n            officialEmail\n            billing\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            nextToken\n          }\n          room {\n            __typename\n            nextToken\n          }\n          task {\n            __typename\n            nextToken\n          }\n          chargeTask {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        task {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            nextToken\n          }\n          users {\n            __typename\n            nextToken\n          }\n          updatedAt\n        }\n        updatedAt\n        owner\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateMessageMutation>response.data.createMessage;\n  }\n  async UpdateMessage(\n    input: UpdateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<UpdateMessageMutation> {\n    const statement = `mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n        updateMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateMessageMutation>response.data.updateMessage;\n  }\n  async DeleteMessage(\n    input: DeleteMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<DeleteMessageMutation> {\n    const statement = `mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n        deleteMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteMessageMutation>response.data.deleteMessage;\n  }\n  async CreateUser(\n    input: CreateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<CreateUserMutation> {\n    const statement = `mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n      createUser(input: $input, condition: $condition) {\n        __typename\n        id\n        username\n        email\n        companyID\n        tel\n        positionName\n        iconImage {\n          __typename\n          bucket\n          region\n          key\n        }\n        registered\n        authority\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n        room {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        task {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        chargeTask {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateUserMutation>response.data.createUser;\n  }\n  async UpdateUser(\n    input: UpdateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<UpdateUserMutation> {\n    const statement = `mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n      updateUser(input: $input, condition: $condition) {\n        __typename\n        id\n        username\n        email\n        companyID\n        tel\n        positionName\n        iconImage {\n          __typename\n          bucket\n          region\n          key\n        }\n        registered\n        authority\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n        room {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        task {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        chargeTask {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateUserMutation>response.data.updateUser;\n  }\n  async DeleteUser(\n    input: DeleteUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<DeleteUserMutation> {\n    const statement = `mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n        deleteUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteUserMutation>response.data.deleteUser;\n  }\n  async GetCompany(id: string): Promise<GetCompanyQuery> {\n    const statement = `query GetCompany($id: ID!) {\n      getCompany(id: $id) {\n        __typename\n        id\n        name\n        officer {\n          __typename\n          officerEmail\n          officerName\n        }\n        isRegistered\n        otp\n        tel\n        officialEmail\n        iconCompany {\n          __typename\n          bucket\n          region\n          key\n        }\n        billing\n        room {\n          __typename\n          items {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        companyMembers {\n          __typename\n          items {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n        owner\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetCompanyQuery>response.data.getCompany;\n  }\n  async ListCompanys(\n    filter?: ModelCompanyFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListCompanysQuery> {\n    const statement = `query ListCompanys($filter: ModelCompanyFilterInput, $limit: Int, $nextToken: String) {\n        listCompanys(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListCompanysQuery>response.data.listCompanys;\n  }\n\n  async GetRoom(id: string): Promise<GetRoomQuery> {\n    const statement = `query GetRoom($id: ID!) {\n        getRoom(id: $id) {\n          __typename\n          id\n          companyID\n          name\n          description\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomQuery>response.data.getRoom;\n  }\n  async ListRooms(\n    filter?: ModelRoomFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomsQuery> {\n    const statement = `query ListRooms($filter: ModelRoomFilterInput, $limit: Int, $nextToken: String) {\n        listRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            companyID\n            name\n            description\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomsQuery>response.data.listRooms;\n  }\n  async GetTask(id: string): Promise<GetTaskQuery> {\n    const statement = `query GetTask($id: ID!) {\n        getTask(id: $id) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskQuery>response.data.getTask;\n  }\n  async ListTasks(\n    filter?: ModelTaskFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTasksQuery> {\n    const statement = `query ListTasks($filter: ModelTaskFilterInput, $limit: Int, $nextToken: String) {\n        listTasks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTasksQuery>response.data.listTasks;\n  }\n\n  async GetMessage(id: string): Promise<GetMessageQuery> {\n    const statement = `query GetMessage($id: ID!) {\n        getMessage(id: $id) {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            createdAt\n            updatedAt\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetMessageQuery>response.data.getMessage;\n  }\n  async ListMessages(\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListMessagesQuery> {\n    const statement = `query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            attachmentUri\n            author {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              iconImage\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListMessagesQuery>response.data.listMessages;\n  }\n\n  async TaskByCreatedAt(\n    taskID?: string,\n    sortDirection?: ModelSortDirection,\n    limit?: number,\n    createdAt?: ModelStringKeyConditionInput,\n    filter?: ModelMessageFilterInput,\n    nextToken?: string\n  ): Promise<TaskByCreatedAtQuery> {\n    const statement = `query TaskByCreatedAt($taskID: ID, $createdAt: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n      taskByCreatedAt(taskID: $taskID, createdAt: $createdAt, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (taskID) {\n      gqlAPIServiceArguments.taskID = taskID;\n    }\n    if (createdAt) {\n      gqlAPIServiceArguments.createdAt = createdAt;\n    }\n    if (sortDirection) {\n      gqlAPIServiceArguments.sortDirection = sortDirection;\n    }\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <TaskByCreatedAtQuery>response.data.taskByCreatedAt;\n  }\n\n  async GetUser(id: string): Promise<GetUserQuery> {\n    const statement = `query GetUser($id: ID!) {\n      getUser(id: $id) {\n        __typename\n        id\n        username\n        email\n        companyID\n        tel\n        positionName\n        iconImage {\n          __typename\n          bucket\n          region\n          key\n        }\n        registered\n        authority\n        company {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            nextToken\n          }\n          companyMembers {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n        messages {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n        room {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        task {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        chargeTask {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetUserQuery>response.data.getUser;\n  }\n  async ListUsers(\n    filter?: ModelUserFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListUsersQuery> {\n    const statement = `query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n      listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            isRegistered\n            otp\n            tel\n            officialEmail\n            billing\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            nextToken\n          }\n          room {\n            __typename\n            nextToken\n          }\n          task {\n            __typename\n            nextToken\n          }\n          chargeTask {\n            __typename\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListUsersQuery>response.data.listUsers;\n  }\n\n  async GetRoomGroup(id: string): Promise<GetRoomGroupQuery> {\n    const statement = `query GetRoomGroup($id: ID!) {\n        getRoomGroup(id: $id) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomGroupQuery>response.data.getRoomGroup;\n  }\n\n  OnCreateCompanyListener: Observable<\n    SubscriptionResponse<OnCreateCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              iconImage\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateCompanySubscription>>;\n\n  OnUpdateCompanyListener: Observable<\n    OnUpdateCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateCompanySubscription>;\n\n  OnDeleteCompanyListener: Observable<\n    OnDeleteCompanySubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          domain\n          room {\n            __typename\n            items {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          members {\n            __typename\n            items {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteCompanySubscription>;\n\n  OnCreateRoomListener: Observable<\n    SubscriptionResponse<OnCreateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomSubscription>>;\n\n  OnUpdateRoomListener: Observable<\n    SubscriptionResponse<OnUpdateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomSubscription>>;\n\n  OnDeleteRoomListener: Observable<\n    SubscriptionResponse<OnDeleteRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomSubscription>>;\n\n  OnCreateTaskListener: Observable<\n    SubscriptionResponse<OnCreateTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskSubscription>>;\n\n  OnUpdateTaskListener: Observable<OnUpdateTaskSubscription> = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateTaskSubscription>;\n\n  OnDeleteTaskListener: Observable<\n    SubscriptionResponse<OnDeleteTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskSubscription>>;\n\n  OnCreateMessageListener: Observable<\n    SubscriptionResponse<OnCreateMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateMessageSubscription>>;\n\n  OnUpdateMessageListener: Observable<\n    OnUpdateMessageSubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnUpdateMessageSubscription>;\n\n  OnDeleteMessageListener: Observable<\n    OnDeleteMessageSubscription\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          author {\n            __typename\n            id\n            email\n            companyID\n            username\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              domain\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          content\n          createdAt\n          isSent\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            members {\n              __typename\n              id\n              email\n              companyID\n              username\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            room {\n              __typename\n              id\n              companyID\n              name\n              description\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<OnDeleteMessageSubscription>;\n\n  OnCreateUserListener: Observable<\n    SubscriptionResponse<OnCreateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateUserSubscription>>;\n\n  OnUpdateUserListener: Observable<\n    SubscriptionResponse<OnUpdateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateUserSubscription>>;\n\n  OnDeleteUserListener: Observable<\n    SubscriptionResponse<OnDeleteUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteUserSubscription>>;\n\n  OnCreateRoomGroupListener: Observable<\n    SubscriptionResponse<OnCreateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoomGroup {\n        onCreateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>;\n\n  OnUpdateRoomGroupListener: Observable<\n    SubscriptionResponse<OnUpdateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoomGroup {\n        onUpdateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>;\n\n  OnDeleteRoomGroupListener: Observable<\n    SubscriptionResponse<OnDeleteRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoomGroup {\n        onDeleteRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>;\n\n\n  async CreateRoomGroup(\n    input: CreateRoomGroupInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomGroupMutation> {\n    const statement = `mutation CreateRoomGroup($input: CreateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        createRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomGroupMutation>response.data.createRoomGroup;\n  }\n\n  async ListRoomGroups(\n    filter?: ModelRoomGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomGroupsQuery> {\n    const statement = `query ListRoomGroups($filter: ModelRoomGroupFilterInput, $limit: Int, $nextToken: String) {\n      listRoomGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomGroupsQuery>response.data.listRoomGroups;\n  }\n  async ListTaskGroups(\n    filter?: ModelTaskGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTaskGroupsQuery> {\n    const statement = `query ListTaskGroups($filter: ModelTaskGroupFilterInput, $limit: Int, $nextToken: String) {\n      listTaskGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n        __typename\n        items {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            description\n            scheduleDate\n            priority\n            status\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            registered\n            authority\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n    }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTaskGroupsQuery>response.data.listTaskGroups;\n  }\n  async UpdateRoomGroup(\n    input: UpdateRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<UpdateRoomGroupMutation> {\n    const statement = `mutation UpdateRoomGroup($input: UpdateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        updateRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomGroupMutation>response.data.updateRoomGroup;\n  }\n  async DeleteRoomGroup(\n    input: DeleteRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<DeleteRoomGroupMutation> {\n    const statement = `mutation DeleteRoomGroup($input: DeleteRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        deleteRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomGroupMutation>response.data.deleteRoomGroup;\n  }\n}\n\n\n",
            "type": "injectable"
        },
        {
            "name": "APIService",
            "id": "injectable-APIService-32448683c7cc7626414e3cec9a3d2958",
            "file": "src/app/API.service.ts",
            "properties": [
                {
                    "name": "OnCreateCompanyListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateCompanySubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateCompanySubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9284
                },
                {
                    "name": "OnCreateMessageListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateMessageSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateMessageSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 11096
                },
                {
                    "name": "OnCreateRoomGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoomGroup {\n        onCreateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10571
                },
                {
                    "name": "OnCreateRoomListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateRoomSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10856
                },
                {
                    "name": "OnCreateTaskGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTaskGroup {\n        onCreateTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateTaskGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9473
                },
                {
                    "name": "OnCreateTaskListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateTaskSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9818
                },
                {
                    "name": "OnCreateUserListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateUserSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnCreateUserSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10220
                },
                {
                    "name": "OnDeleteCompanyListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteCompanySubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteCompanySubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9410
                },
                {
                    "name": "OnDeleteMessageListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteMessageSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteMessageSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 11344
                },
                {
                    "name": "OnDeleteRoomGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoomGroup {\n        onDeleteRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10761
                },
                {
                    "name": "OnDeleteRoomListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteRoomSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 11016
                },
                {
                    "name": "OnDeleteTaskGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTaskGroup {\n        onDeleteTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteTaskGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9703
                },
                {
                    "name": "OnDeleteTaskListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteTaskSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10086
                },
                {
                    "name": "OnDeleteUserListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteUserSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnDeleteUserSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10454
                },
                {
                    "name": "OnUpdateCompanyListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateCompanySubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateCompanySubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9347
                },
                {
                    "name": "OnUpdateMessageListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateMessageSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateMessageSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 11220
                },
                {
                    "name": "OnUpdateRoomGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoomGroup {\n        onUpdateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10666
                },
                {
                    "name": "OnUpdateRoomListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateRoomSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10936
                },
                {
                    "name": "OnUpdateTaskGroupListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTaskGroup {\n        onUpdateTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateTaskGroupSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateTaskGroupSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9588
                },
                {
                    "name": "OnUpdateTaskListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateTaskSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateTaskSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 9952
                },
                {
                    "name": "OnUpdateUserListener",
                    "defaultValue": "API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateUserSubscription>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SubscriptionResponse<OnUpdateUserSubscription>>",
                    "optional": false,
                    "description": "",
                    "line": 10337
                }
            ],
            "methods": [
                {
                    "name": "CreateCompany",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateCompanyMutation>",
                    "typeParameters": [],
                    "line": 5657,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateMessage",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateMessageMutation>",
                    "typeParameters": [],
                    "line": 7613,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateRoom",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateRoomMutation>",
                    "typeParameters": [],
                    "line": 7349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateRoomGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 7040,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateTaskMutation>",
                    "typeParameters": [],
                    "line": 6239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateTaskGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateTaskGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateTaskGroupMutation>",
                    "typeParameters": [],
                    "line": 5870,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateTaskGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CreateUser",
                    "args": [
                        {
                            "name": "input",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 6665,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteCompany",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteCompanyMutation>",
                    "typeParameters": [],
                    "line": 5799,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteMessage",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteMessageMutation>",
                    "typeParameters": [],
                    "line": 7877,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteRoom",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteRoomMutation>",
                    "typeParameters": [],
                    "line": 7525,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteRoomGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 7246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteTaskMutation>",
                    "typeParameters": [],
                    "line": 6523,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteTaskGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteTaskGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteTaskGroupMutation>",
                    "typeParameters": [],
                    "line": 6116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteTaskGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteUser",
                    "args": [
                        {
                            "name": "input",
                            "type": "DeleteUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DeleteUserMutation>",
                    "typeParameters": [],
                    "line": 6915,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "DeleteUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetCompany",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetCompanyQuery>",
                    "typeParameters": [],
                    "line": 8009,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetMessage",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetMessageQuery>",
                    "typeParameters": [],
                    "line": 9006,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetRoom",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetRoomQuery>",
                    "typeParameters": [],
                    "line": 8868,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetRoomGroup",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetRoomGroupQuery>",
                    "typeParameters": [],
                    "line": 8715,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetTaskQuery>",
                    "typeParameters": [],
                    "line": 8310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetTaskGroup",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetTaskGroupQuery>",
                    "typeParameters": [],
                    "line": 8132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<GetUserQuery>",
                    "typeParameters": [],
                    "line": 8522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListCompanys",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelCompanyFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListCompanysQuery>",
                    "typeParameters": [],
                    "line": 8074,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelCompanyFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListMessages",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListMessagesQuery>",
                    "typeParameters": [],
                    "line": 9132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListRoomGroups",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 8812,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListRooms",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelRoomFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListRoomsQuery>",
                    "typeParameters": [],
                    "line": 8950,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelRoomFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListTaskGroups",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelTaskGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListTaskGroupsQuery>",
                    "typeParameters": [],
                    "line": 8249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelTaskGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListTasks",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelTaskFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListTasksQuery>",
                    "typeParameters": [],
                    "line": 8446,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelTaskFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ListUsers",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ModelUserFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 8641,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ModelUserFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "TaskByCreatedAt",
                    "args": [
                        {
                            "name": "taskID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "createdAt",
                            "type": "ModelStringKeyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sortDirection",
                            "type": "ModelSortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TaskByCreatedAtQuery>",
                    "typeParameters": [],
                    "line": 9202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createdAt",
                            "type": "ModelStringKeyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDirection",
                            "type": "ModelSortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "ModelMessageFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateCompany",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateCompanyMutation>",
                    "typeParameters": [],
                    "line": 5728,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelCompanyConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateMessage",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateMessageMutation>",
                    "typeParameters": [],
                    "line": 7745,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelMessageConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateRoom",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateRoomMutation>",
                    "typeParameters": [],
                    "line": 7437,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateRoomGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 7143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateRoomGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelRoomGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateTask",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 6381,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateTaskInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateTaskGroup",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateTaskGroupInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateTaskGroupMutation>",
                    "typeParameters": [],
                    "line": 5993,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateTaskGroupInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelTaskGroupConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateUser",
                    "args": [
                        {
                            "name": "input",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<UpdateUserMutation>",
                    "typeParameters": [],
                    "line": 6790,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "condition",
                            "type": "ModelUserConditionInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport API, { graphqlOperation, GraphQLResult } from \"@aws-amplify/api-graphql\";\nimport { Observable } from \"zen-observable-ts\";\n\nexport interface SubscriptionResponse<T> {\n  value: GraphQLResult<T>;\n}\n\nexport type CreateCompanyInput = {\n  id?: string | null;\n  name: string;\n  officer: Array<OfficerInput | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type OfficerInput = {\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3ObjectInput = {\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelCompanyConditionInput = {\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyConditionInput | null> | null;\n  or?: Array<ModelCompanyConditionInput | null> | null;\n  not?: ModelCompanyConditionInput | null;\n};\n\nexport type ModelStringInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport enum ModelAttributeTypes {\n  binary = \"binary\",\n  binarySet = \"binarySet\",\n  bool = \"bool\",\n  list = \"list\",\n  map = \"map\",\n  number = \"number\",\n  numberSet = \"numberSet\",\n  string = \"string\",\n  stringSet = \"stringSet\",\n  _null = \"_null\"\n}\n\nexport type ModelSizeInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n};\n\nexport type ModelBooleanInput = {\n  ne?: boolean | null;\n  eq?: boolean | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type Company = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<Officer | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3Object | null;\n  billing?: boolean | null;\n  room?: ModelRoomConnection | null;\n  companyMembers?: ModelUserConnection | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type Officer = {\n  __typename: \"Officer\";\n  officerEmail: string;\n  officerName: string;\n};\n\nexport type S3Object = {\n  __typename: \"S3Object\";\n  bucket: string;\n  region: string;\n  key: string;\n};\n\nexport type ModelRoomConnection = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<Room | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Room = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: Company;\n  tasks?: ModelTaskConnection | null;\n  users?: ModelRoomGroupConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskConnection = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<Task | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Task = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: Room;\n  description?: string | null;\n  iconTask?: S3Object | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: User;\n  messages?: ModelMessageConnection | null;\n  users?: ModelTaskGroupConnection | null;\n  updatedAt: string;\n};\n\nexport type User = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3Object | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: Company;\n  messages?: ModelMessageConnection | null;\n  room?: ModelRoomGroupConnection | null;\n  task?: ModelTaskGroupConnection | null;\n  chargeTask?: ModelTaskConnection | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelMessageConnection = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<Message | null> | null;\n  nextToken?: string | null;\n};\n\nexport type Message = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<S3Object | null> | null;\n  author: User;\n  task: Task;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ModelRoomGroupConnection = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<RoomGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type RoomGroup = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: Room | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelTaskGroupConnection = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<TaskGroup | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskGroup = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: Task | null;\n  user?: User | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ModelUserConnection = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<User | null> | null;\n  nextToken?: string | null;\n};\n\nexport type UpdateCompanyInput = {\n  id: string;\n  name?: string | null;\n  officer?: Array<OfficerInput | null> | null;\n  isRegistered?: boolean | null;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: S3ObjectInput | null;\n  billing?: boolean | null;\n};\n\nexport type DeleteCompanyInput = {\n  id: string;\n};\n\nexport type CreateTaskGroupInput = {\n  id?: string | null;\n  taskID: string;\n  userID: string;\n};\n\nexport type ModelTaskGroupConditionInput = {\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupConditionInput | null> | null;\n  or?: Array<ModelTaskGroupConditionInput | null> | null;\n  not?: ModelTaskGroupConditionInput | null;\n};\n\nexport type ModelIDInput = {\n  ne?: string | null;\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  contains?: string | null;\n  notContains?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n  size?: ModelSizeInput | null;\n};\n\nexport type UpdateTaskGroupInput = {\n  id: string;\n  taskID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteTaskGroupInput = {\n  id: string;\n};\n\nexport type CreateTaskInput = {\n  id?: string | null;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type ModelTaskConditionInput = {\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskConditionInput | null> | null;\n  or?: Array<ModelTaskConditionInput | null> | null;\n  not?: ModelTaskConditionInput | null;\n};\n\nexport type ModelIntInput = {\n  ne?: number | null;\n  eq?: number | null;\n  le?: number | null;\n  lt?: number | null;\n  ge?: number | null;\n  gt?: number | null;\n  between?: Array<number | null> | null;\n  attributeExists?: boolean | null;\n  attributeType?: ModelAttributeTypes | null;\n};\n\nexport type UpdateTaskInput = {\n  id: string;\n  authorID?: string | null;\n  roomID?: string | null;\n  chargePersonID?: string | null;\n  title?: string | null;\n  description?: string | null;\n  iconTask?: S3ObjectInput | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n};\n\nexport type DeleteTaskInput = {\n  id: string;\n};\n\nexport type CreateUserInput = {\n  id?: string | null;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type ModelUserConditionInput = {\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserConditionInput | null> | null;\n  or?: Array<ModelUserConditionInput | null> | null;\n  not?: ModelUserConditionInput | null;\n};\n\nexport type UpdateUserInput = {\n  id: string;\n  username?: string | null;\n  email?: string | null;\n  companyID?: string | null;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: S3ObjectInput | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n};\n\nexport type DeleteUserInput = {\n  id: string;\n};\n\nexport type CreateRoomGroupInput = {\n  id?: string | null;\n  roomID: string;\n  userID: string;\n};\n\nexport type ModelRoomGroupConditionInput = {\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupConditionInput | null> | null;\n  or?: Array<ModelRoomGroupConditionInput | null> | null;\n  not?: ModelRoomGroupConditionInput | null;\n};\n\nexport type UpdateRoomGroupInput = {\n  id: string;\n  roomID?: string | null;\n  userID?: string | null;\n};\n\nexport type DeleteRoomGroupInput = {\n  id: string;\n};\n\nexport type CreateRoomInput = {\n  id?: string | null;\n  name: string;\n  companyID: string;\n  description: string;\n};\n\nexport type ModelRoomConditionInput = {\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomConditionInput | null> | null;\n  or?: Array<ModelRoomConditionInput | null> | null;\n  not?: ModelRoomConditionInput | null;\n};\n\nexport type UpdateRoomInput = {\n  id: string;\n  name?: string | null;\n  companyID?: string | null;\n  description?: string | null;\n};\n\nexport type DeleteRoomInput = {\n  id: string;\n};\n\nexport type CreateMessageInput = {\n  id?: string | null;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type ModelMessageConditionInput = {\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageConditionInput | null> | null;\n  or?: Array<ModelMessageConditionInput | null> | null;\n  not?: ModelMessageConditionInput | null;\n};\n\nexport type UpdateMessageInput = {\n  id: string;\n  taskID?: string | null;\n  authorID?: string | null;\n  content?: string | null;\n  createdAt?: string | null;\n  isSent?: boolean | null;\n  attachment?: Array<S3ObjectInput | null> | null;\n};\n\nexport type DeleteMessageInput = {\n  id: string;\n};\n\nexport type ModelCompanyFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  isRegistered?: ModelBooleanInput | null;\n  otp?: ModelStringInput | null;\n  tel?: ModelStringInput | null;\n  officialEmail?: ModelStringInput | null;\n  billing?: ModelBooleanInput | null;\n  and?: Array<ModelCompanyFilterInput | null> | null;\n  or?: Array<ModelCompanyFilterInput | null> | null;\n  not?: ModelCompanyFilterInput | null;\n};\n\nexport type ModelCompanyConnection = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<Company | null> | null;\n  nextToken?: string | null;\n};\n\nexport type ModelTaskGroupFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelTaskGroupFilterInput | null> | null;\n  or?: Array<ModelTaskGroupFilterInput | null> | null;\n  not?: ModelTaskGroupFilterInput | null;\n};\n\nexport type ModelTaskFilterInput = {\n  id?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  chargePersonID?: ModelIDInput | null;\n  title?: ModelStringInput | null;\n  description?: ModelStringInput | null;\n  scheduleDate?: ModelStringInput | null;\n  priority?: ModelIntInput | null;\n  status?: ModelIntInput | null;\n  createdAt?: ModelStringInput | null;\n  and?: Array<ModelTaskFilterInput | null> | null;\n  or?: Array<ModelTaskFilterInput | null> | null;\n  not?: ModelTaskFilterInput | null;\n};\n\nexport type ModelUserFilterInput = {\n  id?: ModelIDInput | null;\n  username?: ModelStringInput | null;\n  email?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  tel?: ModelStringInput | null;\n  positionName?: ModelStringInput | null;\n  registered?: ModelBooleanInput | null;\n  authority?: ModelBooleanInput | null;\n  and?: Array<ModelUserFilterInput | null> | null;\n  or?: Array<ModelUserFilterInput | null> | null;\n  not?: ModelUserFilterInput | null;\n};\n\nexport type ModelRoomGroupFilterInput = {\n  id?: ModelIDInput | null;\n  roomID?: ModelIDInput | null;\n  userID?: ModelIDInput | null;\n  and?: Array<ModelRoomGroupFilterInput | null> | null;\n  or?: Array<ModelRoomGroupFilterInput | null> | null;\n  not?: ModelRoomGroupFilterInput | null;\n};\n\nexport type ModelRoomFilterInput = {\n  id?: ModelIDInput | null;\n  name?: ModelStringInput | null;\n  companyID?: ModelIDInput | null;\n  description?: ModelStringInput | null;\n  and?: Array<ModelRoomFilterInput | null> | null;\n  or?: Array<ModelRoomFilterInput | null> | null;\n  not?: ModelRoomFilterInput | null;\n};\n\nexport type ModelMessageFilterInput = {\n  id?: ModelIDInput | null;\n  taskID?: ModelIDInput | null;\n  authorID?: ModelIDInput | null;\n  content?: ModelStringInput | null;\n  createdAt?: ModelStringInput | null;\n  isSent?: ModelBooleanInput | null;\n  and?: Array<ModelMessageFilterInput | null> | null;\n  or?: Array<ModelMessageFilterInput | null> | null;\n  not?: ModelMessageFilterInput | null;\n};\n\nexport type ModelStringKeyConditionInput = {\n  eq?: string | null;\n  le?: string | null;\n  lt?: string | null;\n  ge?: string | null;\n  gt?: string | null;\n  between?: Array<string | null> | null;\n  beginsWith?: string | null;\n};\n\nexport enum ModelSortDirection {\n  ASC = \"ASC\",\n  DESC = \"DESC\"\n}\n\nexport type CreateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteCompanyMutation = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type CreateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteTaskGroupMutation = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type UpdateTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type DeleteTaskMutation = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type CreateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteUserMutation = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomGroupMutation = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type UpdateRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type DeleteRoomMutation = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type CreateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type UpdateMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type DeleteMessageMutation = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type GetCompanyQuery = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListCompanysQuery = {\n  __typename: \"ModelCompanyConnection\";\n  items?: Array<{\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskGroupQuery = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListTaskGroupsQuery = {\n  __typename: \"ModelTaskGroupConnection\";\n  items?: Array<{\n    __typename: \"TaskGroup\";\n    id: string;\n    taskID: string;\n    userID: string;\n    task?: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetTaskQuery = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type ListTasksQuery = {\n  __typename: \"ModelTaskConnection\";\n  items?: Array<{\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetUserQuery = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListUsersQuery = {\n  __typename: \"ModelUserConnection\";\n  items?: Array<{\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomGroupQuery = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomGroupsQuery = {\n  __typename: \"ModelRoomGroupConnection\";\n  items?: Array<{\n    __typename: \"RoomGroup\";\n    id: string;\n    roomID: string;\n    userID: string;\n    room?: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    user?: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetRoomQuery = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type ListRoomsQuery = {\n  __typename: \"ModelRoomConnection\";\n  items?: Array<{\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type GetMessageQuery = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type ListMessagesQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type TaskByCreatedAtQuery = {\n  __typename: \"ModelMessageConnection\";\n  items?: Array<{\n    __typename: \"Message\";\n    id: string;\n    taskID: string;\n    authorID: string;\n    content: string;\n    createdAt: string;\n    isSent?: boolean | null;\n    attachment?: Array<{\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null> | null;\n    author: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    task: {\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    };\n    updatedAt: string;\n    owner?: string | null;\n  } | null> | null;\n  nextToken?: string | null;\n};\n\nexport type OnCreateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteCompanySubscription = {\n  __typename: \"Company\";\n  id: string;\n  name: string;\n  officer: Array<{\n    __typename: \"Officer\";\n    officerEmail: string;\n    officerName: string;\n  } | null>;\n  isRegistered: boolean;\n  otp?: string | null;\n  tel?: string | null;\n  officialEmail?: string | null;\n  iconCompany?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  billing?: boolean | null;\n  room?: {\n    __typename: \"ModelRoomConnection\";\n    items?: Array<{\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  companyMembers?: {\n    __typename: \"ModelUserConnection\";\n    items?: Array<{\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnCreateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskGroupSubscription = {\n  __typename: \"TaskGroup\";\n  id: string;\n  taskID: string;\n  userID: string;\n  task?: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnUpdateTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnDeleteTaskSubscription = {\n  __typename: \"Task\";\n  id: string;\n  authorID: string;\n  roomID: string;\n  chargePersonID: string;\n  title: string;\n  room: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  description?: string | null;\n  iconTask?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  scheduleDate?: string | null;\n  priority?: number | null;\n  status?: number | null;\n  createdAt?: string | null;\n  chargePerson: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  updatedAt: string;\n};\n\nexport type OnCreateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteUserSubscription = {\n  __typename: \"User\";\n  id: string;\n  username?: string | null;\n  email: string;\n  companyID: string;\n  tel?: string | null;\n  positionName?: string | null;\n  iconImage?: {\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null;\n  registered?: boolean | null;\n  authority?: boolean | null;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  messages?: {\n    __typename: \"ModelMessageConnection\";\n    items?: Array<{\n      __typename: \"Message\";\n      id: string;\n      taskID: string;\n      authorID: string;\n      content: string;\n      createdAt: string;\n      isSent?: boolean | null;\n      updatedAt: string;\n      owner?: string | null;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  room?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  task?: {\n    __typename: \"ModelTaskGroupConnection\";\n    items?: Array<{\n      __typename: \"TaskGroup\";\n      id: string;\n      taskID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  chargeTask?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomGroupSubscription = {\n  __typename: \"RoomGroup\";\n  id: string;\n  roomID: string;\n  userID: string;\n  room?: {\n    __typename: \"Room\";\n    id: string;\n    name: string;\n    companyID: string;\n    description: string;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    tasks?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  user?: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnUpdateRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnDeleteRoomSubscription = {\n  __typename: \"Room\";\n  id: string;\n  name: string;\n  companyID: string;\n  description: string;\n  company: {\n    __typename: \"Company\";\n    id: string;\n    name: string;\n    officer: Array<{\n      __typename: \"Officer\";\n      officerEmail: string;\n      officerName: string;\n    } | null>;\n    isRegistered: boolean;\n    otp?: string | null;\n    tel?: string | null;\n    officialEmail?: string | null;\n    iconCompany?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    billing?: boolean | null;\n    room?: {\n      __typename: \"ModelRoomConnection\";\n      nextToken?: string | null;\n    } | null;\n    companyMembers?: {\n      __typename: \"ModelUserConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n    owner?: string | null;\n  };\n  tasks?: {\n    __typename: \"ModelTaskConnection\";\n    items?: Array<{\n      __typename: \"Task\";\n      id: string;\n      authorID: string;\n      roomID: string;\n      chargePersonID: string;\n      title: string;\n      description?: string | null;\n      scheduleDate?: string | null;\n      priority?: number | null;\n      status?: number | null;\n      createdAt?: string | null;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  users?: {\n    __typename: \"ModelRoomGroupConnection\";\n    items?: Array<{\n      __typename: \"RoomGroup\";\n      id: string;\n      roomID: string;\n      userID: string;\n      createdAt: string;\n      updatedAt: string;\n    } | null> | null;\n    nextToken?: string | null;\n  } | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type OnCreateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnUpdateMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\nexport type OnDeleteMessageSubscription = {\n  __typename: \"Message\";\n  id: string;\n  taskID: string;\n  authorID: string;\n  content: string;\n  createdAt: string;\n  isSent?: boolean | null;\n  attachment?: Array<{\n    __typename: \"S3Object\";\n    bucket: string;\n    region: string;\n    key: string;\n  } | null> | null;\n  author: {\n    __typename: \"User\";\n    id: string;\n    username?: string | null;\n    email: string;\n    companyID: string;\n    tel?: string | null;\n    positionName?: string | null;\n    iconImage?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    registered?: boolean | null;\n    authority?: boolean | null;\n    company: {\n      __typename: \"Company\";\n      id: string;\n      name: string;\n      isRegistered: boolean;\n      otp?: string | null;\n      tel?: string | null;\n      officialEmail?: string | null;\n      billing?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n      owner?: string | null;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    room?: {\n      __typename: \"ModelRoomGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    task?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    chargeTask?: {\n      __typename: \"ModelTaskConnection\";\n      nextToken?: string | null;\n    } | null;\n    createdAt: string;\n    updatedAt: string;\n  };\n  task: {\n    __typename: \"Task\";\n    id: string;\n    authorID: string;\n    roomID: string;\n    chargePersonID: string;\n    title: string;\n    room: {\n      __typename: \"Room\";\n      id: string;\n      name: string;\n      companyID: string;\n      description: string;\n      createdAt: string;\n      updatedAt: string;\n    };\n    description?: string | null;\n    iconTask?: {\n      __typename: \"S3Object\";\n      bucket: string;\n      region: string;\n      key: string;\n    } | null;\n    scheduleDate?: string | null;\n    priority?: number | null;\n    status?: number | null;\n    createdAt?: string | null;\n    chargePerson: {\n      __typename: \"User\";\n      id: string;\n      username?: string | null;\n      email: string;\n      companyID: string;\n      tel?: string | null;\n      positionName?: string | null;\n      registered?: boolean | null;\n      authority?: boolean | null;\n      createdAt: string;\n      updatedAt: string;\n    };\n    messages?: {\n      __typename: \"ModelMessageConnection\";\n      nextToken?: string | null;\n    } | null;\n    users?: {\n      __typename: \"ModelTaskGroupConnection\";\n      nextToken?: string | null;\n    } | null;\n    updatedAt: string;\n  };\n  updatedAt: string;\n  owner?: string | null;\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class APIService {\n  async CreateCompany(\n    input: CreateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<CreateCompanyMutation> {\n    const statement = `mutation CreateCompany($input: CreateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        createCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateCompanyMutation>response.data.createCompany;\n  }\n  async UpdateCompany(\n    input: UpdateCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<UpdateCompanyMutation> {\n    const statement = `mutation UpdateCompany($input: UpdateCompanyInput!, $condition: ModelCompanyConditionInput) {\n        updateCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateCompanyMutation>response.data.updateCompany;\n  }\n  async DeleteCompany(\n    input: DeleteCompanyInput,\n    condition?: ModelCompanyConditionInput\n  ): Promise<DeleteCompanyMutation> {\n    const statement = `mutation DeleteCompany($input: DeleteCompanyInput!, $condition: ModelCompanyConditionInput) {\n        deleteCompany(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteCompanyMutation>response.data.deleteCompany;\n  }\n  async CreateTaskGroup(\n    input: CreateTaskGroupInput,\n    condition?: ModelTaskGroupConditionInput\n  ): Promise<CreateTaskGroupMutation> {\n    const statement = `mutation CreateTaskGroup($input: CreateTaskGroupInput!, $condition: ModelTaskGroupConditionInput) {\n        createTaskGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskGroupMutation>response.data.createTaskGroup;\n  }\n  async UpdateTaskGroup(\n    input: UpdateTaskGroupInput,\n    condition?: ModelTaskGroupConditionInput\n  ): Promise<UpdateTaskGroupMutation> {\n    const statement = `mutation UpdateTaskGroup($input: UpdateTaskGroupInput!, $condition: ModelTaskGroupConditionInput) {\n        updateTaskGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskGroupMutation>response.data.updateTaskGroup;\n  }\n  async DeleteTaskGroup(\n    input: DeleteTaskGroupInput,\n    condition?: ModelTaskGroupConditionInput\n  ): Promise<DeleteTaskGroupMutation> {\n    const statement = `mutation DeleteTaskGroup($input: DeleteTaskGroupInput!, $condition: ModelTaskGroupConditionInput) {\n        deleteTaskGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskGroupMutation>response.data.deleteTaskGroup;\n  }\n  async CreateTask(\n    input: CreateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<CreateTaskMutation> {\n    const statement = `mutation CreateTask($input: CreateTaskInput!, $condition: ModelTaskConditionInput) {\n        createTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateTaskMutation>response.data.createTask;\n  }\n  async UpdateTask(\n    input: UpdateTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<UpdateTaskMutation> {\n    const statement = `mutation UpdateTask($input: UpdateTaskInput!, $condition: ModelTaskConditionInput) {\n        updateTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateTaskMutation>response.data.updateTask;\n  }\n  async DeleteTask(\n    input: DeleteTaskInput,\n    condition?: ModelTaskConditionInput\n  ): Promise<DeleteTaskMutation> {\n    const statement = `mutation DeleteTask($input: DeleteTaskInput!, $condition: ModelTaskConditionInput) {\n        deleteTask(input: $input, condition: $condition) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteTaskMutation>response.data.deleteTask;\n  }\n  async CreateUser(\n    input: CreateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<CreateUserMutation> {\n    const statement = `mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n        createUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateUserMutation>response.data.createUser;\n  }\n  async UpdateUser(\n    input: UpdateUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<UpdateUserMutation> {\n    const statement = `mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n        updateUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateUserMutation>response.data.updateUser;\n  }\n  async DeleteUser(\n    input: DeleteUserInput,\n    condition?: ModelUserConditionInput\n  ): Promise<DeleteUserMutation> {\n    const statement = `mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n        deleteUser(input: $input, condition: $condition) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteUserMutation>response.data.deleteUser;\n  }\n  async CreateRoomGroup(\n    input: CreateRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<CreateRoomGroupMutation> {\n    const statement = `mutation CreateRoomGroup($input: CreateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        createRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomGroupMutation>response.data.createRoomGroup;\n  }\n  async UpdateRoomGroup(\n    input: UpdateRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<UpdateRoomGroupMutation> {\n    const statement = `mutation UpdateRoomGroup($input: UpdateRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        updateRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomGroupMutation>response.data.updateRoomGroup;\n  }\n  async DeleteRoomGroup(\n    input: DeleteRoomGroupInput,\n    condition?: ModelRoomGroupConditionInput\n  ): Promise<DeleteRoomGroupMutation> {\n    const statement = `mutation DeleteRoomGroup($input: DeleteRoomGroupInput!, $condition: ModelRoomGroupConditionInput) {\n        deleteRoomGroup(input: $input, condition: $condition) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomGroupMutation>response.data.deleteRoomGroup;\n  }\n  async CreateRoom(\n    input: CreateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<CreateRoomMutation> {\n    const statement = `mutation CreateRoom($input: CreateRoomInput!, $condition: ModelRoomConditionInput) {\n        createRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateRoomMutation>response.data.createRoom;\n  }\n  async UpdateRoom(\n    input: UpdateRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<UpdateRoomMutation> {\n    const statement = `mutation UpdateRoom($input: UpdateRoomInput!, $condition: ModelRoomConditionInput) {\n        updateRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateRoomMutation>response.data.updateRoom;\n  }\n  async DeleteRoom(\n    input: DeleteRoomInput,\n    condition?: ModelRoomConditionInput\n  ): Promise<DeleteRoomMutation> {\n    const statement = `mutation DeleteRoom($input: DeleteRoomInput!, $condition: ModelRoomConditionInput) {\n        deleteRoom(input: $input, condition: $condition) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteRoomMutation>response.data.deleteRoom;\n  }\n  async CreateMessage(\n    input: CreateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<CreateMessageMutation> {\n    const statement = `mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n        createMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <CreateMessageMutation>response.data.createMessage;\n  }\n  async UpdateMessage(\n    input: UpdateMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<UpdateMessageMutation> {\n    const statement = `mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n        updateMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <UpdateMessageMutation>response.data.updateMessage;\n  }\n  async DeleteMessage(\n    input: DeleteMessageInput,\n    condition?: ModelMessageConditionInput\n  ): Promise<DeleteMessageMutation> {\n    const statement = `mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n        deleteMessage(input: $input, condition: $condition) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      input\n    };\n    if (condition) {\n      gqlAPIServiceArguments.condition = condition;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <DeleteMessageMutation>response.data.deleteMessage;\n  }\n  async GetCompany(id: string): Promise<GetCompanyQuery> {\n    const statement = `query GetCompany($id: ID!) {\n        getCompany(id: $id) {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetCompanyQuery>response.data.getCompany;\n  }\n  async ListCompanys(\n    filter?: ModelCompanyFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListCompanysQuery> {\n    const statement = `query ListCompanys($filter: ModelCompanyFilterInput, $limit: Int, $nextToken: String) {\n        listCompanys(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListCompanysQuery>response.data.listCompanys;\n  }\n  async GetTaskGroup(id: string): Promise<GetTaskGroupQuery> {\n    const statement = `query GetTaskGroup($id: ID!) {\n        getTaskGroup(id: $id) {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskGroupQuery>response.data.getTaskGroup;\n  }\n  async ListTaskGroups(\n    filter?: ModelTaskGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTaskGroupsQuery> {\n    const statement = `query ListTaskGroups($filter: ModelTaskGroupFilterInput, $limit: Int, $nextToken: String) {\n        listTaskGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            userID\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            user {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTaskGroupsQuery>response.data.listTaskGroups;\n  }\n  async GetTask(id: string): Promise<GetTaskQuery> {\n    const statement = `query GetTask($id: ID!) {\n        getTask(id: $id) {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetTaskQuery>response.data.getTask;\n  }\n  async ListTasks(\n    filter?: ModelTaskFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListTasksQuery> {\n    const statement = `query ListTasks($filter: ModelTaskFilterInput, $limit: Int, $nextToken: String) {\n        listTasks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListTasksQuery>response.data.listTasks;\n  }\n  async GetUser(id: string): Promise<GetUserQuery> {\n    const statement = `query GetUser($id: ID!) {\n        getUser(id: $id) {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetUserQuery>response.data.getUser;\n  }\n  async ListUsers(\n    filter?: ModelUserFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListUsersQuery> {\n    const statement = `query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n        listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListUsersQuery>response.data.listUsers;\n  }\n  async GetRoomGroup(id: string): Promise<GetRoomGroupQuery> {\n    const statement = `query GetRoomGroup($id: ID!) {\n        getRoomGroup(id: $id) {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomGroupQuery>response.data.getRoomGroup;\n  }\n  async ListRoomGroups(\n    filter?: ModelRoomGroupFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomGroupsQuery> {\n    const statement = `query ListRoomGroups($filter: ModelRoomGroupFilterInput, $limit: Int, $nextToken: String) {\n        listRoomGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            roomID\n            userID\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            user {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomGroupsQuery>response.data.listRoomGroups;\n  }\n  async GetRoom(id: string): Promise<GetRoomQuery> {\n    const statement = `query GetRoom($id: ID!) {\n        getRoom(id: $id) {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetRoomQuery>response.data.getRoom;\n  }\n  async ListRooms(\n    filter?: ModelRoomFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListRoomsQuery> {\n    const statement = `query ListRooms($filter: ModelRoomFilterInput, $limit: Int, $nextToken: String) {\n        listRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListRoomsQuery>response.data.listRooms;\n  }\n  async GetMessage(id: string): Promise<GetMessageQuery> {\n    const statement = `query GetMessage($id: ID!) {\n        getMessage(id: $id) {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {\n      id\n    };\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <GetMessageQuery>response.data.getMessage;\n  }\n  async ListMessages(\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<ListMessagesQuery> {\n    const statement = `query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            attachment {\n              __typename\n              bucket\n              region\n              key\n            }\n            author {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <ListMessagesQuery>response.data.listMessages;\n  }\n  async TaskByCreatedAt(\n    taskID?: string,\n    createdAt?: ModelStringKeyConditionInput,\n    sortDirection?: ModelSortDirection,\n    filter?: ModelMessageFilterInput,\n    limit?: number,\n    nextToken?: string\n  ): Promise<TaskByCreatedAtQuery> {\n    const statement = `query TaskByCreatedAt($taskID: ID, $createdAt: ModelStringKeyConditionInput, $sortDirection: ModelSortDirection, $filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n        taskByCreatedAt(taskID: $taskID, createdAt: $createdAt, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n          __typename\n          items {\n            __typename\n            id\n            taskID\n            authorID\n            content\n            createdAt\n            isSent\n            attachment {\n              __typename\n              bucket\n              region\n              key\n            }\n            author {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            task {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            updatedAt\n            owner\n          }\n          nextToken\n        }\n      }`;\n    const gqlAPIServiceArguments: any = {};\n    if (taskID) {\n      gqlAPIServiceArguments.taskID = taskID;\n    }\n    if (createdAt) {\n      gqlAPIServiceArguments.createdAt = createdAt;\n    }\n    if (sortDirection) {\n      gqlAPIServiceArguments.sortDirection = sortDirection;\n    }\n    if (filter) {\n      gqlAPIServiceArguments.filter = filter;\n    }\n    if (limit) {\n      gqlAPIServiceArguments.limit = limit;\n    }\n    if (nextToken) {\n      gqlAPIServiceArguments.nextToken = nextToken;\n    }\n    const response = (await API.graphql(\n      graphqlOperation(statement, gqlAPIServiceArguments)\n    )) as any;\n    return <TaskByCreatedAtQuery>response.data.taskByCreatedAt;\n  }\n  OnCreateCompanyListener: Observable<\n    SubscriptionResponse<OnCreateCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateCompany {\n        onCreateCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateCompanySubscription>>;\n\n  OnUpdateCompanyListener: Observable<\n    SubscriptionResponse<OnUpdateCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateCompany {\n        onUpdateCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateCompanySubscription>>;\n\n  OnDeleteCompanyListener: Observable<\n    SubscriptionResponse<OnDeleteCompanySubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteCompany {\n        onDeleteCompany {\n          __typename\n          id\n          name\n          officer {\n            __typename\n            officerEmail\n            officerName\n          }\n          isRegistered\n          otp\n          tel\n          officialEmail\n          iconCompany {\n            __typename\n            bucket\n            region\n            key\n          }\n          billing\n          room {\n            __typename\n            items {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          companyMembers {\n            __typename\n            items {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteCompanySubscription>>;\n\n  OnCreateTaskGroupListener: Observable<\n    SubscriptionResponse<OnCreateTaskGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTaskGroup {\n        onCreateTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskGroupSubscription>>;\n\n  OnUpdateTaskGroupListener: Observable<\n    SubscriptionResponse<OnUpdateTaskGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTaskGroup {\n        onUpdateTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateTaskGroupSubscription>>;\n\n  OnDeleteTaskGroupListener: Observable<\n    SubscriptionResponse<OnDeleteTaskGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTaskGroup {\n        onDeleteTaskGroup {\n          __typename\n          id\n          taskID\n          userID\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskGroupSubscription>>;\n\n  OnCreateTaskListener: Observable<\n    SubscriptionResponse<OnCreateTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateTask {\n        onCreateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateTaskSubscription>>;\n\n  OnUpdateTaskListener: Observable<\n    SubscriptionResponse<OnUpdateTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateTask {\n        onUpdateTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateTaskSubscription>>;\n\n  OnDeleteTaskListener: Observable<\n    SubscriptionResponse<OnDeleteTaskSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteTask {\n        onDeleteTask {\n          __typename\n          id\n          authorID\n          roomID\n          chargePersonID\n          title\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          description\n          iconTask {\n            __typename\n            bucket\n            region\n            key\n          }\n          scheduleDate\n          priority\n          status\n          createdAt\n          chargePerson {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteTaskSubscription>>;\n\n  OnCreateUserListener: Observable<\n    SubscriptionResponse<OnCreateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateUser {\n        onCreateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateUserSubscription>>;\n\n  OnUpdateUserListener: Observable<\n    SubscriptionResponse<OnUpdateUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateUser {\n        onUpdateUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateUserSubscription>>;\n\n  OnDeleteUserListener: Observable<\n    SubscriptionResponse<OnDeleteUserSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteUser {\n        onDeleteUser {\n          __typename\n          id\n          username\n          email\n          companyID\n          tel\n          positionName\n          iconImage {\n            __typename\n            bucket\n            region\n            key\n          }\n          registered\n          authority\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          messages {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              authorID\n              content\n              createdAt\n              isSent\n              updatedAt\n              owner\n            }\n            nextToken\n          }\n          room {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          task {\n            __typename\n            items {\n              __typename\n              id\n              taskID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          chargeTask {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteUserSubscription>>;\n\n  OnCreateRoomGroupListener: Observable<\n    SubscriptionResponse<OnCreateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoomGroup {\n        onCreateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomGroupSubscription>>;\n\n  OnUpdateRoomGroupListener: Observable<\n    SubscriptionResponse<OnUpdateRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoomGroup {\n        onUpdateRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomGroupSubscription>>;\n\n  OnDeleteRoomGroupListener: Observable<\n    SubscriptionResponse<OnDeleteRoomGroupSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoomGroup {\n        onDeleteRoomGroup {\n          __typename\n          id\n          roomID\n          userID\n          room {\n            __typename\n            id\n            name\n            companyID\n            description\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            tasks {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomGroupSubscription>>;\n\n  OnCreateRoomListener: Observable<\n    SubscriptionResponse<OnCreateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateRoom {\n        onCreateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateRoomSubscription>>;\n\n  OnUpdateRoomListener: Observable<\n    SubscriptionResponse<OnUpdateRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateRoom {\n        onUpdateRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateRoomSubscription>>;\n\n  OnDeleteRoomListener: Observable<\n    SubscriptionResponse<OnDeleteRoomSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteRoom {\n        onDeleteRoom {\n          __typename\n          id\n          name\n          companyID\n          description\n          company {\n            __typename\n            id\n            name\n            officer {\n              __typename\n              officerEmail\n              officerName\n            }\n            isRegistered\n            otp\n            tel\n            officialEmail\n            iconCompany {\n              __typename\n              bucket\n              region\n              key\n            }\n            billing\n            room {\n              __typename\n              nextToken\n            }\n            companyMembers {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n            owner\n          }\n          tasks {\n            __typename\n            items {\n              __typename\n              id\n              authorID\n              roomID\n              chargePersonID\n              title\n              description\n              scheduleDate\n              priority\n              status\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          users {\n            __typename\n            items {\n              __typename\n              id\n              roomID\n              userID\n              createdAt\n              updatedAt\n            }\n            nextToken\n          }\n          createdAt\n          updatedAt\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteRoomSubscription>>;\n\n  OnCreateMessageListener: Observable<\n    SubscriptionResponse<OnCreateMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnCreateMessage {\n        onCreateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnCreateMessageSubscription>>;\n\n  OnUpdateMessageListener: Observable<\n    SubscriptionResponse<OnUpdateMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnUpdateMessage {\n        onUpdateMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnUpdateMessageSubscription>>;\n\n  OnDeleteMessageListener: Observable<\n    SubscriptionResponse<OnDeleteMessageSubscription>\n  > = API.graphql(\n    graphqlOperation(\n      `subscription OnDeleteMessage {\n        onDeleteMessage {\n          __typename\n          id\n          taskID\n          authorID\n          content\n          createdAt\n          isSent\n          attachment {\n            __typename\n            bucket\n            region\n            key\n          }\n          author {\n            __typename\n            id\n            username\n            email\n            companyID\n            tel\n            positionName\n            iconImage {\n              __typename\n              bucket\n              region\n              key\n            }\n            registered\n            authority\n            company {\n              __typename\n              id\n              name\n              isRegistered\n              otp\n              tel\n              officialEmail\n              billing\n              createdAt\n              updatedAt\n              owner\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            room {\n              __typename\n              nextToken\n            }\n            task {\n              __typename\n              nextToken\n            }\n            chargeTask {\n              __typename\n              nextToken\n            }\n            createdAt\n            updatedAt\n          }\n          task {\n            __typename\n            id\n            authorID\n            roomID\n            chargePersonID\n            title\n            room {\n              __typename\n              id\n              name\n              companyID\n              description\n              createdAt\n              updatedAt\n            }\n            description\n            iconTask {\n              __typename\n              bucket\n              region\n              key\n            }\n            scheduleDate\n            priority\n            status\n            createdAt\n            chargePerson {\n              __typename\n              id\n              username\n              email\n              companyID\n              tel\n              positionName\n              registered\n              authority\n              createdAt\n              updatedAt\n            }\n            messages {\n              __typename\n              nextToken\n            }\n            users {\n              __typename\n              nextToken\n            }\n            updatedAt\n          }\n          updatedAt\n          owner\n        }\n      }`\n    )\n  ) as Observable<SubscriptionResponse<OnDeleteMessageSubscription>>;\n}\n",
            "type": "injectable"
        },
        {
            "name": "ConfirmLogic",
            "id": "injectable-ConfirmLogic-5d70d596b96307eee201504f141e7c46",
            "file": "src/app/pages/confirm/logic/confirm.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resendConfirm",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n確認コードを再送信する関数です\n",
                    "description": "<p>確認コードを再送信する関数です</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 836,
                                "end": 844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "username"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 821,
                                "end": 826,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Email</p>\n",
                            "typeExpression": {
                                "pos": 827,
                                "end": 835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 828,
                                    "end": 834,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 857,
                                "end": 864,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>確認コードを問い合わせた結果が返ってきます</p>\n"
                        }
                    ]
                },
                {
                    "name": "sendConfirmUser",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCognitoに問い合わせする関数です\n",
                    "description": "<p>Cognitoに問い合わせする関数です</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 560,
                                "end": 568,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "username"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 545,
                                "end": 550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Email</p>\n",
                            "typeExpression": {
                                "pos": 551,
                                "end": 559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 552,
                                    "end": 558,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 596,
                                "end": 600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "code"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 581,
                                "end": 586,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>確認コード</p>\n",
                            "typeExpression": {
                                "pos": 587,
                                "end": 595,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 588,
                                    "end": 594,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 613,
                                "end": 620,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Cognitoに問い合わせた結果が返ってきます</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateUserToDynamo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDynamoDBにユーザーのRegistrationをTrueにします\n",
                    "description": "<p>DynamoDBにユーザーのRegistrationをTrueにします</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1116,
                                "end": 1122,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1110,
                                "end": 1115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>UserID</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1136,
                                "end": 1143,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>DynamoDBに登録した結果を返します</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { UpdateUserInput } from '../../../shared/service/amplify.service';\nimport { ConfirmService } from '../service/confirm.service';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmLogic {\n\n  constructor(\n    private sessionService: SessionService,\n    private confirmService: ConfirmService,\n  ) { }\n\n  /**\n   * Cognitoに問い合わせする関数です\n   * @param {string} username Email\n   * @param {string} code 確認コード\n   * @returns Cognitoに問い合わせた結果が返ってきます\n   */\n  sendConfirmUser(username: string, code: string): Observable<void> {\n    return this.sessionService.confirmSignUp(username, code);\n  }\n\n  /**\n   * 確認コードを再送信する関数です\n   * @param {string} username Email\n   * @returns 確認コードを問い合わせた結果が返ってきます\n   */\n  resendConfirm(username: string): Observable<string> {\n    return this.sessionService.resendConfirmNumberForSignUp(username);\n  }\n\n  /**\n   * DynamoDBにユーザーのRegistrationをTrueにします\n   * @param companyId CompanyID\n   * @param userId UserID\n   * @returns DynamoDBに登録した結果を返します\n   */\n  updateUserToDynamo(userId: string): Observable<any> {\n    const requestContent: UpdateUserInput = {\n      id: `${userId}`,\n      registered: true,\n    }\n    return this.confirmService.updateUserToDynamo(requestContent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirmService",
                        "type": "ConfirmService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "confirmService",
                        "type": "ConfirmService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConfirmService",
            "id": "injectable-ConfirmService-b3308924c9dab8f7cd1ce76a6495ee0e",
            "file": "src/app/pages/confirm/service/confirm.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "updateUserToDynamo",
                    "args": [
                        {
                            "name": "requestContent",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestContent",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { AmplifyService, UpdateUserInput } from 'src/app/shared/service/amplify.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmService {\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) { }\n\n  updateUserToDynamo(requestContent: UpdateUserInput): Observable<any> {\n    return from(this.amplifyService.UpdateUser(requestContent))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CreateCompanyLogic",
            "id": "injectable-CreateCompanyLogic-d1fdec33ef97a5cf5bb7bcfe909847fd",
            "file": "src/app/pages/create-company/logic/create-company.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createCompanyToDynamoDB",
                    "args": [
                        {
                            "name": "content",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCompany一次登録の情報をDynamoDBにいれます\n",
                    "description": "<p>Company一次登録の情報をDynamoDBにいれます</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 759,
                                "end": 766,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "content"
                            },
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 732,
                                "end": 737,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>DynamoDBに保存するPram</p>\n",
                            "typeExpression": {
                                "pos": 738,
                                "end": 758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 739,
                                    "end": 757,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 739,
                                        "end": 757,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "CreateCompanyInput"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 791,
                                "end": 798,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>CompanyID</p>\n",
                            "returnType": "string"
                        }
                    ]
                },
                {
                    "name": "createUserWithCompanyId",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "officerEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n会社に紐づく担当者(User)をDynamoDBに登録します\n",
                    "description": "<p>会社に紐づく担当者(User)をDynamoDBに登録します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1179,
                                "end": 1188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "companyId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1162,
                                "end": 1167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>CompanyID</p>\n",
                            "typeExpression": {
                                "pos": 1168,
                                "end": 1178,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1169,
                                    "end": 1176,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1221,
                                "end": 1229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "username"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1205,
                                "end": 1210,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>会社の担当者氏名</p>\n",
                            "typeExpression": {
                                "pos": 1211,
                                "end": 1220,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1212,
                                    "end": 1219,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1260,
                                "end": 1272,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "officerEmail"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1245,
                                "end": 1250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>会社のEmailアドレス</p>\n",
                            "typeExpression": {
                                "pos": 1251,
                                "end": 1259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1252,
                                    "end": 1258,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 147
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1292,
                                "end": 1299,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>DynamoDBに保存した結果</p>\n"
                        }
                    ]
                },
                {
                    "name": "entrySignUpUser",
                    "args": [
                        {
                            "name": "value",
                            "type": "SignUpValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n担当者をCognitoに登録します\n",
                    "description": "<p>担当者をCognitoに登録します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2659,
                                "end": 2664,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "SignUpValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2653,
                                "end": 2658,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>会員登録に必要な情報</p>\n"
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2682,
                                "end": 2689,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>成功時はSuccessが返ってきて、失敗時はDeniedが返ってくる</p>\n"
                        }
                    ]
                },
                {
                    "name": "generateOneTimePassword",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOneTimePasswordを生成します\n",
                    "description": "<p>OneTimePasswordを生成します</p>\n",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2406,
                                "end": 2413,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>oneTimePasswordを返します</p>\n",
                            "returnType": "string"
                        }
                    ]
                },
                {
                    "name": "sendEmailForRegister",
                    "args": [
                        {
                            "name": "content",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n会社の本登録を促すメールを送信します\n",
                    "description": "<p>会社の本登録を促すメールを送信します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1811,
                                "end": 1818,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "content"
                            },
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1784,
                                "end": 1789,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>会社登録に必要なParam</p>\n",
                            "typeExpression": {
                                "pos": 1790,
                                "end": 1810,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 1791,
                                    "end": 1809,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 1791,
                                        "end": 1809,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "CreateCompanyInput"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1839,
                                "end": 1846,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>成功時とエラー時で返す値</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { CreateCompanyInput, CreateUserInput, CreateUserMutation } from 'src/app/shared/service/amplify.service';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { CreateCompanyService } from '../service/create-company.service';\nimport { SignUpValue } from '../models/signup.interface';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateCompanyLogic {\n\n  constructor(\n    private createCompanyService: CreateCompanyService,\n    private sessionService: SessionService,\n  ) { }\n\n  /**\n   * Company一次登録の情報をDynamoDBにいれます\n   * @param {CreateCompanyInput} content DynamoDBに保存するPram\n   * @returns {string} CompanyID\n   */\n  createCompanyToDynamoDB(content: CreateCompanyInput): Observable<string> {\n    const requestContent = content;\n    return this.createCompanyService.createCompany(requestContent)\n      .pipe(map((result) => result.id))\n      .pipe(catchError((error) => of(`ErrorMessage: ${error}`)))\n  }\n\n  /**\n   * 会社に紐づく担当者(User)をDynamoDBに登録します\n   * @param { string } companyId CompanyID\n   * @param { string} username 会社の担当者氏名\n   * @param {string} officerEmail 会社のEmailアドレス\n   * @returns DynamoDBに保存した結果\n   */\n  createUserWithCompanyId(companyId: string, username: string, officerEmail: string): Observable<CreateUserMutation> {\n    const requestContent: CreateUserInput = {\n      id: `${companyId}_user_${uuid()}`,\n      username: `${username}`,\n      email: `${officerEmail}`,\n      companyID: `${companyId}`,\n      registered: false,\n      authority: true,\n    }\n    return this.createCompanyService.createUser(requestContent);\n  }\n\n  /**\n   * 会社の本登録を促すメールを送信します\n   * @param {CreateCompanyInput} content 会社登録に必要なParam\n   * @returns 成功時とエラー時で返す値\n   */\n  sendEmailForRegister(content: CreateCompanyInput): Observable<string> {\n    const officerName = content.officer[0].officerName;\n    const officerEmail = content.officer[0].officerEmail;\n    const otpToken = content.otp;\n    const requestBody = {\n      body: {\n        name: officerName,\n        email: officerEmail,\n        otp: otpToken,\n      }\n    }\n    return this.createCompanyService.sendEmailForRegister(requestBody)\n      .pipe(catchError((e) => `Not Send for Register Message: ${e}`))\n  }\n\n  /**\n   * OneTimePasswordを生成します\n   * @returns {string} oneTimePasswordを返します\n   */\n  generateOneTimePassword(companyId: string): Observable<string> {\n    return this.createCompanyService.generateOTP(companyId)\n      .pipe(map(({ otp }) => otp));\n  }\n\n  /**\n   * 担当者をCognitoに登録します\n   * @param value 会員登録に必要な情報\n   * @returns 成功時はSuccessが返ってきて、失敗時はDeniedが返ってくる\n   */\n  entrySignUpUser(value: SignUpValue, companyId: string): Observable<string> {\n    const signUpContent = {\n      username: value.email,\n      password: value.password,\n      attributes: {\n        name: value.name,\n        email: value.email,\n      }\n    }\n    return this.sessionService.entryUserSignup(signUpContent, companyId);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "createCompanyService",
                        "type": "CreateCompanyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "createCompanyService",
                        "type": "CreateCompanyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CreateCompanyService",
            "id": "injectable-CreateCompanyService-cab4b5ce3b5bfeded5349c700af34728",
            "file": "src/app/pages/create-company/service/create-company.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createCompany",
                    "args": [
                        {
                            "name": "requestContent",
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateCompanyMutation>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDynamoDBに会社名、担当者、担当者Emailを登録します\n",
                    "description": "<p>DynamoDBに会社名、担当者、担当者Emailを登録します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 689,
                                "end": 703,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "requestContent"
                            },
                            "type": "CreateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 683,
                                "end": 688,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>リクエストコンテンツ</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 721,
                                "end": 728,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>CreateCompanyした結果がCreateCompanyMutation形式で返る</p>\n"
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "requestContent",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate UserするAPIです\n",
                    "description": "<p>Create UserするAPIです</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 984,
                                "end": 998,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "requestContent"
                            },
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 978,
                                "end": 983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>リクエストコンテンツ</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1016,
                                "end": 1023,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>CreateUserした結果がCreateUserMutation形式で返る</p>\n"
                        }
                    ]
                },
                {
                    "name": "generateOTP",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOneTimePasswordを生成して返す関数です\n",
                    "description": "<p>OneTimePasswordを生成して返す関数です</p>\n",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1509,
                                "end": 1516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>oneTimePasswordを返します</p>\n",
                            "returnType": "string"
                        }
                    ]
                },
                {
                    "name": "isValidOTP",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type | literal type>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTokenが正であるのか確認し結果を返します\n",
                    "description": "<p>Tokenが正であるのか確認し結果を返します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1859,
                                "end": 1864,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1853,
                                "end": 1858,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>One time password token</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1895,
                                "end": 1902,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>結果を返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "sendEmailForRegister",
                    "args": [
                        {
                            "name": "requestBody",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestBody",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { API } from 'aws-amplify';\nimport { AmplifyService, CreateCompanyInput, CreateCompanyMutation, CreateUserInput, CreateUserMutation } from 'src/app/shared/service/amplify.service';\n\nconst apiAuthSendEmail = 'authSendEmail';\nconst apiVerifyOTP = 'verifyotp';\n\nconst pathRegisterCompany = '/register/company';\nconst pathVerifyGenerate = '/verify-otp/generate';\nconst pathCheckVerify = '/verify-otp';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateCompanyService {\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) { }\n\n  /**\n   * DynamoDBに会社名、担当者、担当者Emailを登録します\n   * @param requestContent リクエストコンテンツ\n   * @returns CreateCompanyした結果がCreateCompanyMutation形式で返る\n   */\n  createCompany(requestContent: CreateCompanyInput): Observable<CreateCompanyMutation> {\n    return from(this.amplifyService.CreateCompany(requestContent));\n  }\n\n  /**\n   * Create UserするAPIです\n   * @param requestContent リクエストコンテンツ\n   * @returns CreateUserした結果がCreateUserMutation形式で返る\n   */\n  createUser(requestContent: CreateUserInput): Observable<CreateUserMutation> {\n    return from(this.amplifyService.CreateUser(requestContent));\n  }\n\n  sendEmailForRegister(requestBody: { body: { name: string, email: string, otp: string } }): Observable<any> {\n    const myInit = {\n      body: requestBody.body\n    }\n    return from(API.post(apiAuthSendEmail, pathRegisterCompany, myInit));\n  }\n\n  /**\n   * OneTimePasswordを生成して返す関数です\n   * @returns {string} oneTimePasswordを返します\n   */\n  generateOTP(companyId: string): Observable<{ success: string, otp: string }> {\n    const requestInit = {\n      queryStringParameters: {\n        companyId: companyId\n      }\n    };\n    return from(API.get(apiVerifyOTP, pathVerifyGenerate, requestInit));\n  }\n\n  /**\n   * Tokenが正であるのか確認し結果を返します\n   * @param token One time password token\n   * @returns 結果を返します\n   */\n  isValidOTP(token: string): Observable<{} | { error: string, message: string }> {\n    const requestBody = {\n      body: token,\n    }\n    return from(API.get(apiVerifyOTP, pathCheckVerify, requestBody));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataLogic",
            "id": "injectable-DataLogic-e6733ab2f887c465452ced11b12a11c3",
            "file": "src/app/shared/logic/data/data.logic.ts",
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataLogic {\n  data = [];\n\n  constructor() { }\n\n  setData(id, data) {\n    this.data[id] = data;\n  }\n\n  getData(id) {\n    return this.data[id];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "HomeLogic",
            "id": "injectable-HomeLogic-b7bfcca7b096cae58894d64ae2b7cb4f",
            "file": "src/app/pages/home/logic/home.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "base64toBlob",
                    "args": [
                        {
                            "name": "base64Data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64Data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkRegistrationUser",
                    "args": [
                        {
                            "name": "attribute",
                            "type": "Attribute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n登録しているユーザ情報をチェックします\n",
                    "description": "<p>登録しているユーザ情報をチェックします</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1251,
                                "end": 1260,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "attribute"
                            },
                            "type": "Attribute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1245,
                                "end": 1250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>登録しているユーザ情報</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1279,
                                "end": 1286,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>登録しているユーザ情報を取得する</p>\n"
                        }
                    ]
                },
                {
                    "name": "createRoom",
                    "args": [
                        {
                            "name": "content",
                            "type": "InterfaceLogicArgsCreateRoom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUser",
                            "type": "CurrentUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateRoomMutation>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRoomを新規で作成するメソッドです\n",
                    "description": "<p>Roomを新規で作成するメソッドです</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1725,
                                "end": 1732,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "content"
                            },
                            "type": "InterfaceLogicArgsCreateRoom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1719,
                                "end": 1724,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>ルーム作成するのに必要な情報</p>\n"
                        },
                        {
                            "name": "currentUser",
                            "type": "CurrentUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1753,
                                "end": 1760,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Roomを新規作成してその値を取得します</p>\n"
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "formContent",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nユーザ情報を新規で作成します\n",
                    "description": "<p>ユーザ情報を新規で作成します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2206,
                                "end": 2217,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "formContent"
                            },
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2200,
                                "end": 2205,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Form型のユーザ</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2234,
                                "end": 2241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>ユーザを新規で作成してその結果を返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "createUserRoomGroup",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRoomItem",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DeleteRoomMutation>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CurrentUser>>",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Attribute>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nログインしているユーザ情報をCognitoから取得します\n",
                    "description": "<p>ログインしているユーザ情報をCognitoから取得します</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1505,
                                "end": 1512,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>現在ログインしているユーザー情報を取得する</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchRoomGroupsId",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "meId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "meId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomList",
                    "args": [
                        {
                            "name": "currentUseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<RoomGroupItems>>",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMembers",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<RoomGroupItems>>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTaskGroupPerUser",
                    "args": [
                        {
                            "name": "userID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListTaskGroupsQuery>",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContentType",
                    "args": [
                        {
                            "name": "base64data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDirString",
                    "args": [
                        {
                            "name": "dt",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dt",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "filePathName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filePathName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeExt",
                    "args": [
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeS3Object",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IS3Object>",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateRoomGroupListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRoomGroupListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomGroupListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "putStorage",
                    "args": [
                        {
                            "name": "uploadFileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blobFile",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Object>",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uploadFileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blobFile",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMeFromRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "meId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "meId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setExitsRoomAndUser",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<RoomGroupItems>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Array<RoomGroupItems>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "formContent",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "extraData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formContent",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "extraData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadAvatarIconUrl",
                    "args": [
                        {
                            "name": "base64Data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64Data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyExistTaskOnRoom",
                    "args": [
                        {
                            "name": "chargeItems",
                            "type": "Array<FetchTaskGroup>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chargeItems",
                            "type": "Array<FetchTaskGroup>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, from, of } from 'rxjs';\nimport { concatMap, map, filter, toArray, find } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { HomeService } from '../service/home.service';\nimport { SessionService } from '../../../shared/service/session.service';\nimport {\n  CreateRoomGroupMutation,\n  CreateRoomMutation,\n  CreateUserMutation,\n  DeleteRoomMutation,\n  ListUsersQuery,\n  ModelRoomGroupFilterInput,\n  UpdateUserInput,\n  ListTaskGroupsQuery,\n  GetUserQuery,\n} from 'src/app/shared/service/amplify.service';\nimport { Storage } from 'aws-amplify';\nimport { CurrentUser, RoomGroupItems, InterfaceLogicArgsCreateRoom, FetchTaskGroup } from '../model/home.interface';\nimport { IS3Object } from '../../task-detail/models/task-detail.interface';\nimport { environment } from 'src/environments/environment';\n\ninterface Attribute {\n  name: string,\n  email: string,\n  email_verified: boolean,\n  sub: string,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HomeLogic {\n\n  constructor(\n    private readonly homeService: HomeService,\n    private readonly sessionService: SessionService,\n  ) { }\n\n  /**\n   * 登録しているユーザ情報をチェックします\n   * @param attribute 登録しているユーザ情報\n   * @returns 登録しているユーザ情報を取得する\n   */\n  checkRegistrationUser(attribute: Attribute): Observable<ListUsersQuery> {\n    return this.homeService.checkRegistrationUser(attribute.email);\n  }\n\n  /**\n   * ログインしているユーザ情報をCognitoから取得します\n   * @returns 現在ログインしているユーザー情報を取得する\n   */\n  fetchCurrentUser(): Observable<Attribute> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map((res) => res.attributes));\n  }\n\n  /**\n  * Roomを新規で作成するメソッドです\n  * @param content ルーム作成するのに必要な情報\n  * @returns Roomを新規作成してその値を取得します\n  */\n  createRoom(content: InterfaceLogicArgsCreateRoom, currentUser: CurrentUser): Observable<CreateRoomMutation> {\n    const requestContent = {\n      id: `${currentUser.companyID}_room_${uuid()}`,\n      companyID: `${currentUser.companyID}`,\n      name: content.nameItem,\n      description: content.descriptionItem,\n    };\n    return this.homeService.createRoom(requestContent);\n  }\n\n  /**\n   * ユーザ情報を新規で作成します\n   * @param formContent Form型のユーザ\n   * @returns ユーザを新規で作成してその結果を返します\n   */\n  createUser(formContent: FormGroup): Observable<CreateUserMutation> {\n    const resultFormIconImageUrl = formContent.get('keyAvatarImage').value;\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    let avatarUserImage: IS3Object;\n    if (resultFormIconImageUrl !== '') {\n      avatarUserImage = {\n        key: resultFormIconImageUrl,\n        bucket: bucket,\n        region: region,\n      }\n    } else {\n      avatarUserImage = {\n        key: '',\n        bucket: bucket,\n        region: region,\n      }\n    }\n    const requestContent = {\n      id: formContent.get('id').value,\n      username: formContent.get('userName').value,\n      email: formContent.get('targetEmail').value,\n      companyID: 'takuCloudCom',\n      tel: formContent.get('tel').value,\n      positionName: formContent.get('positionName').value,\n      iconImage: avatarUserImage,\n      registered: true,\n    };\n    return this.homeService.createUser(requestContent);\n  }\n\n  updateUser(formContent: FormGroup, extraData): Observable<any> {\n    const resultFormIconImageUrl = formContent.get('keyAvatarImage').value;\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    const requestContent: UpdateUserInput = {\n      id: formContent.get('id').value,\n      username: formContent.get('userName').value,\n      email: formContent.get('targetEmail').value,\n      companyID: extraData.companyId,\n      tel: formContent.get('tel').value ? formContent.get('tel').value : '',\n      positionName: formContent.get('positionName').value ? formContent.get('positionName').value : '',\n    };\n    if (resultFormIconImageUrl !== null) {\n      requestContent.iconImage = {\n        key: resultFormIconImageUrl,\n        bucket: bucket,\n        region: region,\n      }\n    }\n    return this.homeService.updateUser(requestContent);\n  }\n\n  deleteRoomItem(roomId: string): Observable<DeleteRoomMutation> {\n    return this.homeService.deleteRoomItem(roomId);\n  }\n\n  createUserRoomGroup(userId: string, roomId: string): Observable<CreateRoomGroupMutation> {\n    const content = {\n      id: `user-room-group-${uuid()}`,\n      roomID: `${roomId}`,\n      userID: `${userId}`,\n    }\n    return this.homeService.createUserRoomGroup(content);\n  }\n\n  fetchRoomMembers(roomId: string, currentUserId: string): Observable<Array<RoomGroupItems>> {\n    const filterContent: ModelRoomGroupFilterInput = {\n      roomID: {\n        eq: `${roomId}`\n      },\n      userID: {\n        ne: `${currentUserId}`\n      }\n    }\n    return this.homeService.fetchRoomMembers(filterContent)\n      .pipe(map((result) => result.items));\n  }\n\n  removeMeFromRoom(roomId: string, meId: string): Observable<any> {\n    return this.fetchRoomGroupsId(roomId, meId)\n      .pipe(concatMap((roomGroupId) => this.homeService.deleteRoomGroupsItem(roomGroupId)));\n  }\n\n  fetchRoomGroupsId(roomId: string, meId: string): Observable<string> {\n    const filterContent = {\n      roomID: {\n        eq: roomId,\n      },\n      userID: {\n        eq: meId,\n      }\n    }\n    return this.homeService.fetchRoomGroupsId(filterContent)\n      .pipe(map(({ items }) => items[0].id));\n  }\n\n  fetchRoomList(currentUseId: string): Observable<Array<RoomGroupItems>> {\n    const filterContent = {\n      userID: {\n        eq: currentUseId\n      }\n    }\n    return this.homeService.fetchRoomList(filterContent)\n      .pipe(map(({ items }) => items));\n  }\n\n  uploadAvatarIconUrl(base64Data: any, userId: string): Observable<any> {\n    let contentType: string;\n    let fileName: string;\n    let uploadFilePath: string;\n    let ext: string;\n    const dt = new Date();\n    const dateDir = this.getDirString(dt, userId);\n    return this.getContentType(base64Data)\n      .pipe(map((result) => contentType = result))\n      .pipe(concatMap((contentType) => this.makeExt(contentType)))\n      .pipe(map(result => ext = result))\n      .pipe(map(() => fileName = `avatar_${uuid()}_/${dateDir}`))\n      .pipe(map(() => uploadFilePath = `${fileName}.${ext}`))\n      .pipe(concatMap(() => this.base64toBlob(base64Data, contentType)))\n      .pipe(concatMap((blobFile) => this.putStorage(uploadFilePath, blobFile, contentType)));\n  }\n\n  getDirString(dt: Date, userId: string): string {\n    return \"\" + userId + \"/\" +\n      (\"00\" + dt.getUTCFullYear()).slice(-2) +\n      (\"00\" + (dt.getMonth() + 1)).slice(-2) +\n      (\"00\" + dt.getUTCDate()).slice(-2) +\n      (\"00\" + dt.getUTCHours()).slice(-2) +\n      (\"00\" + dt.getMinutes()).slice(-2) +\n      (\"00\" + dt.getUTCSeconds()).slice(-2);\n  }\n\n  setExitsRoomAndUser(data: Array<RoomGroupItems>): Observable<any> {\n    return from(data)\n      .pipe(filter((item: RoomGroupItems) => item.room !== null))\n      .pipe(filter((item: RoomGroupItems) => item.user !== null))\n      .pipe(toArray());\n  }\n\n  getContentType(base64data): Observable<string> {\n    const block = base64data.split(\";\");\n    const contentType = block[0].split(\":\")[1];\n    return of(contentType)\n  }\n\n  makeExt(contentType: string): Observable<string> {\n    return of(contentType.match(/([^/]+?)?$/)[0]);\n  }\n\n  base64toBlob(base64Data: any, contentType: string): Observable<Blob> {\n    const byteCharacters = atob(base64Data.replace(/^.*,/, ''));\n    let buffer = new Uint8Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      buffer[i] = byteCharacters.charCodeAt(i);\n    }\n    const blob = new Blob([buffer.buffer], {\n      type: contentType\n    });\n    return of(blob);\n  }\n\n  putStorage(uploadFileName: string, blobFile: Blob, contentType: string): Observable<Object> {\n    return from(Storage.put(\n      uploadFileName,\n      blobFile,\n      {\n        contentType: contentType,\n      }\n    ));\n  }\n\n  makeS3Object(key: string): Observable<IS3Object> {\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    const keyFile = `public/${key}`;\n    const returnResult = {\n      key: keyFile,\n      region: region,\n      bucket: bucket\n    }\n    return of(returnResult);\n  }\n\n  getStorage(filePathName: string): Observable<any> {\n    return from(Storage.get(filePathName));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.homeService.checkRegistrationUser(email)\n      .pipe(map((result) => result.items));\n  }\n\n  onCreateRoomListener(): any {\n    return this.homeService.onCreateRoomListener();\n  }\n\n  onUpdateRoomListener(): any {\n    return this.homeService.onUpdateRoomListener();\n  }\n\n  onDeleteRoomListener(): any {\n    return this.homeService.onDeleteRoomListener();\n  }\n\n  onCreateRoomGroupListener(): any {\n    return this.homeService.onCreateRoomGroupListener();\n  }\n\n  onUpdateRoomGroupListener(): any {\n    return this.homeService.onUpdateRoomGroupListener();\n  }\n\n  onDeleteRoomGroupListener(): any {\n    return this.homeService.onDeleteRoomGroupListener();\n  }\n\n  fetchTaskGroupPerUser(userID: string): Observable<ListTaskGroupsQuery> {\n    const filterContent = {\n      userID: {\n        eq: userID\n      }\n    }\n    return this.homeService.fetchTaskGroupPerUser(filterContent);\n  }\n\n  fetchUserInfo(userId: string): Observable<GetUserQuery> {\n    return this.homeService.fetchUserInfo(userId);\n  }\n\n  verifyExistTaskOnRoom(chargeItems: Array<FetchTaskGroup>, roomId: string): Observable<any> {\n    let isExist = false;\n    const statusDone = 10;\n    return from(chargeItems)\n      .pipe(find((item) => item.roomID === roomId && item.status !== statusDone))\n      .pipe(map((data) => !data ? isExist = false : isExist = true));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "homeService",
                        "type": "HomeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "homeService",
                        "type": "HomeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HomeService",
            "id": "injectable-HomeService-606c5d83c50b40d22a3a67d8df66b69c",
            "file": "src/app/pages/home/service/home.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkRegistrationUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRoom",
                    "args": [
                        {
                            "name": "content",
                            "type": "InterfaceArgsCreateRoom",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateRoomMutation>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "InterfaceArgsCreateRoom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "content",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserRoomGroup",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "ISArgsCreateRoomGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "ISArgsCreateRoomGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRoomGroupsItem",
                    "args": [
                        {
                            "name": "roomGroupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomGroupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRoomItem",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DeleteRoomMutation>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "userFilter",
                            "type": "ModelUserFilterInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userFilter",
                            "type": "ModelUserFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomGroupsId",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomList",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMembers",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTaskGroupPerUser",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "FilterTaskGroupPerUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListTaskGroupsQuery>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "FilterTaskGroupPerUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateRoomGroupListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRoomGroupListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomGroupListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "content",
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateUserMutation>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCurrentUser情報を更新します\n",
                    "description": "<p>CurrentUser情報を更新します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1251,
                                "end": 1258,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "content"
                            },
                            "type": "UpdateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1245,
                                "end": 1250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>CurrentUser情報を更新するための情報</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1289,
                                "end": 1296,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>CurrentUser情報更新時を行った結果を返します</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  AmplifyService,\n  ModelUserFilterInput,\n  ModelRoomGroupFilterInput,\n  ListRoomGroupsQuery,\n  ListUsersQuery,\n  CreateRoomMutation,\n  CreateUserMutation,\n  CreateUserInput,\n  DeleteRoomMutation,\n  CreateRoomGroupMutation,\n  UpdateUserMutation,\n  UpdateUserInput,\n  GetUserQuery,\n  ListTaskGroupsQuery\n} from '../../../shared/service/amplify.service';\nimport { from, Observable } from 'rxjs';\nimport { InterfaceArgsCreateRoom, ISArgsCreateRoomGroup, FilterTaskGroupPerUser } from '../model/home.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HomeService {\n\n  constructor(private amplifyService: AmplifyService) { }\n\n  checkRegistrationUser(email: string): Observable<ListUsersQuery> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`,\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n\n  createRoom(content: InterfaceArgsCreateRoom): Observable<CreateRoomMutation> {\n    return from(this.amplifyService.CreateRoom(content));\n  }\n\n  createUser(content: CreateUserInput): Observable<CreateUserMutation> {\n    return from(this.amplifyService.CreateUser(content));\n  }\n\n  /**\n   * CurrentUser情報を更新します\n   * @param content CurrentUser情報を更新するための情報\n   * @returns CurrentUser情報更新時を行った結果を返します\n   */\n  updateUser(content: UpdateUserInput): Observable<UpdateUserMutation> {\n    return from(this.amplifyService.UpdateUser(content));\n  }\n\n  fetchRoomList(filterContent: ModelRoomGroupFilterInput): Observable<ListRoomGroupsQuery> {\n    return from(this.amplifyService.ListRoomGroups(filterContent));\n  }\n\n  deleteRoomItem(roomId: string): Observable<DeleteRoomMutation> {\n    const requestContent = {\n      id: roomId\n    }\n    return from(this.amplifyService.DeleteRoom(requestContent));\n  }\n\n  createUserRoomGroup(filterContent: ISArgsCreateRoomGroup): Observable<CreateRoomGroupMutation> {\n    return from(this.amplifyService.CreateRoomGroup(filterContent));\n  }\n\n  fetchRoomMembers(filterContent: ModelRoomGroupFilterInput): Observable<ListRoomGroupsQuery> {\n    return from(this.amplifyService.ListRoomGroups(filterContent));\n  }\n\n  fetchRoomGroupsId(filterContent: ModelRoomGroupFilterInput): Observable<ListRoomGroupsQuery> {\n    return from(this.amplifyService.ListRoomGroups(filterContent));\n  }\n\n  deleteRoomGroupsItem(roomGroupId: string): Observable<any> {\n    const requestContent = {\n      id: roomGroupId\n    }\n    return from(this.amplifyService.DeleteRoomGroup(requestContent));\n  }\n\n  fetchAnyUserInfoFromList(userFilter: ModelUserFilterInput): Observable<ListUsersQuery> {\n    return from(this.amplifyService.ListUsers(userFilter));\n  }\n\n  onCreateRoomListener(): any {\n    return this.amplifyService.OnCreateRoomListener;\n  }\n\n  onUpdateRoomListener(): any {\n    return this.amplifyService.OnUpdateRoomListener;\n  }\n\n  onDeleteRoomListener(): any {\n    return this.amplifyService.OnDeleteRoomListener;\n  }\n\n  onCreateRoomGroupListener(): any {\n    return this.amplifyService.OnCreateRoomGroupListener;\n  }\n\n  onUpdateRoomGroupListener(): any {\n    return this.amplifyService.OnUpdateRoomGroupListener;\n  }\n\n  onDeleteRoomGroupListener(): any {\n    return this.amplifyService.OnDeleteRoomGroupListener;\n  }\n\n  fetchTaskGroupPerUser(filterContent: FilterTaskGroupPerUser): Observable<ListTaskGroupsQuery> {\n    return from(this.amplifyService.ListTaskGroups(filterContent));\n  }\n\n  fetchUserInfo(userId: string): Observable<GetUserQuery> {\n    return from(this.amplifyService.GetUser(userId));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginLogic",
            "id": "injectable-LoginLogic-f7b91809ad37c62a8e06c2a572a11c68",
            "file": "src/app/pages/login/logic/login-logic.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "sendLoginInfo",
                    "args": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginLogic {\n\n  constructor(\n    private sessionService: SessionService\n  ) { }\n\n  sendLoginInfo(email, password): Observable<void> {\n    return this.sessionService.userLogin(email, password)\n      .pipe(catchError(() => {\n        throw 'Login Error';\n      }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemberListLogic",
            "id": "injectable-MemberListLogic-ba0c08728ac94f2b7bd682af72699585",
            "file": "src/app/pages/member-list/logic/member-list.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createCompanyUserToDynamoDB",
                    "args": [
                        {
                            "name": "registerEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "optionData",
                            "type": "OptionData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "optionData",
                            "type": "OptionData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CurrentUser>>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyMembers",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CompanyMember>>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchMember",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "dataKey",
                            "type": "IconImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataKey",
                            "type": "IconImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modifiedAvatarIconUrl",
                    "args": [
                        {
                            "name": "currentUserIcon",
                            "type": "IconImage | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCurrent UserのIconのURLを取得\n",
                    "description": "<p>Current UserのIconのURLを取得</p>\n",
                    "jsdoctags": [
                        {
                            "name": "currentUserIcon",
                            "type": "IconImage | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2638,
                                "end": 2645,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>型IconImageからImageのURLを返す</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerCompanyMembers",
                    "args": [
                        {
                            "name": "arrayRegisterEmail",
                            "type": "Array<RequestRegisterCompanyMember>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUser",
                            "type": "CurrentUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CreateUserMutation>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arrayRegisterEmail",
                            "type": "Array<RequestRegisterCompanyMember>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUser",
                            "type": "CurrentUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCompanyMembers",
                    "args": [
                        {
                            "name": "members",
                            "type": "Array<CompanyMember>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CompanyMember>>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "members",
                            "type": "Array<CompanyMember>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport { concatMap, map, toArray, filter } from 'rxjs/operators';\nimport { Storage } from 'aws-amplify';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { ListUsersQuery, CreateUserInput, CreateUserMutation, GetUserQuery } from '../../../shared/service/amplify.service';\nimport { MemberListService } from '../service/member-list.service';\nimport { RequestRegisterCompanyMember, CurrentUser, OptionData, CompanyMember, IconImage } from '../models/member-list.interface';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemberListLogic {\n\n  constructor(\n    private memberListService: MemberListService,\n    private sessionService: SessionService,\n  ) { }\n\n  registerCompanyMembers(arrayRegisterEmail: Array<RequestRegisterCompanyMember>, currentUser: CurrentUser): Observable<Array<CreateUserMutation>> {\n    const optionData: OptionData = {\n      companyId: currentUser.companyID,\n      companyName: currentUser.company.name,\n      officerName: currentUser.username,\n    }\n    let targetEmail: string;\n    return from(arrayRegisterEmail)\n      .pipe(map((registerEmail) => targetEmail = registerEmail.companyMemberEmail))\n      .pipe(concatMap(() => this.memberListService.sendRegisterCompanyMembers(targetEmail, optionData)))\n      .pipe(concatMap(() => this.createCompanyUserToDynamoDB(targetEmail, optionData)))\n      .pipe(toArray());\n  }\n\n  fetchCurrentUser(): Observable<any> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map((data) => data.attributes));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.sessionService.fetchUserInfo(email)\n      .pipe(map((result) => result.items))\n  }\n\n  createCompanyUserToDynamoDB(registerEmail: string, optionData: OptionData): Observable<CreateUserMutation> {\n    const content: CreateUserInput = {\n      id: `${optionData.companyId}_user_${uuid()}`,\n      email: `${registerEmail}`,\n      companyID: `${optionData.companyId}`,\n      registered: false,\n      authority: false,\n    }\n    return this.memberListService.registerCompanyMembersToDynamoDB(content);\n  }\n\n  fetchCompanyMembers(companyId: string): Observable<Array<CompanyMember>> {\n    return this.memberListService.fetchCompanyMembers(companyId)\n      .pipe(map((result) => result.companyMembers.items));\n  }\n\n  fetchMember(userId: string): Observable<GetUserQuery> {\n    return this.memberListService.fetchMember(userId)\n  }\n\n  /**\n * Current UserのIconのURLを取得\n * @param currentUser CurrentのIconImage\n * @returns 型IconImageからImageのURLを返す\n */\n  modifiedAvatarIconUrl(currentUserIcon: IconImage | null): Observable<string | null> {\n    return of(currentUserIcon)\n      .pipe(concatMap((data) => data ? this.getStorage(data) : of(null)))\n  }\n\n  setCompanyMembers(members: Array<CompanyMember>, currentUserId: string): Observable<Array<CompanyMember>> {\n    return from(members)\n      .pipe(filter((item) => item.id !== currentUserId))\n      .pipe(toArray());\n  }\n\n  getStorage(dataKey?: IconImage): Observable<any> {\n    return from(Storage.get(dataKey.key));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "memberListService",
                        "type": "MemberListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "memberListService",
                        "type": "MemberListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemberListService",
            "id": "injectable-MemberListService-0dff4dd7850bfe3c4cd9f096460dfe83",
            "file": "src/app/pages/member-list/service/member-list.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchCompanyMembers",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetCompanyQuery>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMember",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerCompanyMembersToDynamoDB",
                    "args": [
                        {
                            "name": "content",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CreateUserInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendRegisterCompanyMembers",
                    "args": [
                        {
                            "name": "registerEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "optionData",
                            "type": "OptionData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerEmail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "optionData",
                            "type": "OptionData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { API } from 'aws-amplify';\nimport { AmplifyService, CreateUserInput, CreateUserMutation, GetCompanyQuery, GetUserQuery } from 'src/app/shared/service/amplify.service';\nimport { OptionData } from '../models/member-list.interface';\n\nconst apiSendInvite = 'authSendEmail';\nconst pathRegisterInvite = '/register/member';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemberListService {\n\n  constructor(\n    private readonly amplifyService: AmplifyService,\n  ) { }\n\n  // 対象ユーザーに招待メールを送信する\n  sendRegisterCompanyMembers(registerEmail: string, optionData: OptionData): Observable<any> {\n    const requestContent = {\n      body: {\n        email: `${registerEmail}`,\n        companyId: `${optionData.companyId}`,\n        companyName: `${optionData.companyName}`,\n        officerName: `${optionData.officerName}`,\n      }\n    }\n    return from(API.post(apiSendInvite, pathRegisterInvite, requestContent));\n  }\n\n  // 招待を送ったユーザーをリストに表示させておく\n  registerCompanyMembersToDynamoDB(content: CreateUserInput): Observable<CreateUserMutation> {\n    return from(this.amplifyService.CreateUser(content));\n  }\n\n  fetchCompanyMembers(companyId: string): Observable<GetCompanyQuery> {\n    return from(this.amplifyService.GetCompany(companyId));\n  }\n\n  fetchMember(userId: string): Observable<GetUserQuery> {\n    return from(this.amplifyService.GetUser(userId));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OwnTaskLogic",
            "id": "injectable-OwnTaskLogic-0d195b64426180ab0869dd73ca54351e",
            "file": "src/app/pages/own-task/logic/own-task.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CurrentUser>>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchRoomInfo",
                    "args": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterExceptDoneTask",
                    "args": [
                        {
                            "name": "itemsArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemsArray",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTaskChargeItems",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeOwnTaskItems",
                    "args": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomInfo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomInfo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTaskPerRoom",
                    "args": [
                        {
                            "name": "arrayTask",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arrayTask",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDoneTaskItem",
                    "args": [
                        {
                            "name": "taskFormItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskFormItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable, concat, of } from 'rxjs';\nimport { concatMap, map, toArray, filter, groupBy } from 'rxjs/operators';\nimport { SessionService } from 'src/app/shared/service/session.service';\nimport { OwnTaskService } from '../service/own-task.service';\nimport { ListUsersQuery } from 'src/app/shared/service/amplify.service';\nimport { CurrentUser } from '../model/own-task.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OwnTaskLogic {\n\n  constructor(\n    private readonly ownTaskService: OwnTaskService,\n    private readonly sessionService: SessionService,\n  ) { }\n\n  fetchCurrentUser(): Observable<any> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map((res) => res.attributes));\n  }\n\n  getTaskChargeItems(userId: string): Observable<any> {\n    return this.ownTaskService.getUserInfo(userId)\n      .pipe(map((result) => result.chargeTask));\n  }\n\n  setTaskPerRoom(arrayTask): Observable<any> {\n    return from(arrayTask)\n      .pipe(concatMap((taskItem) => this.fetchRoomInfo(taskItem)))\n      .pipe(toArray());\n  }\n\n  fetchRoomInfo(taskItem): Observable<any> {\n    return this.ownTaskService.fetchRoomInfoItem(taskItem)\n      .pipe(filter((result) => result !== null))\n      .pipe(concatMap((roomInfo) => this.makeOwnTaskItems(taskItem, roomInfo)))\n  }\n\n  makeOwnTaskItems(taskItem, roomInfo): Observable<any> {\n    return of({\n      task: taskItem,\n      room: roomInfo,\n    });\n  }\n\n  filterExceptDoneTask(itemsArray): Observable<any> {\n    return from(itemsArray.filter(item => item.task.status < 10))\n      .pipe(toArray());\n  }\n\n  updateDoneTaskItem(taskFormItem, status: number): Observable<any> {\n    const content = {\n      id: taskFormItem.task.id,\n      status: status,\n    };\n    return this.ownTaskService.updateTaskItem(content);\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.sessionService.fetchUserInfo(email).pipe(map((result) => result.items));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ownTaskService",
                        "type": "OwnTaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "ownTaskService",
                        "type": "OwnTaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OwnTaskService",
            "id": "injectable-OwnTaskService-89daab073e5d9b32fc1631f8dda21a30",
            "file": "src/app/pages/own-task/service/own-task.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchRoomInfoItem",
                    "args": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskItem",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport { AmplifyService, UpdateTaskMutation } from 'src/app/shared/service/amplify.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OwnTaskService {\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) { }\n\n  getUserInfo(userId: string): Observable<any> {\n    return from(this.amplifyService.GetUser(userId));\n  }\n\n  fetchRoomInfoItem(taskItem): Observable<any> {\n    const roomId: string = taskItem.roomID;\n    return from(this.amplifyService.GetRoom(roomId));\n  }\n\n  updateTaskItem(content): Observable<UpdateTaskMutation> {\n    return from(this.amplifyService.UpdateTask(content));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RegistrationCompanyLogic",
            "id": "injectable-RegistrationCompanyLogic-c65f3717543f7db39b787422cab66fca",
            "file": "src/app/pages/registration-company/logic/registration-company.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createCompanyMembersToDynamoDb",
                    "args": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "officerArray",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "officerArray",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyInfo",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListCompanysQuery>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTokenから会社情報を取得します\n",
                    "description": "<p>Tokenから会社情報を取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 808,
                                "end": 813,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 802,
                                "end": 807,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>OneTimePassword token</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 842,
                                "end": 849,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>TokenとマッチするCompanyの情報</p>\n"
                        }
                    ]
                },
                {
                    "name": "isValidOneTimePassword",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToken値が正であるか判断します\n",
                    "description": "<p>Token値が正であるか判断します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1668,
                                "end": 1673,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1662,
                                "end": 1667,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>One time token</p>\n"
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1693,
                                "end": 1700,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>ParamもTokenは正しいか間違いかを返します</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "registrationUserOfficer",
                    "args": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendToOfficerForRegister",
                    "args": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "officerArray",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "officerArray",
                            "type": "Array<literal type>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCompanyInfo",
                    "args": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "companyFormValue",
                            "type": "CompanyRegister",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateCompanyInput>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyInfo",
                            "type": "Company",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "companyFormValue",
                            "type": "CompanyRegister",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport { concatMap, map } from 'rxjs/operators';\nimport { Company, ListCompanysQuery, ModelCompanyFilterInput, UpdateCompanyInput, CreateUserInput } from 'src/app/shared/service/amplify.service';\nimport { CompanyRegister } from '../interface/company-register.interface';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { RegistrationCompanyService } from '../service/registration-company.service';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationCompanyLogic {\n\n  constructor(\n    private registerCompanyService: RegistrationCompanyService,\n    private sessionService: SessionService,\n  ) { }\n\n  /**\n   * Tokenから会社情報を取得します\n   * @param token OneTimePassword token\n   * @returns TokenとマッチするCompanyの情報\n   */\n  fetchCompanyInfo(token: string): Observable<ListCompanysQuery> {\n    const requestContent: ModelCompanyFilterInput = {\n      otp: { eq: token },\n    }\n    return this.registerCompanyService.fetchCompanyInfo(requestContent);\n  }\n\n  updateCompanyInfo(companyInfo: Company, companyFormValue: CompanyRegister): Observable<UpdateCompanyInput> {\n    let requestContent: UpdateCompanyInput;\n    requestContent = {\n      id: companyInfo.id,\n      name: companyFormValue.companyName,\n      officer: companyFormValue.companyOfficer,\n      isRegistered: true,\n      tel: companyFormValue.companyTel,\n      officialEmail: companyFormValue.companyEmail,\n      iconCompany: null,\n    }\n    return this.registerCompanyService.updateCompanyInfo(requestContent);\n  }\n\n  /**\n * Token値が正であるか判断します\n * @param token One time token\n * @returns {boolean} ParamもTokenは正しいか間違いかを返します\n */\n  isValidOneTimePassword(token: string, companyId: string): Observable<any> {\n    return this.registerCompanyService.isValidOTP(token, companyId);\n  }\n\n  registrationUserOfficer(companyInfo: Company): Observable<any> {\n    return of({});\n  }\n\n  sendToOfficerForRegister(companyInfo: Company, officerArray: Array<{ officerName: string, officerEmail: string }>): Observable<any> {\n    return from(officerArray)\n      .pipe(concatMap((officer) => this.registerCompanyService.sendEmailOfficerForRegister(companyInfo.id, officer)));\n  }\n\n  createCompanyMembersToDynamoDb(companyInfo: Company, officerArray: Array<{ officerName: string, officerEmail: string }>): Observable<any> {\n    return from(officerArray)\n      .pipe(concatMap((officer) => this.registerCompanyService.createUserToDynamoDb(companyInfo.id, officer)))\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "registerCompanyService",
                        "type": "RegistrationCompanyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "registerCompanyService",
                        "type": "RegistrationCompanyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RegistrationCompanyService",
            "id": "injectable-RegistrationCompanyService-376e8d74ff1bd064db8351bd69673d20",
            "file": "src/app/pages/registration-company/service/registration-company.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUserToDynamoDb",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "officer",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateUserMutation>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "officer",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyInfo",
                    "args": [
                        {
                            "name": "requestContent",
                            "type": "ModelCompanyFilterInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListCompanysQuery>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestContent",
                            "type": "ModelCompanyFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidOTP",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type | literal type>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTokenが正であるのか確認し結果を返します\n",
                    "description": "<p>Tokenが正であるのか確認し結果を返します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1047,
                                "end": 1052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1041,
                                "end": 1046,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>One time password token</p>\n"
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1083,
                                "end": 1090,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>結果を返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "sendEmailOfficerForRegister",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "officer",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "officer",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCompanyInfo",
                    "args": [
                        {
                            "name": "requestContent",
                            "type": "UpdateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateCompanyMutation>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestContent",
                            "type": "UpdateCompanyInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { AmplifyService, ListCompanysQuery, ModelCompanyFilterInput, UpdateCompanyInput, UpdateCompanyMutation, CreateUserInput, CreateUserMutation } from 'src/app/shared/service/amplify.service';\nimport { API } from 'aws-amplify';\nimport { v4 as uuid } from 'uuid';\n\nconst apiVerifyOTP = 'verifyotp';\nconst pathCheckVerify = '/verify-otp/check';\n\nconst apiSendEmail = 'authSendEmail';\nconst pathRegisterOfficer = '/register/officer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationCompanyService {\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) { }\n\n  fetchCompanyInfo(requestContent: ModelCompanyFilterInput): Observable<ListCompanysQuery> {\n    return from(this.amplifyService.ListCompanys(requestContent));\n  }\n\n  updateCompanyInfo(requestContent: UpdateCompanyInput): Observable<UpdateCompanyMutation> {\n    return from(this.amplifyService.UpdateCompany(requestContent));\n  }\n\n  /**\n   * Tokenが正であるのか確認し結果を返します\n   * @param token One time password token\n   * @returns 結果を返します\n   */\n  isValidOTP(token: string, companyId: string): Observable<{} | { error: string, message: string }> {\n    const requestContent = {\n      body: {\n        token: token,\n        companyId: companyId,\n      }\n    }\n    return from(API.post(apiVerifyOTP, pathCheckVerify, requestContent));\n  }\n\n  sendEmailOfficerForRegister(companyId: string, officer: { officerName: string, officerEmail: string }): Observable<any> {\n    const requestContent = {\n      body: {\n        companyId: companyId,\n        name: officer.officerName,\n        email: officer.officerEmail,\n      }\n    }\n    return from(API.post(apiSendEmail, pathRegisterOfficer, requestContent));\n  }\n  // CreateUserMutation\n  createUserToDynamoDb(companyId: string, officer: { officerName: string, officerEmail: string }): Observable<CreateUserMutation> {\n    const requestContent: CreateUserInput = {\n      id: `${uuid()}`,\n      username: `${officer.officerName}`,\n      email: `${officer.officerEmail}`,\n      companyID: companyId,\n      registered: false, // Cognitoに登録しているかいないかで分けるか\n    }\n    return from(this.amplifyService.CreateUser(requestContent));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RoomMemberService",
            "id": "injectable-RoomMemberService-6e5694782df904dde6f8cc471f0004d8",
            "file": "src/app/pages/room-members/service/room-member.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUserRoomGroup",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRoomGroupsItem",
                    "args": [
                        {
                            "name": "roomGroupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomGroupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRoomItem",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyMember",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomGroupsId",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "ModelRoomGroupFilterInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMember",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateRoomMemberListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRoomMemberListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomMemberListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { AmplifyService, ListRoomGroupsQuery, ModelRoomGroupFilterInput, ModelUserFilterInput, ListUsersQuery } from '../../../shared/service/amplify.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoomMemberService {\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) { }\n\n  fetchCompanyMember(content): Observable<any> {\n    return from(this.amplifyService.ListUsers(content));\n  }\n\n  fetchRoomMember(filterContent?): Observable<ListRoomGroupsQuery> {\n    return from(this.amplifyService.ListRoomGroups(filterContent));\n  }\n\n  createUserRoomGroup(filterContent): Observable<any> {\n    return from(this.amplifyService.CreateRoomGroup(filterContent));\n  }\n\n  fetchCurrentUser(currentUserId: string): Observable<any> {\n    return from(this.amplifyService.GetUser(currentUserId))\n  }\n\n  deleteRoomItem(roomId: string): Observable<any> {\n    const requestContent = {\n      id: roomId\n    }\n    return from(this.amplifyService.DeleteRoom(requestContent));\n  }\n\n  fetchRoomGroupsId(filterContent: ModelRoomGroupFilterInput): Observable<any> {\n    return from(this.amplifyService.ListRoomGroups(filterContent));\n  }\n\n  deleteRoomGroupsItem(roomGroupId: string): Observable<any> {\n    const requestContent = {\n      id: roomGroupId\n    }\n    return from(this.amplifyService.DeleteRoomGroup(requestContent));\n  }\n\n  fetchUserInfo(email: string): Observable<ListUsersQuery> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`,\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n\n  onCreateRoomMemberListener(): any {\n    return this.amplifyService.OnCreateRoomGroupListener;\n  }\n\n  onUpdateRoomMemberListener(): any {\n    return this.amplifyService.OnUpdateRoomGroupListener;\n  }\n\n  onDeleteRoomMemberListener(): any {\n    return this.amplifyService.OnDeleteRoomGroupListener;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RoomMembersLogic",
            "id": "injectable-RoomMembersLogic-be0f32a6a3fe2408f4ff2fa7ddfb0c00",
            "file": "src/app/pages/room-members/logic/room-members.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteRoomItem",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CurrentUser>>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyMember",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryFilterUser",
                            "type": "Array<InterfaceRoomMembers>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryFilterUser",
                            "type": "Array<InterfaceRoomMembers>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Attribute>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchNonAssignRoomMemberGroup",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomGroupsId",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMemberGroup",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<RoomGroupItems>>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMembers",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMembersExceptOwn",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateRoomMemberListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRoomMemberListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomMemberListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeOwnFromRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRoomMembers",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<RoomGroupItems>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<RoomGroupUser>>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n自分以外のメンバーを取得します\n",
                    "description": "<p>自分以外のメンバーを取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2872,
                                "end": 2877,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "items"
                            },
                            "type": "Array<RoomGroupItems>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2866,
                                "end": 2871,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>RoomGroupMember</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2906,
                                "end": 2919,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "currentUserId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2900,
                                "end": 2905,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>自分自身のID</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2934,
                                "end": 2941,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>配列でRoomGroupUserを返す</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport { filter, map, toArray, concatMap } from 'rxjs/operators';\nimport { SessionService } from 'src/app/shared/service/session.service';\nimport { ListUsersQuery } from 'src/app/shared/service/amplify.service';\nimport { RoomMemberService } from '../service/room-member.service';\nimport { InterfaceRoomMembers } from '../interface/room-members.interface';\nimport { ListRoomMembersInfo, ListUserInfo, Attribute, RoomGroupItems, RoomGroupUser, CurrentUser } from '../models/room-members.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoomMembersLogic {\n\n  constructor(\n    private readonly roomMemberService: RoomMemberService,\n    private readonly sessionService: SessionService,\n  ) { }\n\n  fetchCompanyMember(companyId: number | string, queryFilterUser?: Array<InterfaceRoomMembers>): Observable<any> {\n    const contentObject = {\n      companyID: {\n        eq: `${companyId}`\n      },\n    }\n    if (queryFilterUser === undefined) {\n      return this.roomMemberService.fetchCompanyMember(contentObject);\n    } else {\n      return of({});\n    }\n  };\n\n  fetchRoomMemberGroup(roomId: string): Observable<Array<RoomGroupItems>> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`\n      }\n    }\n    return this.roomMemberService.fetchRoomMember(filterContent)\n      .pipe(map((result) => result.items));\n  }\n\n  fetchRoomMembers(roomId: string, currentUserId?: string): Observable<any> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`\n      },\n    }\n    return this.roomMemberService.fetchRoomMember(filterContent)\n  }\n\n  fetchRoomMembersExceptOwn(roomId: string, currentUserId: string): Observable<any> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`\n      },\n      userID: {\n        ne: `${currentUserId}`\n      }\n    }\n    return this.roomMemberService.fetchRoomMember(filterContent)\n      .pipe(map((result) => result.items));\n  }\n\n  deleteRoomItem(roomId: string): Observable<any> {\n    return this.roomMemberService.deleteRoomItem(roomId);\n  }\n\n  removeOwnFromRoom(roomId: string, currentUserId: string): Observable<any> {\n    return this.fetchRoomGroupsId(roomId, currentUserId)\n      .pipe(concatMap((roomGroupId) => this.roomMemberService.deleteRoomGroupsItem(roomGroupId)));\n  }\n\n  fetchRoomGroupsId(roomId, currentUserId): Observable<string> {\n    const filterContent = {\n      roomID: {\n        eq: roomId,\n      },\n      userID: {\n        eq: currentUserId,\n      }\n    }\n    return this.roomMemberService.fetchRoomGroupsId(filterContent)\n      .pipe(map(({ items: groups }) => groups[0].id))\n  }\n\n  fetchNonAssignRoomMemberGroup(roomId?: string): Observable<any> {\n    return this.roomMemberService.fetchRoomMember()\n      .pipe(map(({ items }) => items));\n  }\n\n  /**\n   * 自分以外のメンバーを取得します\n   * @param items RoomGroupMember\n   * @param currentUserId 自分自身のID\n   * @returns 配列でRoomGroupUserを返す\n   */\n  setRoomMembers(items: Array<RoomGroupItems>, currentUserId: string): Observable<Array<RoomGroupUser>> {\n    return from(items)\n      .pipe(filter((item) => item.userID !== currentUserId))\n      .pipe(map((result) => result.user))\n      .pipe(toArray());\n  }\n\n  fetchCurrentUser(): Observable<Attribute> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map(data => data.attributes));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.roomMemberService.fetchUserInfo(email).pipe(map((result) => result.items));\n  }\n\n  onCreateRoomMemberListener(): any {\n    return this.roomMemberService.onCreateRoomMemberListener();\n  }\n\n  onUpdateRoomMemberListener(): any {\n    return this.roomMemberService.onUpdateRoomMemberListener();\n  }\n\n  onDeleteRoomMemberListener(): any {\n    return this.roomMemberService.onDeleteRoomMemberListener();\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "roomMemberService",
                        "type": "RoomMemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "roomMemberService",
                        "type": "RoomMemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-56dfb3a24d9430be1970d51a0a4dc25d",
            "file": "src/app/shared/service/session.service.ts",
            "properties": [
                {
                    "name": "loggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "confirmSignUp",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entryUserSignup",
                    "args": [
                        {
                            "name": "valueObj",
                            "type": "IArgsEntrySignup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "valueObj",
                            "type": "IArgsEntrySignup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resendConfirmNumberForSignUp",
                    "args": [
                        {
                            "name": "username",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "userLogin",
                    "args": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Auth } from \"aws-amplify\";\nimport { Observable, from, BehaviorSubject, of } from \"rxjs\";\nimport { map, tap, catchError } from \"rxjs/operators\";\nimport { IArgsEntrySignup } from \"../model/task-form.model\";\nimport { AmplifyService, ModelUserFilterInput, ListUsersQuery } from './amplify.service';\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SessionService {\n  loggedIn: BehaviorSubject<boolean>;\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) {\n    this.loggedIn = new BehaviorSubject<boolean>(false);\n  }\n\n  entryUserSignup(valueObj: IArgsEntrySignup, companyId?: string): Observable<string> {\n    return from(Auth.signUp(valueObj))\n      .pipe(map(() => 'Success'))\n      .pipe(catchError(() => 'Denied'));\n  }\n\n  isAuthenticated(): Observable<boolean> {\n    return from(Auth.currentAuthenticatedUser()).pipe(\n      map(() => {\n        this.loggedIn.next(true);\n        return true;\n      }),\n      catchError(() => {\n        this.loggedIn.next(false);\n        return of(false);\n      })\n    );\n  }\n\n  confirmSignUp(username: string, code: string): Observable<void> {\n    return from(Auth.confirmSignUp(username, code));\n  }\n\n  resendConfirmNumberForSignUp(username): Observable<string> {\n    return from(Auth.resendSignUp(username));\n  }\n\n  userLogin(email, password): Observable<void> {\n    return from(Auth.signIn(email, password))\n      .pipe(tap(() => this.loggedIn.next(true)));\n  }\n\n  fetchCurrentUser(): Observable<any> {\n    return from(Auth.currentAuthenticatedUser());\n  }\n\n  fetchUserInfo(email: string): Observable<ListUsersQuery> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n\n  signOut() {\n    return from(Auth.signOut())\n      .pipe(tap(() => this.loggedIn.next(false)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SettingLogic",
            "id": "injectable-SettingLogic-61532b3ae7b09d5104d6ca61f96a9b9d",
            "file": "src/app/pages/setting/logic/setting.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "dataKey",
                            "type": "IconImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataKey",
                            "type": "IconImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modifiedAvatarIconUrl",
                    "args": [
                        {
                            "name": "currentUserIcon",
                            "type": "IconImage | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCurrent UserのIconのURLを取得\n",
                    "description": "<p>Current UserのIconのURLを取得</p>\n",
                    "jsdoctags": [
                        {
                            "name": "currentUserIcon",
                            "type": "IconImage | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1268,
                                "end": 1275,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>型IconImageからImageのURLを返す</p>\n"
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, of, Observable } from 'rxjs';\nimport { map, filter, concatMap } from 'rxjs/operators';\nimport { Storage } from 'aws-amplify';\nimport { CreateRoomGroupMutation, CreateRoomMutation, CreateUserMutation, DeleteRoomMutation, ListUsersQuery, ModelRoomGroupFilterInput, S3Object, User } from 'src/app/shared/service/amplify.service';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { SettingService } from '../service/setting.service';\nimport { GetUserQuery } from 'src/app/shared/service/amplify.service';\nimport { IconImage } from '../interface/setting.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingLogic {\n\n  constructor(\n    private readonly sessionService: SessionService,\n    private readonly settingService: SettingService,\n  ) { }\n\n  signOut(): Observable<any> {\n    return this.sessionService.signOut();\n  }\n\n  fetchCurrentUser(): Observable<any> {\n    return this.sessionService.fetchCurrentUser().pipe(map((result) => result.attributes));\n  }\n\n  fetchUserInfo(userId: string): Observable<GetUserQuery> {\n    return this.settingService.fetchUserInfo(userId);\n  }\n\n  /**\n   * Current UserのIconのURLを取得\n   * @param currentUser CurrentのIconImage\n   * @returns 型IconImageからImageのURLを返す\n   */\n  modifiedAvatarIconUrl(currentUserIcon: IconImage | null): Observable<string | null> {\n    return of(currentUserIcon)\n      .pipe(concatMap((data) => data !== null ? this.getStorage(data) : of(null)))\n  }\n\n  getStorage(dataKey: IconImage): Observable<any> {\n    return from(Storage.get(dataKey.key));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<ListUsersQuery> {\n    return this.settingService.fetchAnyUserInfoFromList(email);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "settingService",
                        "type": "SettingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "settingService",
                        "type": "SettingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SettingService",
            "id": "injectable-SettingService-62d5b072f4d4db3df446ede8f02b688f",
            "file": "src/app/pages/setting/service/setting.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { AmplifyService, GetUserQuery, ListUsersQuery, ModelUserFilterInput } from '../../../shared/service/amplify.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingService {\n\n  constructor(\n    private readonly amplifyService: AmplifyService,\n  ) { }\n\n  fetchUserInfo(userId: string): Observable<GetUserQuery> {\n    return from(this.amplifyService.GetUser(userId));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<ListUsersQuery> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`,\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SignupLogic",
            "id": "injectable-SignupLogic-a96a3b3878ab28d000f0dba307fda4d7",
            "file": "src/app/pages/signup/logic/signup.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "entrySignupUser",
                    "args": [
                        {
                            "name": "value",
                            "type": "InterfaceSignup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "InterfaceSignup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SessionService } from '../../../shared/service/session.service';\nimport { Observable } from 'rxjs';\nimport { InterfaceSignup } from 'src/app/interfaces/signup.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignupLogic {\n\n  constructor(\n    private sessionService: SessionService,\n  ) { }\n\n  entrySignupUser(value: InterfaceSignup): Observable<string> {\n    const signupContent = {\n      username: value.email,\n      password: value.passwordform,\n      attributes: {\n        name: value.name,\n        email: value.email,\n      }\n    }\n    return this.sessionService.entryUserSignup(signupContent);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskDetailLogic",
            "id": "injectable-TaskDetailLogic-ecfc27613744abfdbc07f711742752e9",
            "file": "src/app/pages/task-detail/logic/task-detail.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "base64toBlob",
                    "args": [
                        {
                            "name": "base64data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMessage",
                    "args": [
                        {
                            "name": "data",
                            "type": "UpdateTaskMutation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "argContent",
                            "type": "string | IsMessageContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UpdateTaskMutation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "argContent",
                            "type": "string | IsMessageContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMessageContent",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "argContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MessageContent>",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "argContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetTaskQuery>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n任意のタスクの詳細情報を取得します\n",
                    "description": "<p>任意のタスクの詳細情報を取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1150,
                                "end": 1156,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1144,
                                "end": 1149,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>TaskIDです</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1172,
                                "end": 1179,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型で Taskの詳細情報を返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserIconUrl",
                    "args": [
                        {
                            "name": "item",
                            "type": "TaskByCreatedAtItems",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskByCreatedAtItems>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUserのImageIconのURLを取得して、MessageItems内のauthorIconWithUrlに格納します\n",
                    "description": "<p>UserのImageIconのURLを取得して、MessageItems内のauthorIconWithUrlに格納します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2147,
                                "end": 2151,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "TaskByCreatedAtItems",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2141,
                                "end": 2146,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>昇降順になっているMessage Item</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2180,
                                "end": 2187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>TaskByCreatedAtItemsになっているItemを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CurrentUser>>",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CurrentUserInfo>",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nログイン済みのユーザーIDを取得します\n",
                    "description": "<p>ログイン済みのユーザーIDを取得します</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 5768,
                                "end": 5775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でCurrentUserInfoを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchMakeAttachmentUrl",
                    "args": [
                        {
                            "name": "attachmentItem",
                            "type": "Array<S3Object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<string>>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMessage内のAttachmentのURLを取得します\n",
                    "description": "<p>Message内のAttachmentのURLを取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3153,
                                "end": 3167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "attachmentItem"
                            },
                            "type": "Array<S3Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3136,
                                "end": 3141,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>Message内の添付ファイル情報の配列です</p>\n",
                            "typeExpression": {
                                "pos": 3142,
                                "end": 3152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 3143,
                                    "end": 3151,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 3143,
                                        "end": 3151,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "S3Object"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3197,
                                "end": 3204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>AttachmentのURLを取得し、配列で返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchMemberListOnRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRoomのメンバーを取得します\n",
                    "description": "<p>Roomのメンバーを取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6544,
                                "end": 6550,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "roomId"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6538,
                                "end": 6543,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>roomId</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6564,
                                "end": 6571,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でfetchRoomMemberを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchMessagePerTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskByCreatedAtQuery>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nタスクあたりのMessageを返します\n",
                    "description": "<p>タスクあたりのMessageを返します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1378,
                                "end": 1384,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1372,
                                "end": 1377,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>TaskIDです</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1400,
                                "end": 1407,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型で タスクあたりのMessageを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fileDelete",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileRead",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ReadFileResult>",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileWrite",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileData",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WriteFileResult>",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileData",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContentType",
                    "args": [
                        {
                            "name": "base64Data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64Data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDirString",
                    "args": [
                        {
                            "name": "dt",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dt",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeAttachmentUrl",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<TaskByCreatedAtItems>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Array<string | null>>>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMessage内Attachmentが存在するItemに対してAttachmentのURLを取得します\n",
                    "description": "<p>Message内Attachmentが存在するItemに対してAttachmentのURLを取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2732,
                                "end": 2737,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "items"
                            },
                            "type": "Array<TaskByCreatedAtItems>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2726,
                                "end": 2731,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>配列でType: Messageを取得します。</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2768,
                                "end": 2775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型で AttachmentのUrlを返します。</p>\n"
                        }
                    ]
                },
                {
                    "name": "makeExt",
                    "args": [
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeMessageAuthorImageUrl",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<TaskByCreatedAtItems>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<TaskByCreatedAtItems>>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMessageを送信したAuthorのImageUrlを取得します\n",
                    "description": "<p>Messageを送信したAuthorのImageUrlを取得します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1646,
                                "end": 1651,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "items"
                            },
                            "type": "Array<TaskByCreatedAtItems>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1640,
                                "end": 1645,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>昇降順になっているMessage Items</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1681,
                                "end": 1688,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>昇降順になっているMessageItems(authorIconWithUrlも含まれる)</p>\n"
                        }
                    ]
                },
                {
                    "name": "makeS3Object",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IS3Object>",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ns3Objectに当てはまるように整形します\n",
                    "description": "<p>s3Objectに当てはまるように整形します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5141,
                                "end": 5144,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5135,
                                "end": 5140,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>s3保存時に返されるKey値</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5166,
                                "end": 5173,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でIS3Objectを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "modifiedMessageItems",
                    "args": [
                        {
                            "name": "arrayAttachmentUrl",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resultMessage",
                            "type": "Array<IMessageWithAttachUrl>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<IMessageWithAttachUrl>>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMessage内にAttachment情報を入れて成形します\n",
                    "description": "<p>Message内にAttachment情報を入れて成形します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3512,
                                "end": 3530,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "arrayAttachmentUrl"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3506,
                                "end": 3511,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>配列のAttachmentのURL</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3592,
                                "end": 3605,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "resultMessage"
                            },
                            "type": "Array<IMessageWithAttachUrl>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3555,
                                "end": 3560,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>配列のMessage</p>\n",
                            "typeExpression": {
                                "pos": 3561,
                                "end": 3591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 302,
                                "type": {
                                    "pos": 3562,
                                    "end": 3590,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 174,
                                    "typeName": {
                                        "pos": 3562,
                                        "end": 3567,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 78,
                                        "escapedText": "Array"
                                    },
                                    "typeArguments": [
                                        {
                                            "pos": 3568,
                                            "end": 3589,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 1,
                                            "kind": 174,
                                            "typeName": {
                                                "pos": 3568,
                                                "end": 3589,
                                                "flags": 4194304,
                                                "modifierFlagsCache": 0,
                                                "transformFlags": 0,
                                                "kind": 78,
                                                "escapedText": "IMessageWithAttachUrl"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3623,
                                "end": 3630,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Message内に AttachmentとAttachmentWithUrlを入れて返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "onCreateMessageListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n新規で作られたMessageをSubscribeします\nObservable<OnCreateMessageSubscription>\n",
                    "description": "<p>新規で作られたMessageをSubscribeします\nObservable<OnCreateMessageSubscription></p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 5587,
                                "end": 5594,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でonMessageListenerを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "putStorage",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "blobFile",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "blobFile",
                            "type": "Blob",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendNewMessage",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageContent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "arrayAttachment",
                            "type": "Array<IS3Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMessage（コメントを新規で作成します）\n",
                    "description": "<p>Message（コメントを新規で作成します）</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4417,
                                "end": 4423,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4411,
                                "end": 4416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>TaskID</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4443,
                                "end": 4457,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "messageContent"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4437,
                                "end": 4442,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>messageContent</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4485,
                                "end": 4491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4479,
                                "end": 4484,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>userId</p>\n"
                        },
                        {
                            "name": "arrayAttachment",
                            "type": "Array<IS3Object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 4555,
                                "end": 4562,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でcreateMessageItemを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTaskItem",
                    "args": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n任意のタスクの情報をアップデートします\n",
                    "description": "<p>任意のタスクの情報をアップデートします</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4067,
                                "end": 4075,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "taskItem"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4061,
                                "end": 4066,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>TaskItemのObject</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4104,
                                "end": 4110,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "status"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4098,
                                "end": 4103,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>TaskItemのObject</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4133,
                                "end": 4140,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型で updateTaskItemを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTaskToRoom",
                    "args": [
                        {
                            "name": "dismissData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n任意のRoomにTaskを追加します\n",
                    "description": "<p>任意のRoomにTaskを追加します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6011,
                                "end": 6022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "dismissData"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6005,
                                "end": 6010,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>dismissData</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6047,
                                "end": 6053,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "taskId"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6041,
                                "end": 6046,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>taskId</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6067,
                                "end": 6074,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でupdateTaskItemを返します</p>\n"
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "arrayBase64Data",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IImageFile>",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nS3にアップロードするロジックです。\n",
                    "description": "<p>S3にアップロードするロジックです。</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6874,
                                "end": 6889,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "arrayBase64Data"
                            },
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6868,
                                "end": 6873,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>配列型のBase64Dataを渡します。</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6923,
                                "end": 6929,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "taskId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6917,
                                "end": 6922,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>タスクのIDを渡します。</p>\n"
                        },
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 6949,
                                "end": 6956,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable型でS3から返ってきた値を返します。</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, from, of } from 'rxjs';\nimport { concatMap, map, toArray } from 'rxjs/operators';\nimport { Storage } from 'aws-amplify';\nimport { v4 as uuid } from 'uuid';\nimport { SessionService } from 'src/app/shared/service/session.service';\nimport { CurrentUserInfo } from '../../task/interface/current-user-info.interface';\nimport { TaskDetailService } from '../service/task-detail.service';\nimport { Filesystem, Directory, Encoding, ReadFileResult, WriteFileResult } from '@capacitor/filesystem';\nimport { CreateMessageInput, GetTaskQuery, S3Object, TaskByCreatedAtQuery, UpdateTaskMutation } from 'src/app/shared/service/amplify.service';\nimport { IImageFile, IS3Object, IsMessageContent, IMessageWithAttachUrl, MessageContent, TaskByCreatedAtItems, CurrentUser } from '../models/task-detail.interface';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskDetailLogic {\n\n  constructor(\n    private taskDetailService: TaskDetailService,\n    private sessionService: SessionService,\n  ) { }\n\n  /**\n   * 任意のタスクの詳細情報を取得します\n   * @param taskId TaskIDです\n   * @returns Observable型で Taskの詳細情報を返します\n   */\n  fetchAnyTask(taskId: string): Observable<GetTaskQuery> {\n    return from(this.taskDetailService.getTask(taskId));\n  }\n\n  /**\n   * タスクあたりのMessageを返します\n   * @param taskId TaskIDです\n   * @returns Observable型で タスクあたりのMessageを返します\n   */\n  fetchMessagePerTask(taskId: string): Observable<TaskByCreatedAtQuery> {\n    return this.taskDetailService.fetchMessagePerTask(taskId);\n  }\n\n  /**\n   * Messageを送信したAuthorのImageUrlを取得します\n   * @param items 昇降順になっているMessage Items\n   * @returns 昇降順になっているMessageItems(authorIconWithUrlも含まれる)\n   */\n  makeMessageAuthorImageUrl(items: Array<TaskByCreatedAtItems>): Observable<Array<TaskByCreatedAtItems>> {\n    let messageItem: TaskByCreatedAtItems;\n    return from(items)\n      .pipe(map((result) => messageItem = result))\n      .pipe(concatMap(() => this.fetchAnyUserIconUrl(messageItem)))\n      .pipe(toArray());\n  }\n\n  /**\n   * UserのImageIconのURLを取得して、MessageItems内のauthorIconWithUrlに格納します\n   * @param item 昇降順になっているMessage Item\n   * @returns TaskByCreatedAtItemsになっているItemを返します\n   */\n  fetchAnyUserIconUrl(item: TaskByCreatedAtItems): Observable<TaskByCreatedAtItems> {\n    let messageWithAttachUrl: TaskByCreatedAtItems = item;\n    return this.taskDetailService.fetchUserIconKey(item.authorID)\n      .pipe(concatMap((iconKey) => iconKey !== '' ? this.getStorage(iconKey) : of('')))\n      .pipe(map((result) => messageWithAttachUrl.authorIconWithUrl = result))\n      .pipe(map(() => messageWithAttachUrl))\n  }\n\n  /**\n   * Message内Attachmentが存在するItemに対してAttachmentのURLを取得します\n   * @param items 配列でType: Messageを取得します。\n   * @returns Observable型で AttachmentのUrlを返します。\n   */\n  makeAttachmentUrl(items: Array<TaskByCreatedAtItems>): Observable<Array<Array<string | null>>> {\n    return from(items)\n      .pipe(concatMap((item) =>\n        item.attachment !== null ? this.fetchMakeAttachmentUrl(item.attachment) : of([])))\n      .pipe(toArray())\n  }\n\n  /**\n   * Message内のAttachmentのURLを取得します\n   * @param {S3Object} attachmentItem Message内の添付ファイル情報の配列です\n   * @returns AttachmentのURLを取得し、配列で返します\n   */\n  fetchMakeAttachmentUrl(attachmentItem: Array<S3Object>): Observable<Array<string>> {\n    return from(attachmentItem)\n      .pipe(concatMap((attachment) => this.getStorage(attachment.key)))\n      .pipe(toArray());\n  }\n\n  /**\n   * Message内にAttachment情報を入れて成形します\n   * @param arrayAttachmentUrl 配列のAttachmentのURL\n   * @param {Array<IMessageWithAttachUrl>} resultMessage 配列のMessage\n   * @returns Message内に AttachmentとAttachmentWithUrlを入れて返します\n   */\n  modifiedMessageItems(arrayAttachmentUrl, resultMessage: Array<IMessageWithAttachUrl>): Observable<Array<IMessageWithAttachUrl>> {\n    let result: Array<IMessageWithAttachUrl> = resultMessage;\n    resultMessage.forEach((el, index) => {\n      result[index].attachmentWithUrl = arrayAttachmentUrl[index];\n    });\n    return of(result);\n  }\n\n  /**\n   * 任意のタスクの情報をアップデートします\n   * @param taskItem TaskItemのObject\n   * @param status TaskItemのObject\n   * @returns Observable型で updateTaskItemを返します\n   */\n  updateTaskItem(taskItem, status): Observable<any> {\n    const content = {\n      id: taskItem.id,\n      status: status,\n    }\n    return this.taskDetailService.updateTaskItem(content);\n  }\n\n  /**\n   * Message（コメントを新規で作成します）\n   * @param taskId TaskID\n   * @param messageContent messageContent\n   * @param userId userId\n   * @param arrayAttachmentUri arrayAttachmentUri\n   * @returns Observable型でcreateMessageItemを返します\n   */\n  sendNewMessage(taskId: string, messageContent: string, userId: string, arrayAttachment?: Array<IS3Object>): Observable<any> {\n    let inputContent: CreateMessageInput = {\n      id: `${taskId}_message_${uuid()}`,\n      authorID: `${userId}`,\n      content: messageContent,\n      taskID: taskId,\n      isSent: true,\n    };\n    if (arrayAttachment !== undefined) {\n      inputContent.attachment = arrayAttachment;\n    }\n    return this.taskDetailService.createMessageItem(inputContent);\n  }\n\n  /**\n   * s3Objectに当てはまるように整形します\n   * @param key s3保存時に返されるKey値\n   * @returns Observable型でIS3Objectを返します\n   */\n  makeS3Object(key: string): Observable<IS3Object> {\n    const region = 'ap-northeast-1';\n    const bucket = environment.bucket;\n    const keyFile = `${key}`;\n    const returnResult = {\n      key: keyFile,\n      region: region,\n      bucket: bucket,\n    }\n    return of(returnResult);\n  }\n\n  /**\n   * 新規で作られたMessageをSubscribeします\n   * Observable<OnCreateMessageSubscription>\n   * @returns Observable型でonMessageListenerを返します\n   */\n  onCreateMessageListener(): any {\n    return this.taskDetailService.onMessageListener();\n  }\n\n  /**\n   * ログイン済みのユーザーIDを取得します\n   * @returns Observable型でCurrentUserInfoを返します\n   */\n  fetchCurrentUserInfo(): Observable<CurrentUserInfo> {\n    return this.sessionService.fetchCurrentUser()\n      .pipe(map((res) => res.attributes));\n  }\n\n  /**\n   * 任意のRoomにTaskを追加します\n   * @param dismissData dismissData\n   * @param taskId taskId\n   * @returns Observable型でupdateTaskItemを返します\n   */\n  updateTaskToRoom(dismissData, taskId): Observable<UpdateTaskMutation> {\n    const content = {\n      id: `${taskId}`,\n      title: `${dismissData.nameItem}`,\n      description: `${dismissData.descriptionItem}`,\n      scheduleDate: `${dismissData.scheduleDateItem}`,\n      chargePersonID: `${dismissData.chargePersonId}`,\n    }\n    return this.taskDetailService.updateTaskItem(content);\n  }\n\n  /**\n   * Roomのメンバーを取得します\n   * @param roomId roomId\n   * @returns Observable型でfetchRoomMemberを返します\n   */\n  fetchMemberListOnRoom(roomId: string | number): Observable<any> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`\n      }\n    }\n    return this.taskDetailService.fetchRoomMember(filterContent);\n  }\n\n  /**\n   * S3にアップロードするロジックです。\n   * @param arrayBase64Data 配列型のBase64Dataを渡します。\n   * @param taskId タスクのIDを渡します。\n   * @returns Observable型でS3から返ってきた値を返します。\n   */\n  uploadFile(arrayBase64Data: Array<any>, taskId: string, currentUserId: string): Observable<IImageFile> {\n    let fileName: string;\n    let base64Data: any;\n    let ext: string;\n    let contentType: string;\n    let uploadFileName: string;\n    const dt = new Date();\n    const dirName = this.getDirString(dt, currentUserId);\n    return from(arrayBase64Data)\n      .pipe(map((base64Result) => base64Data = base64Result))\n      .pipe(concatMap((base64Data) => this.getContentType(base64Data)))\n      .pipe(map((result) => contentType = result))\n      .pipe(concatMap((contentType) => this.makeExt(contentType)))\n      .pipe(map((result) => ext = result))\n      .pipe(map(() => fileName = `attachment_${uuid()}_${taskId}`))\n      .pipe(map(() => uploadFileName = `${dirName}/${fileName}.${ext}`))\n      .pipe(concatMap(() => this.base64toBlob(base64Data, contentType)))\n      .pipe(concatMap((blobFile) => this.putStorage(uploadFileName, blobFile, contentType)))\n  }\n\n  makeExt(contentType: string): Observable<string> {\n    return of(contentType.match(/([^/]+?)?$/)[0]);\n  }\n\n  putStorage(fileName: string, blobFile: Blob, contentType: string): Observable<any> {\n    return from(Storage.put(\n      fileName,\n      blobFile,\n      {\n        contentType: contentType,\n      }\n    ));\n  }\n\n  getStorage(fileName: string): Observable<any> {\n    return from(Storage.get(fileName))\n  }\n\n  getDirString(dt: Date, currentUserId: string): string {\n    return \"\" + currentUserId + \"/\" +\n      (\"00\" + dt.getUTCFullYear()).slice(-2) +\n      (\"00\" + (dt.getMonth() + 1)).slice(-2) +\n      (\"00\" + dt.getUTCDate()).slice(-2) +\n      (\"00\" + dt.getUTCHours()).slice(-2) +\n      (\"00\" + dt.getMinutes()).slice(-2) +\n      (\"00\" + dt.getUTCSeconds()).slice(-2);\n  }\n\n  fileWrite(fileName: string, fileData: string): Observable<WriteFileResult> {\n    return from(Filesystem.writeFile({\n      path: fileName,\n      data: fileData,\n      directory: Directory.Documents,\n      encoding: Encoding.UTF8,\n    }));\n  }\n\n  fileRead(fileName: string): Observable<ReadFileResult> {\n    return from(Filesystem.readFile({\n      path: fileName,\n      directory: Directory.Documents,\n      encoding: Encoding.UTF8\n    }));\n  }\n\n  fileDelete(fileName: string): Observable<void> {\n    return from(Filesystem.deleteFile({\n      path: fileName,\n      directory: Directory.Documents\n    }));\n  }\n\n  getContentType(base64Data: any): Observable<string> {\n    const block = base64Data.split(\";\");\n    const contentType: string = block[0].split(\":\")[1];\n    return of(contentType);\n  }\n\n  base64toBlob(base64data: any, contentType: string): Observable<Blob> {\n    const byteCharacters = atob(base64data.replace(/^.*,/, ''));\n    let buffer = new Uint8Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      buffer[i] = byteCharacters.charCodeAt(i);\n    }\n    const blob = new Blob([buffer.buffer], {\n      type: contentType\n    });\n    return of(blob);\n  }\n\n  createMessage(data: UpdateTaskMutation, argContent?: string | IsMessageContent): Observable<any> {\n    return this.createMessageContent(data, argContent)\n      .pipe(concatMap((messageContent) => this.taskDetailService.createMessageItem(messageContent)));\n  }\n\n  createMessageContent(data, argContent): Observable<MessageContent> {\n    let messageContent = '';\n    if (typeof (argContent) === \"object\") {\n      if (argContent.data.hasTaskKind.chargePerson) {\n        messageContent = `・担当者を ${data.chargePerson.username}に変更しました`;\n      }\n      if (argContent.data.hasTaskKind.description) {\n        messageContent =\n          `${messageContent}\\n` +\n          `・説明文を${argContent.data.taskValue.descriptionItem}に変更しました。`;\n      }\n      if (argContent.data.hasTaskKind.name) {\n        messageContent =\n          `${messageContent}\\n` +\n          `・タイトルを${argContent.data.taskValue.nameItem}に変更しました。`;\n      }\n      if (argContent.data.hasTaskKind.scheduleDate) {\n        messageContent =\n          `${messageContent}\\n` +\n          `・締め切りを${argContent.data.taskValue.scheduleDateItem}に変更しました。`;\n      }\n    } else {\n      messageContent = argContent;\n    }\n\n    const content = {\n      id: `${uuid()}`,\n      taskID: `${data.id}`,\n      authorID: `${data.authorID}`,\n      content: `${messageContent}`\n    }\n    return of(content);\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.taskDetailService.checkRegistrationUser(email).pipe(map((result) => result.items));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskDetailService",
                        "type": "TaskDetailService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "taskDetailService",
                        "type": "TaskDetailService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskDetailService",
            "id": "injectable-TaskDetailService-b0ccb37cee360fd2b0648d78a0809c73",
            "file": "src/app/pages/task-detail/service/task-detail.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkRegistrationUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMessageItem",
                    "args": [
                        {
                            "name": "inputContent",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateMessageMutation>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputContent",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMessagePerTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskByCreatedAtQuery>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMember",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserIconKey",
                    "args": [
                        {
                            "name": "authorID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authorID",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserName",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTask",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetTaskQuery>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMessageListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTaskItem",
                    "args": [
                        {
                            "name": "inputContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AmplifyService, GetTaskQuery, UpdateTaskMutation, ModelSortDirection, CreateMessageInput, SubscriptionResponse, OnCreateMessageSubscription, TaskByCreatedAtQuery, CreateMessageMutation, GetUserQuery, ListRoomGroupsQuery, ModelUserFilterInput, ListUsersQuery } from '../../../shared/service/amplify.service';\nimport { Observable, from, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskDetailService {\n\n  constructor(\n    private amplifyService: AmplifyService,\n  ) { }\n\n  getTask(taskId: string): Observable<GetTaskQuery> {\n    return from(this.amplifyService.GetTask(taskId))\n  }\n\n  fetchMessagePerTask(taskId: string): Observable<TaskByCreatedAtQuery> {\n    const limitMessage = 100;\n    return from(this.amplifyService.TaskByCreatedAt(taskId, ModelSortDirection.DESC, limitMessage));\n  }\n\n  updateTaskItem(inputContent): Observable<UpdateTaskMutation> {\n    return from(this.amplifyService.UpdateTask(inputContent));\n  }\n\n  createMessageItem(inputContent: CreateMessageInput): Observable<CreateMessageMutation> {\n    return from(this.amplifyService.CreateMessage(inputContent));\n  }\n\n  onMessageListener(): any {\n    return this.amplifyService.OnCreateMessageListener;\n  }\n\n  fetchRoomMember(content): Observable<ListRoomGroupsQuery> {\n    return from(this.amplifyService.ListRoomGroups(content));\n  }\n\n  fetchUserName(userId: string): Observable<GetUserQuery> {\n    return from(this.amplifyService.GetUser(userId));\n  }\n\n  // MessageのAuthorのIconを取得します\n  fetchUserIconKey(authorID: string): Observable<string> {\n    return from(this.amplifyService.GetUser(authorID))\n      .pipe(map((result) => result.iconImage.key))\n      .pipe(catchError(() => of('')));\n  }\n\n  checkRegistrationUser(email: string): Observable<ListUsersQuery> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`,\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskLogic",
            "id": "injectable-TaskLogic-331e9456863b1f079ba644c262c84ca5",
            "file": "src/app/pages/task/logic/task.logic.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMembersToAnyRoom",
                    "args": [
                        {
                            "name": "arrayUserId",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arrayUserId",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "compareTaskArray",
                    "args": [
                        {
                            "name": "a",
                            "type": "InterfaceTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "InterfaceTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "InterfaceTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "InterfaceTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRoomGroup",
                    "args": [
                        {
                            "name": "userId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskToRoom",
                    "args": [
                        {
                            "name": "taskFormData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateTaskMutation>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskFormData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserRoomGroup",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchActiveTaskPerRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<InterfaceTask>>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<CurrentUser>>",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyMember",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryFilterUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery | any>",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryFilterUser",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyMembers",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetCompanyQuery>",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCurrentUserCognitoInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CurrentUserInfo>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchDoneTaskPerRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<InterfaceTask>>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchEachStatusTask",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<InterfaceTask>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetStatus",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<InterfaceTask>>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<InterfaceTask>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetStatus",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMemberListOnRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomInfo",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetRoomQuery>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserInfoFromAmplify",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIndexNewArray",
                    "args": [
                        {
                            "name": "taskActiveItems",
                            "type": "Array<InterfaceTask>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActiveItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskActiveItems",
                            "type": "Array<InterfaceTask>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActiveItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateTaskListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateTaskListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reorderTaskMessage",
                    "args": [
                        {
                            "name": "data",
                            "type": "UpdateTaskMutation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UpdateTaskMutation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDoneTaskItem",
                    "args": [
                        {
                            "name": "taskFormItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskFormItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRoom",
                    "args": [
                        {
                            "name": "result",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStatusTaskItems",
                    "args": [
                        {
                            "name": "taskItems",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<UpdateTaskMutation>>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskItems",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskItemPriority",
                    "args": [
                        {
                            "name": "indexArray",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskActiveItems",
                            "type": "Array<InterfaceTask>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "indexArray",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskActiveItems",
                            "type": "Array<InterfaceTask>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { from, Observable, of } from \"rxjs\";\nimport {\n  map,\n  filter,\n  toArray,\n  concatMap,\n  findIndex,\n} from \"rxjs/operators\";\nimport { Storage } from 'aws-amplify';\nimport {\n  CreateMessageInput,\n  CreateRoomGroupMutation,\n  CreateTaskMutation,\n  GetRoomQuery,\n  GetUserQuery,\n  ListRoomGroupsQuery,\n  ListUsersQuery,\n  UpdateTaskMutation,\n  GetCompanyQuery,\n  UpdateRoomInput,\n} from \"src/app/shared/service/amplify.service\";\nimport { SessionService } from \"../../../shared/service/session.service\";\nimport { v4 as uuid } from \"uuid\";\nimport { TaskService } from \"../service/task.service\";\nimport { CurrentUserInfo } from \"../interface/current-user-info.interface\";\nimport { InterfaceTask } from \"src/app/interfaces/task.interface\";\nimport { CurrentUser } from '../model/task-member.model';\n\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TaskLogic {\n  constructor(\n    private taskService: TaskService,\n    private sessionService: SessionService\n  ) { }\n\n  fetchRoomInfo(roomId: string): Observable<GetRoomQuery> {\n    return this.taskService.fetchRoomInfo(roomId);\n  }\n\n  fetchCurrentUserCognitoInfo(): Observable<CurrentUserInfo> {\n    return this.sessionService\n      .fetchCurrentUser()\n      .pipe(map((res) => res.attributes));\n  }\n\n  createTaskToRoom(\n    taskFormData,\n    roomId,\n    userId\n  ): Observable<CreateTaskMutation> {\n    const isoStringDate = new Date().toISOString();\n    if (taskFormData === undefined) {\n      return of();\n    } else {\n      const content = {\n        id: `${uuid()}`,\n        authorID: `${userId}`,\n        roomID: `${roomId}`,\n        chargePersonID: `${taskFormData.chargePersonId}`,\n        title: `${taskFormData.nameItem}`,\n        description: `${taskFormData.descriptionItem}`,\n        scheduleDate: `${taskFormData.scheduleDateItem}`,\n        createdAt: `${isoStringDate}`,\n        status: 0,\n        priority: 0,\n      };\n      return this.taskService.createTaskItem(content);\n    }\n  }\n\n  createRoomGroup(userId, roomId): Observable<CreateRoomGroupMutation> {\n    const content = {\n      id: `room-group${uuid()}`,\n      roomID: `${roomId}`,\n      userID: `${userId}`,\n    };\n    return this.taskService.createRoomGroup(content);\n  }\n\n  fetchEachStatusTask(items: Array<InterfaceTask>, targetStatus: number): Observable<Array<InterfaceTask>> {\n    return from(items)\n      .pipe(filter((data) => data.status === targetStatus))\n      .pipe(toArray());\n  }\n\n  fetchActiveTaskPerRoom(roomId: string): Observable<Array<InterfaceTask>> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`,\n      },\n    };\n    return this.taskService\n      .fetchTaskItemsPerRoom(filterContent)\n      .pipe(map((res) => res.items))\n  }\n\n  fetchDoneTaskPerRoom(roomId: string): Observable<Array<InterfaceTask>> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`,\n      },\n    };\n    return this.taskService\n      .fetchTaskItemsPerRoom(filterContent)\n      .pipe(map((res) => res.items));\n  }\n\n  updateDoneTaskItem(taskFormItem, status: number): Observable<UpdateTaskMutation> {\n    const content = {\n      id: taskFormItem.id,\n      status: status,\n    };\n    return this.taskService.updateTaskItem(content);\n  }\n\n  updateStatusTaskItems(taskItems): Observable<Array<UpdateTaskMutation>> {\n    return from(taskItems)\n      .pipe(\n        concatMap((result: InterfaceTask) =>\n          this.taskService.updateTaskStatusItem(result)\n        )\n      )\n      .pipe(toArray());\n  }\n\n  getIndexNewArray(taskActiveItems: Array<InterfaceTask>, taskActiveItem): Observable<number> {\n    return from(taskActiveItems)\n      .pipe(findIndex(taskItem => taskItem.id === taskActiveItem.id))\n  }\n\n  updateTaskItemPriority(indexArray: number, taskActiveItems: Array<InterfaceTask>): Observable<any> {\n    const targetTaskItem = taskActiveItems[indexArray];\n    const content = {\n      id: targetTaskItem.id,\n      priority: indexArray\n    };\n    return this.taskService.updateTaskStatusForReorder(content);\n  }\n\n  fetchUserInfoFromAmplify(userId: string): Observable<GetUserQuery> {\n    return this.taskService.fetchUserInfo(userId);\n  }\n\n  fetchCompanyMember(\n    companyId: string,\n    queryFilterUser?: string\n  ): Observable<ListUsersQuery | any> {\n    const filterContent = queryFilterUser !== undefined ?\n      {\n        companyID: {\n          eq: `${companyId}`,\n        },\n        username: {\n          contains: queryFilterUser,\n        },\n      } :\n      {\n        companyID: {\n          eq: `${companyId}`,\n        },\n      }\n    return this.taskService.fetchCompanyMember(filterContent);\n  }\n\n  fetchMemberListOnRoom(\n    roomId: string | number\n  ): Observable<ListRoomGroupsQuery> {\n    const filterContent = {\n      roomID: {\n        eq: `${roomId}`,\n      },\n    };\n    return this.taskService.fetchRoomMember(filterContent);\n  }\n\n  compareTaskArray(a: InterfaceTask, b: InterfaceTask): number {\n    const priorityA = a.priority;\n    const priorityB = b.priority;\n    return priorityA - priorityB;\n  }\n\n  createUserRoomGroup(userId: string, roomId: string): Observable<any> {\n    const content = {\n      id: `user-room-group-${uuid()}`,\n      roomID: `${roomId}`,\n      userID: `${userId}`,\n    }\n    return this.taskService.createUserRoomGroup(content);\n  }\n\n  addMembersToAnyRoom(arrayUserId: Array<string>, roomId: string): Observable<any> {\n    return from(arrayUserId)\n      .pipe(concatMap((userId) => this.createUserRoomGroup(userId, roomId)));\n  }\n\n  reorderTaskMessage(data: UpdateTaskMutation): Observable<any> {\n    const createContent: CreateMessageInput = {\n      id: `${uuid()}`,\n      taskID: `${data.id}`,\n      authorID: `${data.authorID}`,\n      content: `優先度 ${data.priority + 1} 番目に移動しました`,\n    }\n    return this.taskService.updateMessage(createContent);\n  }\n\n  fetchCompanyMembers(companyId: string): Observable<GetCompanyQuery> {\n    return this.taskService.fetchAnyCompany(companyId);\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<Array<CurrentUser>> {\n    return this.taskService.fetchAnyUserInfoFromList(email)\n      .pipe(map((result) => result.items))\n  }\n\n  updateRoom(result: { nameItem: string, descriptionItem: string }, roomId: string): Observable<any> {\n    const requestContent: UpdateRoomInput = {\n      id: roomId,\n      name: result.nameItem,\n      description: result.descriptionItem,\n    }\n    return this.taskService.updateRoom(requestContent);\n  }\n\n  onUpdateRoomListener(): any {\n    return this.taskService.onUpdateRoomListener();\n  }\n\n  onCreateTaskListener(): any {\n    return this.taskService.onCreateTaskListener();\n  }\n\n  onUpdateTaskListener(): any {\n    return this.taskService.onUpdateTaskListener();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-84e4bd91326418cc722392492d3fc812",
            "file": "src/app/pages/task/service/task.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createRoomGroup",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateRoomGroupMutation>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTaskItem",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CreateTaskMutation>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserRoomGroup",
                    "args": [
                        {
                            "name": "filterContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterContent",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTaskItem",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DeleteTaskMutation>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyCompany",
                    "args": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetCompanyQuery>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAnyUserInfoFromList",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchCompanyMember",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListUsersQuery>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomInfo",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetRoomQuery>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMember",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListRoomGroupsQuery>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTaskItemsPerRoom",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListTasksQuery>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetUserQuery>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateTaskListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateRoomListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateTaskListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMessage",
                    "args": [
                        {
                            "name": "content",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CreateMessageInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRoom",
                    "args": [
                        {
                            "name": "data",
                            "type": "UpdateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UpdateRoomInput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskItem",
                    "args": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskStatusForReorder",
                    "args": [
                        {
                            "name": "targetItem",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "targetItem",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTaskStatusItem",
                    "args": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateTaskMutation>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport {\n  AmplifyService,\n  CreateMessageInput,\n  CreateRoomGroupMutation,\n  CreateTaskMutation,\n  DeleteTaskMutation,\n  GetRoomQuery,\n  GetUserQuery,\n  ListRoomGroupsQuery,\n  ListTasksQuery,\n  ListUsersQuery,\n  UpdateTaskMutation,\n  GetCompanyQuery,\n  ModelUserFilterInput,\n  UpdateRoomInput,\n} from \"../../../shared/service/amplify.service\";\nimport { Observable, from } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TaskService {\n  constructor(private amplifyService: AmplifyService) { }\n\n  fetchRoomInfo(roomId: string): Observable<GetRoomQuery> {\n    return from(this.amplifyService.GetRoom(roomId));\n  }\n\n  createTaskItem(content): Observable<CreateTaskMutation> {\n    return from(this.amplifyService.CreateTask(content));\n  }\n\n  createRoomGroup(content): Observable<CreateRoomGroupMutation> {\n    return from(this.amplifyService.CreateRoomGroup(content));\n  }\n\n  updateTaskItem(content): Observable<UpdateTaskMutation> {\n    return from(this.amplifyService.UpdateTask(content));\n  }\n\n  updateTaskStatusItem(taskItem): Observable<UpdateTaskMutation> {\n    const content = {\n      id: taskItem.id,\n      priority: taskItem.priority + 1,\n    };\n    return from(this.amplifyService.UpdateTask(content));\n  }\n\n  updateTaskStatusForReorder(\n    targetItem: { id: string, priority: number }\n  ): Observable<UpdateTaskMutation> {\n    const content = {\n      id: targetItem.id,\n      priority: targetItem.priority,\n    };\n    return from(this.amplifyService.UpdateTask(content));\n  }\n\n  fetchTaskItemsPerRoom(content): Observable<ListTasksQuery> {\n    return from(this.amplifyService.ListTasks(content));\n  }\n\n  deleteTaskItem(content): Observable<DeleteTaskMutation> {\n    return from(this.amplifyService.DeleteTask(content));\n  }\n\n  fetchUserInfo(userId: string): Observable<GetUserQuery> {\n    return from(this.amplifyService.GetUser(userId));\n  }\n\n  fetchCompanyMember(content): Observable<ListUsersQuery> {\n    return from(this.amplifyService.ListUsers(content));\n  }\n\n  fetchRoomMember(content): Observable<ListRoomGroupsQuery> {\n    return from(this.amplifyService.ListRoomGroups(content));\n  }\n\n  createUserRoomGroup(filterContent): Observable<any> {\n    return from(this.amplifyService.CreateRoomGroup(filterContent));\n  }\n\n  updateMessage(content: CreateMessageInput): Observable<any> {\n    return from(this.amplifyService.CreateMessage(content));\n  }\n\n  fetchAnyCompany(companyId: string): Observable<GetCompanyQuery> {\n    return from(this.amplifyService.GetCompany(companyId));\n  }\n\n  fetchAnyUserInfoFromList(email: string): Observable<ListUsersQuery> {\n    const filterContent: ModelUserFilterInput = {\n      email: {\n        eq: `${email}`,\n      }\n    }\n    return from(this.amplifyService.ListUsers(filterContent));\n  }\n\n  onUpdateRoomListener(): any {\n    return this.amplifyService.OnUpdateRoomListener;\n  }\n\n  onCreateTaskListener(): any {\n    return this.amplifyService.OnCreateTaskListener;\n  }\n\n  onUpdateTaskListener(): any {\n    return this.amplifyService.OnUpdateTaskListener;\n  }\n\n  updateRoom(data: UpdateRoomInput): any {\n    return this.amplifyService.UpdateRoom(data);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "amplifyService",
                        "type": "AmplifyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-18bbe8f8e3343ed64f666947522fbdba",
            "file": "src/app/guard/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { SessionService } from '../shared/service/session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private readonly sessionService: SessionService,\n    private readonly router: Router\n  ) { }\n\n  canActivate(): Observable<boolean> {\n    return this.sessionService.isAuthenticated().pipe(tap((loggedIn) => {\n      if (!loggedIn) {\n        this.router.navigate(['/login'])\n      }\n    }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "DataResolverService",
            "id": "injectable-DataResolverService-57fd6be684e8fe83763fd85066c8042b",
            "file": "src/app/shared/service/resolver/data-resolver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { DataLogic } from '../../logic/data/data.logic';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataResolverService implements Resolve<any> {\n\n  constructor(private dataLogic: DataLogic) { }\n\n  resolve(route: ActivatedRouteSnapshot) {\n    let id = route.paramMap.get('id');\n    return this.dataLogic.getData(id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataLogic",
                        "type": "DataLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dataLogic",
                        "type": "DataLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-5d0e5b7901d07cec80d1900477a02177",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getPageTitle() {\n    return element(by.css('ion-title')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getPageTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddPersonModalComponent",
            "id": "component-AddPersonModalComponent-acb5a852423ec2f12120246c99d62604",
            "file": "src/app/pages/task/component/add-person-modal/add-person-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-person-modal",
            "styleUrls": [
                "./add-person-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-person-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arraySelectedPersonId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "companyMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<MemberTask>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "notAssignMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "roomId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addPersonToTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelSearch",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeCheckUser",
                    "args": [
                        {
                            "name": "member",
                            "type": "MemberTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "MemberTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkNotAssignMember",
                    "args": [
                        {
                            "name": "companyMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSearch",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dismissModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inputSearch",
                    "args": [
                        {
                            "name": "ev",
                            "type": "CustomEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "CustomEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { map } from 'rxjs/operators';\nimport { TaskLogic } from '../../logic/task.logic';\nimport { MemberTask } from '../../model/task-member.model';\nimport { User } from 'src/app/shared/service/amplify.service';\n\n@Component({\n  selector: 'app-add-person-modal',\n  templateUrl: './add-person-modal.component.html',\n  styleUrls: ['./add-person-modal.component.scss'],\n})\nexport class AddPersonModalComponent implements OnInit {\n\n  arraySelectedPersonId: Array<string>;\n  members: Array<MemberTask>;\n  companyId: string;\n  roomId: string;\n  companyMembers;\n  notAssignMembers;\n\n  constructor(\n    private readonly logic: TaskLogic,\n    private modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit(): void {\n    this.arraySelectedPersonId = [];\n    this.members = this.notAssignMembers.map((member) => {\n      member.checked = false\n      return member;\n    });\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss({ result: 'dismiss' });\n  }\n\n  addPersonToTask(): void {\n    this.logic.addMembersToAnyRoom(this.arraySelectedPersonId, this.roomId)\n      .subscribe(() => {\n        this.modalCtrl.dismiss({ result: 'success' });\n      })\n  }\n\n  changeCheckUser(member: MemberTask): void {\n    const indexTargetId = this.arraySelectedPersonId.findIndex(item => item === member.id);\n    const targetIndex = this.members.findIndex(item => item.id === member.id);\n    if (indexTargetId >= 0) {\n      this.arraySelectedPersonId.splice(indexTargetId, 1);\n      this.members[targetIndex].checked = false;\n    } else {\n      this.arraySelectedPersonId.push(member.id);\n      this.members[targetIndex].checked = true;\n    }\n  }\n\n  inputSearch(ev: CustomEvent): void {\n    if (ev.detail.value !== null) {\n      this.logic.fetchCompanyMember(this.companyId, ev.detail.value)\n        .pipe(map((result) => result.items))\n        .subscribe((items) => {\n          this.members = this.checkNotAssignMember(this.notAssignMembers, items)\n        })\n    } else {\n      this.logic.fetchCompanyMember(this.companyId)\n        .pipe(map((result) => result.items))\n        .subscribe(() => {\n          this.members = this.notAssignMembers;\n        })\n    }\n  }\n\n  checkNotAssignMember(companyMembers, roomMembers): Array<any> {\n    return companyMembers.filter((companyMember) => {\n      return roomMembers.some((roomMember) => {\n        return companyMember.id === roomMember.id;\n      })\n    });\n  }\n\n  cancelSearch(ev): void { }\n\n  clearSearch(ev): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media (prefers-color-scheme: dark) {\n    .member-check {\n        --border-radius: 0;\n        --border-style: 0;\n        --checkmark-color: #3880ff;\n        --background: #000000;\n        --background-checked: #000000;\n    }\n}",
                    "styleUrl": "./add-person-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "TaskLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "TaskLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header [translate]=\"true\">\n  <ion-toolbar>\n    <ion-title>メンバーの追加</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-button\n        [disabled]=\"arraySelectedPersonId.length === 0\"\n        (click)=\"addPersonToTask()\"\n        >追加</ion-button\n      >\n    </ion-buttons>\n  </ion-toolbar>\n  <ion-toolbar>\n    <ion-searchbar\n      (ionCancel)=\"cancelSearch($event)\"\n      (ionClear)=\"clearSearch($event)\"\n      (ionChange)=\"inputSearch($event)\"\n    ></ion-searchbar>\n  </ion-toolbar>\n</ion-header>\n<ion-content>\n  <ion-list *ngFor=\"let member of members\">\n    <ion-item>\n      <ion-label>{{ member.username }}</ion-label>\n      <ion-checkbox\n        (ionChange)=\"changeCheckUser(member)\"\n        [checked]=\"member.checked\"\n        slot=\"start\"\n        class=\"member-check\"\n      ></ion-checkbox>\n    </ion-item>\n  </ion-list>\n</ion-content>\n"
        },
        {
            "name": "AddRoomModalComponent",
            "id": "component-AddRoomModalComponent-707a8326ea32c39107ff8dccf1813d61",
            "file": "src/app/shared/component/modal/add-room-modal/add-room-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-room-modal",
            "styleUrls": [
                "./add-room-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-room-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "GetRoomQuery | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "role",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "roomItemGroup",
                    "defaultValue": "new FormGroup({\n    nameItem: new FormControl('', [Validators.required]),\n    descriptionItem: new FormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "viewContent",
                    "defaultValue": "{\n    create: { title: '案件情報の追加', button: '追加' },\n    update: { title: '案件情報の更新', button: '更新' },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "createItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dismissModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { GetRoomQuery } from 'src/app/shared/service/amplify.service';\n\n@Component({\n  selector: 'app-add-room-modal',\n  templateUrl: './add-room-modal.component.html',\n  styleUrls: ['./add-room-modal.component.scss'],\n})\nexport class AddRoomModalComponent implements OnInit {\n\n  @Input() room: GetRoomQuery | undefined;\n\n  role = 'create';\n\n  viewContent = {\n    create: { title: '案件情報の追加', button: '追加' },\n    update: { title: '案件情報の更新', button: '更新' },\n  }\n\n  roomItemGroup = new FormGroup({\n    nameItem: new FormControl('', [Validators.required]),\n    descriptionItem: new FormControl(''),\n  });\n\n  constructor(\n    private modalCtrl: ModalController,\n  ) { }\n\n  get nameItem(): FormControl {\n    return <FormControl>this.roomItemGroup.get('nameItem');\n  }\n\n  get descriptionItem(): FormControl {\n    return <FormControl>this.roomItemGroup.get('descriptionItem');\n  }\n\n  ngOnInit(): void {\n    if (this.room !== undefined) {\n      this.roomItemGroup.setValue({\n        nameItem: this.room.name,\n        descriptionItem: this.room.description,\n      });\n      this.role = 'update';\n    }\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n  createItem(): void {\n    this.modalCtrl.dismiss(this.roomItemGroup.value, this.role);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-room-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "nameItem": {
                    "name": "nameItem",
                    "getSignature": {
                        "name": "nameItem",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 31
                    }
                },
                "descriptionItem": {
                    "name": "descriptionItem",
                    "getSignature": {
                        "name": "descriptionItem",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 35
                    }
                }
            },
            "templateData": "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>{{ viewContent[role].title }}</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"roomItemGroup\">\n    <ion-item>\n      <ion-label position=\"stacked\">Want to</ion-label>\n      <ion-input\n        formControlName=\"nameItem\"\n        placeholder=\"〇〇したい\"\n      ></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label position=\"stacked\">詳細</ion-label>\n      <ion-textarea autoGrow=\"true\b\" formControlName=\"descriptionItem\">\n      </ion-textarea>\n    </ion-item>\n\n    <ion-button\n      (click)=\"createItem()\"\n      [disabled]=\"nameItem.invalid\"\n      expand=\"full\"\n      >{{ viewContent[role].button }}\n    </ion-button>\n  </form>\n</ion-content>\n"
        },
        {
            "name": "AddTaskModalComponent",
            "id": "component-AddTaskModalComponent-d2cbf4a6b3a9b5061945f96a8523abe5",
            "file": "src/app/shared/component/modal/add-task-modal/add-task-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-task-modal",
            "styleUrls": [
                "./add-task-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-task-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentIsoString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "hasModifyForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "hasTaskKind",
                    "defaultValue": "{\n    name: false,\n    description: false,\n    chargePerson: false,\n    scheduleDate: false\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "maxYear",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "minYear",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "roomMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListRoomGroupsQuery",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "strButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "taskDetail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetTaskQuery",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "taskForm",
                    "defaultValue": "new FormGroup({\n    nameItem: new FormControl('', [Validators.required]),\n    descriptionItem: new FormControl(''),\n    chargePersonId: new FormControl(''),\n    scheduleDateItem: new FormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createTaskItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dismissModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { GetTaskQuery, ListRoomGroupsQuery } from 'src/app/shared/service/amplify.service';\nimport { filter, switchMap, map } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\n\n@Component({\n  selector: 'app-add-task-modal',\n  templateUrl: './add-task-modal.component.html',\n  styleUrls: ['./add-task-modal.component.scss'],\n})\nexport class AddTaskModalComponent implements OnInit {\n\n  taskForm = new FormGroup({\n    nameItem: new FormControl('', [Validators.required]),\n    descriptionItem: new FormControl(''),\n    chargePersonId: new FormControl(''),\n    scheduleDateItem: new FormControl(''),\n  });\n\n  userId: string;\n  minYear: string = '';\n  maxYear: string = '';\n  currentIsoString: string;\n  roomMembers: ListRoomGroupsQuery;\n\n  strButton: string;\n\n  room;\n  taskDetail: GetTaskQuery;\n  userList;\n  hasModifyForm = false;\n\n  hasTaskKind = {\n    name: false,\n    description: false,\n    chargePerson: false,\n    scheduleDate: false\n  };\n\n  constructor(\n    private modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit() {\n    const currentDate = new Date();\n    this.minYear = (currentDate.getFullYear()).toString();\n    this.maxYear = (currentDate.getFullYear() + 1).toString();\n    if (this.taskDetail !== undefined) {\n      this.taskForm.patchValue({\n        nameItem: this.taskDetail.title,\n        descriptionItem: this.taskDetail.description,\n        chargePersonId: this.taskDetail.chargePerson.id,\n        scheduleDateItem: this.taskDetail.scheduleDate,\n      });\n      this.room = this.taskDetail.room;\n      this.strButton = '更新';\n    } else {\n      this.currentIsoString = currentDate.toISOString();\n      this.taskForm.patchValue({\n        scheduleDateItem: this.currentIsoString,\n        chargePersonId: this.userId,\n      });\n      this.strButton = '追加';\n    }\n    this.taskForm.get(\"nameItem\").valueChanges\n      .pipe(switchMap(() => of(!this.hasModifyForm ? this.hasModifyForm = !this.hasModifyForm : this.hasModifyForm = this.hasModifyForm)))\n      .pipe(map(() => !this.hasTaskKind.name ? this.hasTaskKind.name = !this.hasTaskKind.name : this.hasTaskKind.name = this.hasTaskKind.name))\n      .subscribe(() => { });\n    this.taskForm.get(\"descriptionItem\").valueChanges\n      .pipe(switchMap(() => of(!this.hasModifyForm ? this.hasModifyForm = !this.hasModifyForm : this.hasModifyForm = this.hasModifyForm)))\n      .pipe(map(() => !this.hasTaskKind.description ? this.hasTaskKind.description = !this.hasTaskKind.description : this.hasTaskKind.description = this.hasTaskKind.description))\n      .subscribe(() => { });\n    this.taskForm.get(\"chargePersonId\").valueChanges\n      .pipe(switchMap(() => of(!this.hasModifyForm ? this.hasModifyForm = !this.hasModifyForm : this.hasModifyForm = this.hasModifyForm)))\n      .pipe(map(() => !this.hasTaskKind.chargePerson ? this.hasTaskKind.chargePerson = !this.hasTaskKind.chargePerson : this.hasTaskKind.chargePerson = this.hasTaskKind.chargePerson))\n      .subscribe(() => { });\n    this.taskForm.get(\"scheduleDateItem\").valueChanges\n      .pipe(switchMap(() => of(!this.hasModifyForm ? this.hasModifyForm = !this.hasModifyForm : this.hasModifyForm = this.hasModifyForm)))\n      .pipe(map(() => !this.hasTaskKind.scheduleDate ? this.hasTaskKind.scheduleDate = !this.hasTaskKind.scheduleDate : this.hasTaskKind.chargePerson = this.hasTaskKind.scheduleDate))\n      .subscribe(() => { });\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n  createTaskItem(): void {\n    this.modalCtrl.dismiss({\n      taskValue: this.taskForm.value,\n      hasTaskKind: this.hasTaskKind,\n    });\n  }\n\n  changeDate(ev) {\n  }\n\n  checkStatus(): boolean {\n    return true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-task-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>{{ room.name }}</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"taskForm\">\n    <ion-item>\n      <ion-label position=\"stacked\">タスク名</ion-label>\n      <ion-input formControlName=\"nameItem\"></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label position=\"stacked\">説明</ion-label>\n      <ion-input formControlName=\"descriptionItem\"></ion-input>\n    </ion-item>\n    <ion-item>\n      <ion-label>担当者</ion-label>\n      <ion-select\n        formControlName=\"chargePersonId\"\n        ok-text=\"決定\"\n        cancel-text=\"キャンセル\"\n      >\n        <ion-select-option\n          *ngFor=\"let item of roomMembers\"\n          [value]=\"item.userID\"\n          >{{ item.user.username }}</ion-select-option\n        >\n      </ion-select>\n    </ion-item>\n    <ion-item>\n      <ion-label position=\"stacked\">期限</ion-label>\n      <ion-datetime\n        (ionChange)=\"changeDate($event)\"\n        displayFormat=\"YYYY/MM/DD\"\n        displayTimezone=\"Asia/Tokyo\"\n        cancelText=\"キャンセル\"\n        dayNames=\"曜日\"\n        formControlName=\"scheduleDateItem\"\n        doneText=\"完了\"\n        [min]=\"minYear\"\n        [max]=\"maxYear\"\n        [value]=\"currentIsoString\"\n      ></ion-datetime>\n    </ion-item>\n\n    \b<ion-button\n      (click)=\"createTaskItem()\"\n      [disabled]=\"taskForm.invalid || !hasModifyForm\"\n      expand=\"full\"\n    >\n      {{ strButton }}\n    </ion-button>\n  </form>\n</ion-content>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d13e119c6755647050708539d97d112b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "initializeApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { Platform } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})\nexport class AppComponent {\n  constructor(\n    private platform: Platform,\n    private splashScreen: SplashScreen,\n    private statusBar: StatusBar\n  ) {\n    this.initializeApp();\n  }\n\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.platform.backButton.subscribeWithPriority(1000, () => {\n        this.statusBar.styleDefault();\n        this.splashScreen.hide();\n      })\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "splashScreen",
                        "type": "SplashScreen",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statusBar",
                        "type": "StatusBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splashScreen",
                        "type": "SplashScreen",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statusBar",
                        "type": "StatusBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ion-app>\n  <ion-router-outlet></ion-router-outlet>\n</ion-app>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CommentPage",
            "id": "component-CommentPage-55477809105d83aad29fa8bd4886c98f",
            "file": "src/app/pages/comment/comment.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment",
            "styleUrls": [
                "./comment.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-comment',\n  templateUrl: './comment.page.html',\n  styleUrls: ['./comment.page.scss'],\n})\nexport class CommentPage implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./comment.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>comment</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n</ion-content>\n"
        },
        {
            "name": "CompleteRegisterPage",
            "id": "component-CompleteRegisterPage-23943f63de8cbb7f9756cef1bee72544",
            "file": "src/app/pages/complete-register/complete-register.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-complete-register",
            "styleUrls": [
                "./complete-register.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./complete-register.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "statusRegister",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "viewContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nconst titleContent = {\n  progress: {\n    title: '仮登録完了',\n    content: `登録して頂いたメールアドレスに本登録用のリンクを送信しました。\n      会社情報の本登録をお願いいたします。`,\n    button: 'OK',\n  },\n  done: {\n    title: '本登録完了',\n    content: `会社情報の本登録が完了しました。\\n\n    下記のリンクから、ログインしていただき利用を初めてください。\n    これから御社内でイノベーションを作り上げていくことを望んでおります。\n    (ここにサブスクリプションを設定するページを入れる)\n    `,\n    button: '完了',\n  },\n}\n\n@Component({\n  selector: 'app-complete-register',\n  templateUrl: './complete-register.page.html',\n  styleUrls: ['./complete-register.page.scss'],\n})\nexport class CompleteRegisterPage implements OnInit {\n\n  statusRegister: string;\n  viewContent: { title: string, content: string, button: string };\n\n  constructor(\n    private readonly router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.route.queryParams\n      .pipe(filter((params) => params.status))\n      .subscribe((param) => {\n        this.statusRegister = param.status;\n        this.viewContent = titleContent[param.status];\n      });\n  }\n\n  navigateTo(): void {\n    this.router.navigate(['/login']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text-content {\n    text-align: center;\n    min-height: 10em;\n    display: table-cell;\n    vertical-align: middle;\n    padding: 10%;\n    padding-top: 40%;\n}\n\n.btn-ok {\n    margin: 0 5%\n}",
                    "styleUrl": "./complete-register.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-content>\n  <div class=\"text-content\">\n    <h2>{{viewContent.title}}</h2>\n    <ion-text>{{viewContent.content}}</ion-text>\n  </div>\n  <ion-button (click)=\"navigateTo()\" class=\"btn btn-ok\" expand=\"block\"\n    >{{viewContent.button}}</ion-button\n  >\n</ion-content>\n"
        },
        {
            "name": "ConfirmPage",
            "id": "component-ConfirmPage-09911ee1cea7c78449e29ab7c6d26096",
            "file": "src/app/pages/confirm/confirm.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm",
            "styleUrls": [
                "./confirm.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "confirmForm",
                    "defaultValue": "new FormGroup({\n    confirmNumber: new FormControl('', [Validators.required])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "confirmTargetEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n確認コードが正しいユーザーであるかLogicに記載します\n",
                    "description": "<p>確認コードが正しいユーザーであるかLogicに記載します</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n初期読み込み時\n確認するEmailとCompanyIdを取得します\n",
                    "description": "<p>初期読み込み時\n確認するEmailとCompanyIdを取得します</p>\n"
                },
                {
                    "name": "reSendSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n確認コードを再送信する処理です\n",
                    "description": "<p>確認コードを再送信する処理です</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { concatMap } from 'rxjs/operators';\nimport { ConfirmLogic } from './logic/confirm.logic';\n\n@Component({\n  selector: 'app-confirm',\n  templateUrl: './confirm.page.html',\n  styleUrls: ['./confirm.page.scss'],\n})\n\nexport class ConfirmPage implements OnInit {\n  companyId: string;\n  confirmTargetEmail: string;\n  userId: string;\n  confirmForm = new FormGroup({\n    confirmNumber: new FormControl('', [Validators.required])\n  });\n\n  constructor(\n    private readonly router: Router,\n    private logic: ConfirmLogic,\n  ) {\n  }\n\n  /**\n   * 確認コードのFormControlのGetterです\n   */\n  get aliasConfirmNumber(): FormControl {\n    return <FormControl>this.confirmForm.get('confirmNumber');\n  }\n\n  /**\n   * 初期読み込み時\n   * 確認するEmailとCompanyIdを取得します\n   */\n  ngOnInit(): void {\n    this.confirmTargetEmail = this.router.getCurrentNavigation().extras.state.data.email;\n    this.companyId = this.router.getCurrentNavigation().extras.state.data.companyId;\n    this.userId = this.router.getCurrentNavigation().extras.state.data.userId;\n  }\n\n  /**\n   * 確認コードが正しいユーザーであるかLogicに記載します\n   */\n  confirmSignUp(): void {\n    this.logic.sendConfirmUser(this.confirmTargetEmail, this.aliasConfirmNumber.value)\n      .pipe(concatMap(() => this.logic.updateUserToDynamo(this.userId)))\n      .subscribe((data) => {\n        this.router.navigate(['/login']);\n      });\n  }\n\n  /**\n   * 確認コードを再送信する処理です\n   */\n  reSendSignUp(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".center-signup {\n    text-align: center;\n    margin-top: 20px;\n}\n\n.content-margin {\n    margin: 30% 10% 0;\n}",
                    "styleUrl": "./confirm.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "ConfirmLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "ConfirmLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "aliasConfirmNumber": {
                    "name": "aliasConfirmNumber",
                    "getSignature": {
                        "name": "aliasConfirmNumber",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 30,
                        "rawdescription": "確認コードのFormControlのGetterです",
                        "description": "<p>確認コードのFormControlのGetterです</p>\n"
                    }
                }
            },
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>ユーザーの確認</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding content-margin\">\n  <form [formGroup]=\"confirmForm\">\n    <ion-item>\n      <ion-label position=\"stacked\">確認コード</ion-label>\n      <ion-input\n        required\n        type=\"text\"\n        formControlName=\"confirmNumber\"\n      ></ion-input>\n    </ion-item>\n    <ion-button type=\"submit\" (click)=\"confirmSignUp()\" expand=\"block\"\n      >確認</ion-button\n    >\n  </form>\n\n  <!-- <div class=\"center-signup\">\n    <a (click)=\"reSendSignUp()\">再度送る</a>\n  </div> -->\n</ion-content>\n"
        },
        {
            "name": "CreateCompanyPage",
            "id": "component-CreateCompanyPage-f4c5494c98669821f41fe8af04c5f9bf",
            "file": "src/app/pages/create-company/create-company.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-company",
            "styleUrls": [
                "./create-company.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-company.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyForm",
                    "defaultValue": "new FormGroup({\n    companyIcon: new FormControl(''),\n    companyName: new FormControl('', [Validators.required]),\n    companyEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    companyTel: new FormControl('', Validators.compose([Validators.required, Validators.pattern(/\\d{10}/)])), // 数字10桁\n    officerForm: new FormGroup({\n      officerName: new FormControl('', Validators.compose([Validators.required])),\n      officerEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n      officerPassword: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)])),\n      officerPasswordConfirm: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)])),\n    }, this.checkPassword),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "validations",
                    "defaultValue": "{\n    'name': [\n      { type: 'required', message: '会社名は入力必須です' },\n    ],\n    'officer': [\n      { type: 'required', message: '担当者の名前は入力必須です' },\n    ],\n    'email': [\n      { type: 'required', message: '担当者のメールアドレスは必須です' },\n    ]\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPassword",
                    "args": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "null | literal type",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBackToSetting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSetting pageに戻ります\n",
                    "description": "<p>Setting pageに戻ります</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerCompany",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n会社のアカウントを作成して、担当者のユーザーも作成します→ Authにも送る\n",
                    "description": "<p>会社のアカウントを作成して、担当者のユーザーも作成します→ Authにも送る</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { concatMap, map } from 'rxjs/operators';\nimport { CreateCompanyLogic } from './logic/create-company.logic';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-create-company',\n  templateUrl: './create-company.page.html',\n  styleUrls: ['./create-company.page.scss'],\n})\n\nexport class CreateCompanyPage implements OnInit {\n\n  private readonly validations = {\n    'name': [\n      { type: 'required', message: '会社名は入力必須です' },\n    ],\n    'officer': [\n      { type: 'required', message: '担当者の名前は入力必須です' },\n    ],\n    'email': [\n      { type: 'required', message: '担当者のメールアドレスは必須です' },\n    ]\n  };\n\n  companyForm = new FormGroup({\n    companyIcon: new FormControl(''),\n    companyName: new FormControl('', [Validators.required]),\n    companyEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    companyTel: new FormControl('', Validators.compose([Validators.required, Validators.pattern(/\\d{10}/)])), // 数字10桁\n    officerForm: new FormGroup({\n      officerName: new FormControl('', Validators.compose([Validators.required])),\n      officerEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n      officerPassword: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)])),\n      officerPasswordConfirm: new FormControl('', Validators.compose([Validators.required, Validators.minLength(8)])),\n    }, this.checkPassword),\n  });\n\n  constructor(\n    private readonly router: Router,\n    private readonly location: Location,\n    private logic: CreateCompanyLogic,\n  ) { }\n\n  ngOnInit(): void { }\n\n  checkPassword(group: FormGroup): null | { notSame: boolean } {\n    let password = group.get('officerPassword').value;\n    let passwordConfirm = group.get('officerPasswordConfirm').value;\n    return password = passwordConfirm ? null : { notSame: true };\n  }\n\n  /**\n   * Setting pageに戻ります\n   */\n  goBackToSetting(): void {\n    this.location.back();\n  }\n\n  get aliasGetCompanyName(): FormControl {\n    return <FormControl>this.companyForm.get('companyName');\n  }\n\n  get aliasGetOfficerName(): FormControl {\n    return <FormControl>this.companyForm.get('officerForm.officerName');\n  }\n\n  get aliasGetOfficerEmail(): FormControl {\n    return <FormControl>this.companyForm.get('officerForm.officerEmail');\n  }\n\n  get aliasGetOfficerPassword(): FormControl {\n    return <FormControl>this.companyForm.get('officerForm.officerPassword');\n  }\n\n  /**\n   * 会社のアカウントを作成して、担当者のユーザーも作成します→ Authにも送る\n   */\n  registerCompany(): void {\n    const date = new Date();\n    const timeStamp = date.getTime();\n    const companyId = `company_${timeStamp}_${uuid()}`;\n    const companyName = this.aliasGetCompanyName.value;\n    const officerName = this.aliasGetOfficerName.value;\n    const officerEmail = this.aliasGetOfficerEmail.value;\n    const officerPassword = this.aliasGetOfficerPassword.value;\n    const requestCompanyContent = {\n      id: companyId,\n      name: `${companyName}`,\n      officer: [{\n        officerEmail: officerEmail,\n        officerName: officerName\n      }],\n      isRegistered: false,\n      otp: '',\n    };\n    const requestUserContent = {\n      name: officerName,\n      email: officerEmail,\n      password: officerPassword,\n    }\n\n    this.logic.createCompanyToDynamoDB(requestCompanyContent)\n      .pipe(concatMap(() => this.logic.entrySignUpUser(requestUserContent, companyId)))\n      .pipe(concatMap(() => this.logic.createUserWithCompanyId(companyId, officerName, officerEmail)))\n      .subscribe(({ id }) => {\n        this.router.navigate(['/confirm'], { state: { data: { email: officerEmail, companyId: companyId, userId: id } } });\n      });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-company {\n    padding: 5% 0;\n}\n\n.form-content {\n    margin: 10% 5% 20% 5%;\n}",
                    "styleUrl": "./create-company.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "CreateCompanyLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "CreateCompanyLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "aliasGetCompanyName": {
                    "name": "aliasGetCompanyName",
                    "getSignature": {
                        "name": "aliasGetCompanyName",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 63
                    }
                },
                "aliasGetOfficerName": {
                    "name": "aliasGetOfficerName",
                    "getSignature": {
                        "name": "aliasGetOfficerName",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 67
                    }
                },
                "aliasGetOfficerEmail": {
                    "name": "aliasGetOfficerEmail",
                    "getSignature": {
                        "name": "aliasGetOfficerEmail",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 71
                    }
                },
                "aliasGetOfficerPassword": {
                    "name": "aliasGetOfficerPassword",
                    "getSignature": {
                        "name": "aliasGetOfficerPassword",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 75
                    }
                }
            },
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>会社情報を登録する</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"companyForm\" class=\"form-content\">\n    <ion-list>\n      <ion-list-header>\n        <ion-label>基本情報</ion-label>\n      </ion-list-header>\n      <ion-item>\n        <ion-label position=\"stacked\">会社名</ion-label>\n        <ion-input formControlName=\"companyName\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">会社のメールアドレス</ion-label>\n        <ion-input formControlName=\"companyEmail\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">会社の電話番号</ion-label>\n        <ion-input formControlName=\"companyTel\"></ion-input>\n      </ion-item>\n\n      <ng-container formGroupName=\"officerForm\">\n        <ion-list-header>\n          <ion-label>担当者</ion-label>\n        </ion-list-header>\n        <ng-container>\n          <ng-container>\n            <ion-item>\n              <ion-label position=\"stacked\">担当者名</ion-label>\n              <ion-input formControlName=\"officerName\"></ion-input>\n            </ion-item>\n            <ion-item>\n              <ion-label position=\"stacked\">担当者Email</ion-label>\n              <ion-input formControlName=\"officerEmail\"></ion-input>\n            </ion-item>\n            <ion-item>\n              <ion-label position=\"stacked\">パスワード</ion-label>\n              <ion-input\n                type=\"password\"\n                formControlName=\"officerPassword\"\n              ></ion-input>\n            </ion-item>\n            <ion-item>\n              <ion-label position=\"stacked\">パスワード(確認用)</ion-label>\n              <ion-input\n                type=\"password\"\n                formControlName=\"officerPasswordConfirm\"\n              ></ion-input>\n            </ion-item>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ion-list>\n  </form>\n</ion-content>\n<ion-footer>\n  <ion-toolbar>\n    <ion-button\n      expand=\"block\"\n      [disabled]=\"companyForm.invalid\"\n      (click)=\"registerCompany()\"\n      >登録</ion-button\n    >\n  </ion-toolbar>\n</ion-footer>\n"
        },
        {
            "name": "DeleteTaskModalComponent",
            "id": "component-DeleteTaskModalComponent-ae4f7b4c804a5926b6b41cf1edcdd959",
            "file": "src/app/shared/component/modal/delete-task-modal/delete-task-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-task-modal",
            "styleUrls": [
                "./delete-task-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-task-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTargetTask",
                    "args": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskItem",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-delete-task-modal',\n  templateUrl: './delete-task-modal.component.html',\n  styleUrls: ['./delete-task-modal.component.scss'],\n})\nexport class DeleteTaskModalComponent implements OnInit {\n  task;\n\n  constructor(\n    private modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit() { }\n\n  onCancel() {\n    this.modalCtrl.dismiss();\n  }\n\n\n  deleteTargetTask(taskItem) {\n    this.modalCtrl.dismiss(taskItem);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// ion-content {\n//     div {\n//         height: 100%;\n//         width: 100%;\n//         // display: flex;\n//         justify-content: center;\n//         align-items: center;\n//     }\n// }\n\n.item-paddind {\n    margin-top: 50%;\n}",
                    "styleUrl": "./delete-task-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>タスクを削除してもよいでしょうか？</ion-title>\n  </ion-toolbar>\n</ion-header> -->\n\n<ion-content fullscreen padding>\n  <ion-grid class=\"item-paddind\">\n    <ion-row class=\"ion-align-items-center ion-padding-vertical\">\n      <ion-col size=\"12\" class=\"ion-text-center\">\n        <p>「{{ task.title }}」</p>\n        <p>削除してもよいでしょうか？</p>\n      </ion-col>\n    </ion-row>\n    <ion-row class=\"ion-align-items-center\">\n      <ion-col size=\"6\" class=\"ion-text-center ion-padding-top\">\n        <ion-button (click)=\"onCancel()\">キャンセル</ion-button>\n      </ion-col>\n      <ion-col size=\"6\" class=\"ion-text-center\">\n        <ion-button\n          (click)=\"deleteTargetTask(task)\"\n          color=\"danger\"\n          fill=\"outline\"\n        >\n          削除\n        </ion-button>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n"
        },
        {
            "name": "EditProfileModalComponent",
            "id": "component-EditProfileModalComponent-b58f100146c72eee5c0d70ec9bbf0ed9",
            "file": "src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-profile-modal",
            "styleUrls": [
                "./edit-profile-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-profile-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "CurrentUser"
                },
                {
                    "name": "userIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | null"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultIconImageUrl",
                    "defaultValue": "'../../../../../assets/img/undefined.jpeg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "editProfileForm",
                    "defaultValue": "new FormGroup({\n    id: new FormControl(''),\n    keyAvatarImage: new FormControl(),\n    userName: new FormControl('', [Validators.required]),\n    positionName: new FormControl(''),\n    targetEmail: new FormControl('', [Validators.required, Validators.email]),\n    tel: new FormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pickerImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { HomeLogic } from '../../../../pages/home/logic/home.logic';\nimport { Camera, CameraResultType } from '@capacitor/camera';\nimport { from, of } from 'rxjs';\nimport { catchError, concatMap, filter, map } from 'rxjs/operators';\nimport { CurrentUser } from '../../../../pages/setting/interface/setting.interface';\n\nconst optionPicture = {\n  quality: 50,\n  allowEditing: true,\n  resultType: CameraResultType.DataUrl,\n  promptLabelPicture: 'カメラ',\n  promptLabelHeader: 'カメラ',\n  promptLabelPhoto: 'ライブラリから',\n  promptLabelCancel: 'キャンセル',\n};\n\n@Component({\n  selector: 'app-edit-profile-modal',\n  templateUrl: './edit-profile-modal.component.html',\n  styleUrls: ['./edit-profile-modal.component.scss'],\n})\n\nexport class EditProfileModalComponent implements OnInit {\n  @Input() status: string;\n  @Input() email: string;\n  @Input() userId: string;\n  @Input() user: CurrentUser;\n  @Input() name: string;\n  @Input() userIcon: string | null;\n\n  editProfileForm = new FormGroup({\n    id: new FormControl(''),\n    keyAvatarImage: new FormControl(),\n    userName: new FormControl('', [Validators.required]),\n    positionName: new FormControl(''),\n    targetEmail: new FormControl('', [Validators.required, Validators.email]),\n    tel: new FormControl(''),\n  });\n  title: string;\n  defaultIconImageUrl = '../../../../../assets/img/undefined.jpeg';\n\n  constructor(\n    private readonly modalCtrl: ModalController,\n    private logic: HomeLogic,\n  ) { }\n\n  ngOnInit(): void {\n    if (this.status === 'new') {\n      this.title = 'プロフィールの作成';\n      this.editProfileForm.patchValue({\n        id: this.userId,\n        targetEmail: this.email,\n        userName: this.name,\n      });\n    } else {\n      this.userIcon = this.userIcon;\n      this.title = 'プロフィールの編集';\n      this.editProfileForm.patchValue({\n        id: this.user.id,\n        targetEmail: this.user.email,\n        userName: this.user.username,\n        positionName: this.user.positionName,\n        tel: this.user.tel,\n        keyAvatarImage: this.user.iconImage,\n      });\n    }\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n  pickerImage(): void {\n    const observableIconImage = from(Camera.getPhoto(optionPicture));\n    let avatarImage: string;\n    observableIconImage\n      .pipe(map((data) => data.dataUrl))\n      .pipe(concatMap((dataUrl) => this.logic.uploadAvatarIconUrl(dataUrl, this.editProfileForm.get('id').value)))\n      .pipe(map(({ key }) => avatarImage = key))\n      .pipe(concatMap((key) => this.logic.getStorage(key)))\n      .pipe(catchError(() => of(false)))\n      .pipe(filter((result) => result))\n      .subscribe((avatarUrl) => {\n        this.userIcon = avatarUrl;\n        this.editProfileForm.patchValue({\n          keyAvatarImage: avatarImage,\n        });\n      });\n  }\n\n  saveProfile(): void {\n    const extraData = {\n      companyId: this.user.companyID,\n    }\n    const observableRegister = this.status === 'new' ?\n      this.logic.createUser(this.editProfileForm) : this.logic.updateUser(this.editProfileForm, extraData);\n    observableRegister.subscribe(() => this.modalCtrl.dismiss({}, this.status));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\n    margin: 0 auto;\n\n    .header {\n        height: 200px;\n\n        .avatar {\n            width: 120px;\n            height: 120px;\n            position: relative;\n            margin: 0 auto;\n\n            img {\n                display: block;\n                border-radius: 50%;\n                position: absolute;\n                bottom: calc(-1*(80px + 4px));\n                border: 3px solid #4dd0e1;\n            }\n        }\n    }\n}\n\n.card-body {\n    padding: 10px;\n    height: calc(100vh – (200px + 56px));\n    overflow: hidden;\n\n    .user-meta {\n        padding-top: 40px;\n    }\n}",
                    "styleUrl": "./edit-profile-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "HomeLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "HomeLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header translucent=\"true\">\n  <ion-toolbar>\n    <ion-title>{{ title }}</ion-title>\n    <ion-buttons *ngIf=\"status !== 'new'\" slot=\"start\">\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-button [disabled]=\"editProfileForm.invalid\" (click)=\"saveProfile()\"\n        >保存</ion-button\n      >\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"editProfileForm\">\n    <div class=\"card\">\n      <div class=\"header\">\n        <div class=\"avatar\">\n          <img\n            *ngIf=\"!userIcon\"\n            (click)=\"pickerImage()\"\n            [src]=\"defaultIconImageUrl\"\n            alt=\"icon-image\"\n          />\n          <img\n            *ngIf=\"userIcon\"\n            (click)=\"pickerImage()\"\n            [src]=\"userIcon\"\n            alt=\"icon-image\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"card-body\">\n      <div class=\"user-meta ion-text-center\">\n        <ion-item>\n          <ion-label position=\"stacked\">名前</ion-label>\n          <ion-input\n            formControlName=\"userName\"\n            placeholder=\"名前を追加\"\n          ></ion-input>\n        </ion-item>\n        <ion-item>\n          <ion-label position=\"stacked\">役割</ion-label>\n          <ion-input\n            formControlName=\"positionName\"\n            placeholder=\"役職や職種、ポジションなどを追加\"\n          ></ion-input>\n        </ion-item>\n        <ion-item>\n          <ion-label position=\"stacked\">Email</ion-label>\n          <ion-input\n            [disabled]=\"true\"\n            formControlName=\"targetEmail\"\n            placeholder=\"メールアドレスを追加\"\n          ></ion-input>\n        </ion-item>\n        <ion-item>\n          <ion-label position=\"stacked\">電話番号</ion-label>\n          <ion-input\n            formControlName=\"tel\"\n            placeholder=\"電話番号を追加\"\n          ></ion-input>\n        </ion-item>\n      </div>\n    </div>\n  </form>\n</ion-content>\n"
        },
        {
            "name": "EditRoomModalComponent",
            "id": "component-EditRoomModalComponent-5cb3321cdcede58abbd4a86314e77354",
            "file": "src/app/shared/component/modal/edit-room-modal/edit-room-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-room-modal",
            "styleUrls": [
                "./edit-room-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-room-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "GetRoomQuery"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { GetRoomQuery } from '../../../service/amplify.service';\n\n@Component({\n  selector: 'app-edit-room-modal',\n  templateUrl: './edit-room-modal.component.html',\n  styleUrls: ['./edit-room-modal.component.scss'],\n})\nexport class EditRoomModalComponent implements OnInit {\n\n  @Input() room: GetRoomQuery;\n\n  title: string;\n\n  constructor(\n    private readonly modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit(): void { }\n\n  saveRoom(): void {\n\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-room-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header translucent=\"true\">\n  <ion-toolbar>\n    <ion-title>{{ room.name }}</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"saveRoom()\">保存</ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomePage",
            "id": "component-HomePage-4d51f7cc99aa298a5ea5bccb6b000e2f",
            "file": "src/app/pages/home/home.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "roomGroupsItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ResponseListRoomGroupsQueryItems>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { concatMap, map } from 'rxjs/operators';\nimport { HomeLogic } from './logic/home.logic';\nimport { CurrentUser, Attribute } from './model/home.interface';\nimport { ResponseListRoomGroupsQueryItems } from './service/response/response.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss'],\n})\n\nexport class HomePage implements OnInit {\n  roomGroupsItems: Array<ResponseListRoomGroupsQueryItems>;\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n\n  constructor(\n    private logic: HomeLogic,\n  ) { }\n\n  ngOnInit(): void {\n    this.logic.fetchCurrentUser()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map((items) => this.currentUser = items[0]))\n      .pipe(concatMap(() => this.logic.fetchRoomList(this.currentUser.id)))\n      .pipe(concatMap((data) => this.logic.setExitsRoomAndUser(data)))\n      .subscribe((data) => {\n        this.roomGroupsItems = data;\n      });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "HomeLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "HomeLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header class=\"bg-gray-50\">\n  <ion-toolbar>\n    <ion-title>{{ currentUser?.company.name }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <app-list-room\n    class=\"bg-gray-50\"\n    [currentUser]=\"currentUser\"\n    [currentUserAttribute]=\"currentUserAttribute\"\n    [roomGroupsItems]=\"roomGroupsItems\"\n  ></app-list-room>\n</ion-content>\n"
        },
        {
            "name": "InviteMemberComponent",
            "id": "component-InviteMemberComponent-62d8579cdc0b0ddc959e1987b174d3c8",
            "file": "src/app/pages/member-list/component/modal/invite-member/invite-member.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invite-member",
            "styleUrls": [
                "./invite-member.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invite-member.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "CurrentUser"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyMembersForm",
                    "defaultValue": "new FormGroup({\n    companyMembers: new FormArray([\n      new FormGroup({\n        companyMemberEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n      })\n    ])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addCompanyMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dismissModal",
                    "args": [
                        {
                            "name": "result",
                            "type": "Array<CreateUserMutation> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "Array<CreateUserMutation> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerCompanyMembers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCompanyMember",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormArray, FormControl, Validators } from '@angular/forms';\nimport { ModalController } from '@ionic/angular';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\nimport { CreateUserMutation } from 'src/app/shared/service/amplify.service';\nimport { MemberListLogic } from '../../../logic/member-list.logic';\nimport { CurrentUser } from '../../../models/member-list.interface';\n\n@Component({\n  selector: 'app-invite-member',\n  templateUrl: './invite-member.component.html',\n  styleUrls: ['./invite-member.component.scss'],\n})\nexport class InviteMemberComponent implements OnInit {\n  @Input() currentUserInfo: CurrentUser\n\n  companyMembersForm = new FormGroup({\n    companyMembers: new FormArray([\n      new FormGroup({\n        companyMemberEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n      })\n    ])\n  });\n\n  get companyMemberForm(): FormGroup {\n    return new FormGroup({\n      companyMemberEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    })\n  }\n\n  get companyMemberArray(): FormArray {\n    return <FormArray>this.companyMembersForm.get('companyMembers');\n  }\n\n  constructor(\n    private readonly modalCtrl: ModalController,\n    private logic: MemberListLogic,\n  ) { }\n\n  ngOnInit(): void { }\n\n  dismissModal(result?: Array<CreateUserMutation> | null): Observable<boolean> {\n    return from(this.modalCtrl.dismiss(result));\n  }\n\n  addCompanyMember(): void {\n    this.companyMemberArray.push(this.companyMemberForm);\n  }\n\n  removeCompanyMember(index: number): void {\n    this.companyMemberArray.removeAt(index);\n  }\n\n  registerCompanyMembers(): void {\n    this.logic.registerCompanyMembers(this.companyMemberArray.value, this.currentUserInfo)\n      .pipe(concatMap((data) => this.dismissModal(data)))\n      .subscribe();\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./invite-member.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "MemberListLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "MemberListLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "companyMemberForm": {
                    "name": "companyMemberForm",
                    "getSignature": {
                        "name": "companyMemberForm",
                        "type": "",
                        "returnType": "FormGroup",
                        "line": 26
                    }
                },
                "companyMemberArray": {
                    "name": "companyMemberArray",
                    "getSignature": {
                        "name": "companyMemberArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 32
                    }
                }
            },
            "templateData": "<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title>メンバーの追加</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <form [formGroup]=\"companyMembersForm\">\n      <ng-container formArrayName=\"companyMembers\">\n        <ion-list-header>\n          <ion-label>メンバー</ion-label>\n          <ion-button (click)=\"addCompanyMember()\">追加</ion-button>\n        </ion-list-header>\n        <ng-container\n          *ngFor=\"let item of companyMemberArray.controls; let i = index\"\n        >\n          <ng-container [formGroupName]=\"i\">\n            <ion-item-divider>\n              <ion-buttons slot=\"start\">\n                <ion-button\n                  *ngIf=\"i !== 0\"\n                  color=\"danger\"\n                  (click)=\"removeCompanyMember(i)\"\n                >\n                  <ion-icon name=\"close-circle-outline\"></ion-icon>\n                </ion-button>\n              </ion-buttons>\n              <ion-label>{{ i + 1 }} 人目 </ion-label>\n            </ion-item-divider>\n            <ion-item>\n              <ion-label position=\"stacked\">Email</ion-label>\n              <ion-input formControlName=\"companyMemberEmail\"></ion-input>\n            </ion-item>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </form>\n  </ion-list>\n</ion-content>\n\n<ion-footer>\n  <ion-toolbar>\n    <ion-button\n      expand=\"block\"\n      [disabled]=\"companyMembersForm.invalid\"\n      (click)=\"registerCompanyMembers()\"\n    >\n      招待\n    </ion-button>\n  </ion-toolbar>\n</ion-footer>\n"
        },
        {
            "name": "ListRoomComponent",
            "id": "component-ListRoomComponent-fd7f715957c3c31d06f116aa86e1883f",
            "file": "src/app/pages/home/componet/list-room/list-room.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-room",
            "styleUrls": [
                "./list-room.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-room.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "CurrentUser"
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Attribute"
                },
                {
                    "name": "roomGroupsItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Array<ResponseListRoomGroupsQueryItems>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "subscriptionCreateRoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscriptionCreateRoomGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "subscriptionDeleteRoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subscriptionDeleteRoomGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subscriptionUpdateRoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "subscriptionUpdateRoomGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteRoom",
                    "args": [
                        {
                            "name": "roomId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "slideItem",
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRoomを削除します\n",
                    "description": "<p>Roomを削除します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3947,
                                "end": 3953,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "roomId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3941,
                                "end": 3946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>RoomのID</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3974,
                                "end": 3983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "slideItem"
                            },
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3968,
                                "end": 3973,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>SlideItem情報を取得します</p>\n"
                        }
                    ]
                },
                {
                    "name": "fetchGroupItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeApp",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToTask",
                    "args": [
                        {
                            "name": "room",
                            "type": "Room",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nタスク追加画面に遷移させます\n",
                    "description": "<p>タスク追加画面に遷移させます</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3697,
                                "end": 3701,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "room"
                            },
                            "type": "Room",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3691,
                                "end": 3696,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>部屋の情報</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentAddRoomItem",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRoomを作成するモーダルを表示させます\n",
                    "description": "<p>Roomを作成するモーダルを表示させます</p>\n",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2917,
                                "end": 2924,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Roomを増やすためのモーダルを表示させます</p>\n"
                        }
                    ]
                },
                {
                    "name": "presentDeleteAlert",
                    "args": [
                        {
                            "name": "item",
                            "type": "RoomGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "slideItem",
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nルームを削除するときの確認モーダルを表示させます\n",
                    "description": "<p>ルームを削除するときの確認モーダルを表示させます</p>\n",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4604,
                                "end": 4608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "RoomGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4598,
                                "end": 4603,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>RoomGroupの情報</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4634,
                                "end": 4643,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "slideItem"
                            },
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4628,
                                "end": 4633,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>SlideItemの情報</p>\n"
                        }
                    ]
                },
                {
                    "name": "presentStillExistsOwnTask",
                    "args": [
                        {
                            "name": "item",
                            "type": "RoomGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "slideItem",
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "RoomGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "slideItem",
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyDeleteTask",
                    "args": [
                        {
                            "name": "item",
                            "type": "RoomGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "slideItem",
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n削除対象のRoomの中に担当するタスクがあれば削除しないようにする\n",
                    "description": "<p>削除対象のRoomの中に担当するタスクがあれば削除しないようにする</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5911,
                                "end": 5915,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "item"
                            },
                            "type": "RoomGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5905,
                                "end": 5910,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>RoomGroupのItem</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5876,
                                "end": 5885,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "slideItem"
                            },
                            "type": "IonItemSliding",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5870,
                                "end": 5875,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>SlideItemの情報</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { ModalController, AlertController, IonItemSliding, Platform } from '@ionic/angular';\nimport { AddRoomModalComponent } from '../../../../shared/component/modal/add-room-modal/add-room-modal.component';\nimport { HomeLogic } from '../../logic/home.logic';\nimport { from, Subscription, Observable } from 'rxjs';\nimport { concatMap, filter } from 'rxjs/operators';\nimport { ResponseListRoomGroupsQueryItems } from '../../service/response/response.model';\nimport { Room, RoomGroup } from 'src/app/shared/service/amplify.service';\nimport { CurrentUser, Attribute, FetchTaskGroup } from '../../model/home.interface';\n\n@Component({\n  selector: 'app-list-room',\n  templateUrl: './list-room.component.html',\n  styleUrls: ['./list-room.component.scss'],\n})\nexport class ListRoomComponent implements OnInit {\n  @Input() roomGroupsItems: Array<ResponseListRoomGroupsQueryItems>;\n  @Input() currentUserAttribute: Attribute;\n  @Input() currentUser: CurrentUser;\n\n  subscriptionCreateRoom: Subscription;\n  subscriptionUpdateRoom: Subscription;\n  subscriptionDeleteRoom: Subscription;\n  subscriptionCreateRoomGroup: Subscription;\n  subscriptionUpdateRoomGroup: Subscription;\n  subscriptionDeleteRoomGroup: Subscription;\n\n  constructor(\n    private logic: HomeLogic,\n    private readonly modalCtrl: ModalController,\n    private readonly router: Router,\n    private readonly alertCtrl: AlertController,\n    private readonly platform: Platform,\n  ) {\n    this.initializeApp().subscribe(() => {\n      this.subscriptionCreateRoom = this.logic.onCreateRoomListener()\n        .subscribe({\n          next: () => this.fetchGroupItems(),\n        });\n\n      this.subscriptionUpdateRoom = this.logic.onUpdateRoomListener()\n        .subscribe({\n          next: () => this.fetchGroupItems(),\n        });\n\n      this.subscriptionDeleteRoom = this.logic.onDeleteRoomListener()\n        .subscribe({\n          next: () => this.fetchGroupItems(),\n        });\n\n      this.subscriptionCreateRoomGroup = this.logic.onCreateRoomGroupListener()\n        .subscribe({\n          next: () => this.fetchGroupItems(),\n        });\n\n      this.subscriptionUpdateRoomGroup = this.logic.onUpdateRoomGroupListener()\n        .subscribe({\n          next: () => this.fetchGroupItems(),\n        });\n\n      this.subscriptionDeleteRoomGroup = this.logic.onDeleteRoomGroupListener()\n        .subscribe({\n          next: () => this.fetchGroupItems(),\n        });\n    })\n  }\n\n  ngOnInit(): void { }\n\n  fetchGroupItems(): void {\n    this.logic.fetchRoomList(this.currentUser.id)\n      .pipe(concatMap((data) => this.logic.setExitsRoomAndUser(data)))\n      .subscribe((data) => {\n        this.roomGroupsItems = data;\n      });\n  }\n\n  initializeApp(): Observable<string> {\n    return from(this.platform.ready());\n  }\n\n  /**\n   * Roomを作成するモーダルを表示させます\n   * @returns Roomを増やすためのモーダルを表示させます\n   */\n  async presentAddRoomItem(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddRoomModalComponent,\n    });\n    const observable = from(modal.onDidDismiss());\n    observable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(concatMap(({ data }) => this.logic.createRoom(data, this.currentUser)))\n      .pipe(concatMap((room) => this.logic.createUserRoomGroup(this.currentUser.id, room.id)))\n      .pipe(concatMap(() => this.logic.fetchRoomList(this.currentUser.id)))\n      .pipe(concatMap((data) => this.logic.setExitsRoomAndUser(data)))\n      .subscribe((response) => {\n        this.roomGroupsItems = response;\n      });\n    return modal.present();\n  }\n\n  /**\n   * タスク追加画面に遷移させます\n   * @param room 部屋の情報\n   */\n  navigateToTask(room: Room): void {\n    const navigationExtras: NavigationExtras = {\n      state: { status: 'active' }\n    }\n    this.router.navigate(['task', `${room.id}`], navigationExtras);\n  }\n\n  /**\n   * Roomを削除します\n   * @param roomId RoomのID\n   * @param slideItem SlideItem情報を取得します\n   */\n  deleteRoom(roomId: string, slideItem: IonItemSliding): void {\n    this.logic.fetchRoomMembers(roomId, this.currentUser.id)\n      .pipe(concatMap((data) => data.length === 0 ?\n        this.logic.deleteRoomItem(roomId) : this.logic.removeMeFromRoom(roomId, this.currentUser.id))\n      )\n      .pipe(concatMap(() => this.logic.fetchRoomList(this.currentUser.id)))\n      .pipe(concatMap((data) => this.logic.setExitsRoomAndUser(data)))\n      .subscribe((result) => {\n        this.roomGroupsItems = result;\n        slideItem.close();\n      });\n  }\n\n\n\n  /**\n   * ルームを削除するときの確認モーダルを表示させます\n   * @param item RoomGroupの情報\n   * @param slideItem SlideItemの情報\n   */\n  async presentDeleteAlert(item: RoomGroup, slideItem: IonItemSliding): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '項目を削除します',\n      subHeader: `${item.room.name}を削除します。よろしいでしょうか？`,\n      message: '参加者がいなければ完全に消えます。参加者がいる場合は退出します。',\n      buttons: [\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n          handler: () => {\n            slideItem.close();\n          }\n        },\n        {\n          text: 'OK',\n          role: 'ok',\n          handler: () => {\n            this.deleteRoom(item.roomID, slideItem);\n            // this.verifyDeleteTask(slideItem, item);\n            // this.presentStillExistsOwnTask()\n          }\n        }\n      ]\n    });\n    alert.present();\n  }\n\n  async presentStillExistsOwnTask(item: RoomGroup, slideItem: IonItemSliding): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '担当タスクがまだ残っています',\n      message: '担当タスクを他の方に変更するか、終わっていればステータスをDONEにしてください',\n      buttons: [\n        {\n          text: 'OK',\n          role: 'ok',\n          handler: () => {\n            slideItem.close();\n          }\n        },\n      ]\n    });\n    alert.present();\n  }\n\n  /**\n   * 削除対象のRoomの中に担当するタスクがあれば削除しないようにする\n   * @param slideItem SlideItemの情報\n   * @param item RoomGroupのItem\n   */\n  verifyDeleteTask(item: RoomGroup, slideItem: IonItemSliding): void {\n    this.logic.fetchUserInfo(item.userID)\n      .pipe(concatMap((data) => this.logic.verifyExistTaskOnRoom(data.chargeTask.items, item.roomID)))\n      .subscribe((isExist) => {\n        isExist ? this.presentStillExistsOwnTask(item, slideItem) : this.presentDeleteAlert(item, slideItem);\n      })\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionCreateRoom.unsubscribe();\n    this.subscriptionUpdateRoom.unsubscribe();\n    this.subscriptionDeleteRoom.unsubscribe();\n    this.subscriptionCreateRoomGroup.unsubscribe();\n    this.subscriptionUpdateRoomGroup.unsubscribe();\n    this.subscriptionDeleteRoomGroup.unsubscribe();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-room.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "HomeLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "HomeLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-list>\n  <ion-list-header>\n    <ion-label>Want to</ion-label>\n    <ion-button (click)=\"presentAddRoomItem()\">\n      <ion-icon name=\"add-outline\"></ion-icon>\n    </ion-button>\n  </ion-list-header>\n  <ion-item-sliding #slidingItem *ngFor=\"let item of roomGroupsItems\">\n    <ion-item (click)=\"navigateToTask(item.room)\">\n      <ion-label>\n        <h2>{{ item.room?.name }}</h2>\n        <p>{{ item.room?.description }}</p>\n      </ion-label>\n    </ion-item>\n    <ion-item-options side=\"end\">\n      <ion-item-option color=\"danger\">\n        <ion-icon\n          slot=\"icon-only\"\n          name=\"trash\"\n          (click)=\"verifyDeleteTask(item, slidingItem)\"\n        ></ion-icon>\n      </ion-item-option>\n    </ion-item-options>\n  </ion-item-sliding>\n</ion-list>\n"
        },
        {
            "name": "LoginPage",
            "id": "component-LoginPage-9232f8f8def8a6b999dc18173ab1f2c5",
            "file": "src/app/pages/login/login.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { LoginLogic } from './logic/login-logic.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required]),\n  })\n\n  constructor(\n    private logic: LoginLogic,\n    private readonly router: Router\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n  login(): void {\n    const email = this.loginForm.get('email').value;\n    const password = this.loginForm.get('password').value;\n    this.logic.sendLoginInfo(email, password).subscribe(() => {\n      this.router.navigate(['']);\n    })\n  }\n\n  navigateToSignUp(): void {\n    this.router.navigate(['/signup']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".center-text {\n    text-align: center;\n}\n\n.login-button {\n    margin: 10px 0px;\n}\n\n.center {\n    margin: 30% 0;\n}\n\n.padding-button {\n    margin-top: 10%;\n}",
                    "styleUrl": "./login.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "LoginLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "LoginLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-content class=\"ion-padding\">\n  <div class=\"center\">\n    <div class=\"center-text\">\n      <h4>Wantto</h4>\n    </div>\n    <form [formGroup]=\"loginForm\">\n      <ion-item class=\"item-padding\">\n        <ion-label position=\"stacked\">Email</ion-label>\n        <ion-input formControlName=\"email\"></ion-input>\n      </ion-item>\n      <ion-item class=\"item-padding\">\n        <ion-label position=\"stacked\">パスワード</ion-label>\n        <ion-input type=\"password\" formControlName=\"password\"></ion-input>\n      </ion-item>\n      <ion-button\n        class=\"padding-button\"\n        (click)=\"login()\"\n        expand=\"block\"\n        [disabled]=\"loginForm.invalid\"\n      >\n        ログイン\n      </ion-button>\n    </form>\n    <!-- <div class=\"center-text\">\n      <a (click)=\"navigateToSignUp()\">新規登録</a>\n    </div> -->\n  </div>\n</ion-content>\n"
        },
        {
            "name": "MemberDetailModalComponent",
            "id": "component-MemberDetailModalComponent-c0a462444fb75e5ac7104d04cb58606f",
            "file": "src/app/shared/component/modal/member-detail-modal/member-detail-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-member-detail-modal",
            "styleUrls": [
                "./member-detail-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./member-detail-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "detailUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "CurrentUser"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultIconImageUrl",
                    "defaultValue": "'../../../../../assets/img/undefined.jpeg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userIconImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { concatMap, filter } from 'rxjs/operators';\nimport { CurrentUser } from 'src/app/pages/member-list/models/member-list.interface';\nimport { MemberListLogic } from 'src/app/pages/member-list/logic/member-list.logic';\n\n@Component({\n  selector: 'app-member-detail-modal',\n  templateUrl: './member-detail-modal.component.html',\n  styleUrls: ['./member-detail-modal.component.scss'],\n})\nexport class MemberDetailModalComponent implements OnInit {\n  @Input() detailUser: CurrentUser;\n  userIconImageUrl: string;\n  defaultIconImageUrl = '../../../../../assets/img/undefined.jpeg';\n\n  constructor(\n    private readonly modalCtrl: ModalController,\n    private readonly logic: MemberListLogic,\n  ) { }\n\n  ngOnInit(): void {\n    this.logic.modifiedAvatarIconUrl(this.detailUser.iconImage).subscribe(data => {\n      this.userIconImageUrl = data;\n    })\n  }\n\n  dismissModal(): void {\n    this.modalCtrl.dismiss();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\n    margin: 0 auto;\n\n    .header {\n        height: 200px;\n\n        .avatar {\n            width: 120px;\n            height: 120px;\n            position: relative;\n            margin: 0 auto;\n\n            img {\n                display: block;\n                border-radius: 50%;\n                position: absolute;\n                bottom: calc(-1*(80px + 4px));\n                border: 3px solid #4dd0e1;\n            }\n        }\n    }\n}\n\n.card-body {\n    padding: 10px;\n    height: calc(100vh – (200px + 56px));\n    overflow: hidden;\n\n    .user-meta {\n        padding-top: 40px;\n    }\n}",
                    "styleUrl": "./member-detail-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "MemberListLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "MemberListLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header translate=\"true\">\n  <ion-toolbar>\n    <ion-title>メンバーの詳細</ion-title>\n    <ion-buttons>\n      <ion-button (click)=\"dismissModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div class=\"card\">\n    <div class=\"header\">\n      <div class=\"avatar\">\n        <img\n          *ngIf=\"!userIconImageUrl\"\n          [src]=\"defaultIconImageUrl\"\n          alt=\"icon-image\"\n        />\n        <img\n          *ngIf=\"userIconImageUrl\"\n          [src]=\"userIconImageUrl\"\n          alt=\"icon-image\"\n        />\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card-body\">\n    <div class=\"user-meta ion-text-center\">\n      <ion-item>\n        <ion-label position=\"stacked\">名前</ion-label>\n        <ion-text>{{ detailUser.username }}</ion-text>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">役割</ion-label>\n        <ion-text>{{ detailUser.positionName }}</ion-text>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">Email</ion-label>\n        <ion-text>{{ detailUser.email }}</ion-text>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">電話番号</ion-label>\n        <ion-text>{{ detailUser.tel }}</ion-text>\n      </ion-item>\n    </div>\n  </div>\n</ion-content>\n"
        },
        {
            "name": "MemberListPage",
            "id": "component-MemberListPage-714514c473a46076ff57042c831546ad",
            "file": "src/app/pages/member-list/member-list.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-member-list",
            "styleUrls": [
                "./member-list.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./member-list.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CompanyMember>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "goBackToSetting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n前ページに戻ります\n",
                    "description": "<p>前ページに戻ります</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentInviteMembers",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentMemberDetail",
                    "args": [
                        {
                            "name": "member",
                            "type": "CurrentUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "CurrentUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { Location } from '@angular/common';\nimport { from } from 'rxjs';\nimport { map, concatMap, filter } from 'rxjs/operators';\nimport { MemberListLogic } from './logic/member-list.logic';\nimport { InviteMemberComponent } from './component/modal/invite-member/invite-member.component';\nimport { MemberDetailModalComponent } from '../../shared/component/modal/member-detail-modal/member-detail-modal.component';\nimport { CurrentUser, Attribute, CompanyMember } from './models/member-list.interface';\n\n@Component({\n  selector: 'app-member-list',\n  templateUrl: './member-list.page.html',\n  styleUrls: ['./member-list.page.scss'],\n})\nexport class MemberListPage implements OnInit {\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n  companyMembers: Array<CompanyMember>;\n\n  constructor(\n    private logic: MemberListLogic,\n    private readonly location: Location,\n    private readonly modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit(): void {\n    this.logic.fetchCurrentUser()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map((items) => this.currentUser = items[0]))\n      .pipe(concatMap((currentUser) => this.logic.fetchCompanyMembers(currentUser.companyID)))\n      .pipe(concatMap((members) => this.logic.setCompanyMembers(members, this.currentUser.id)))\n      .subscribe((members) => {\n        this.companyMembers = members;\n        this.companyMembers.unshift(this.currentUser);\n      });\n  }\n\n  /**\n   * 前ページに戻ります\n   */\n  goBackToSetting(): void {\n    this.location.back();\n  }\n\n  async presentInviteMembers(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: InviteMemberComponent,\n      componentProps: {\n        'currentUserInfo': this.currentUser,\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(filter((data) => data !== null))\n      .pipe(concatMap(() => this.logic.fetchCompanyMembers(this.currentUser.companyID)))\n      .subscribe((data) => {\n        this.companyMembers = data;\n      });\n    return modal.present();\n  }\n\n  async presentMemberDetail(member: CurrentUser): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: MemberDetailModalComponent,\n      componentProps: {\n        'detailUser': member,\n      },\n    });\n    return modal.present();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./member-list.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "MemberListLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "MemberListLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>メンバー</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"goBackToSetting()\">\n        <ion-icon name=\"chevron-back-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"presentInviteMembers()\">招待</ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n  <ion-toolbar>\n    <ion-searchbar placeholder=\"検索\"></ion-searchbar>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <ion-item\n      *ngFor=\"let member of companyMembers\"\n      (click)=\"presentMemberDetail(member)\"\n    >\n      <ng-container *ngIf=\"member.username === null && !member.registered\">\n        <ion-label>{{member.email}}</ion-label>\n        <ion-note slot=\"end\">招待中</ion-note>\n      </ng-container>\n      <ng-container>\n        <ion-text> {{ member.username }} </ion-text>\n        <ion-badge\n          *ngIf=\"member.id === currentUser.id\"\n          color=\"medium\"\n          slot=\"end\"\n          >本人</ion-badge\n        >\n      </ng-container>\n    </ion-item>\n  </ion-list>\n</ion-content>\n"
        },
        {
            "name": "NoContentComponent",
            "id": "component-NoContentComponent-1383b1bada813cc35aa95cf01f2f6024",
            "file": "src/app/shared/component/no-content/no-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-no-content",
            "styleUrls": [
                "./no-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./no-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pageKind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "viewValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\nconst viewKind = [\n  { value: 'room', name: 'ルーム' },\n  { value: 'task', name: 'タスク' },\n];\n\n@Component({\n  selector: 'app-no-content',\n  templateUrl: './no-content.component.html',\n  styleUrls: ['./no-content.component.scss'],\n})\nexport class NoContentComponent implements OnInit {\n\n  @Input() pageKind: string;\n  viewValue: { value: string, name: string };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.viewValue = viewKind.find(item => item.value === this.pageKind);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./no-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>{{ viewValue.name }} を追加しましょう。</p>\n"
        },
        {
            "name": "OwnTaskPage",
            "id": "component-OwnTaskPage-c454ac5b521ccab4c35dc33dcada8b85",
            "file": "src/app/pages/own-task/own-task.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-own-task",
            "styleUrls": [
                "./own-task.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./own-task.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "ownTaskItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ionViewWillEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToTaskDetail",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentDoneTaskAlert",
                    "args": [
                        {
                            "name": "alertBody",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "alertBody",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "presentDoneToast",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { LoadingController, AlertController, ToastController } from '@ionic/angular';\nimport { from } from 'rxjs';\nimport { concatMap, map, tap } from 'rxjs/operators';\nimport { OwnTaskLogic } from './logic/own-task.logic';\nimport { Attribute, CurrentUser } from './model/own-task.interface';\n\n@Component({\n  selector: 'app-own-task',\n  templateUrl: './own-task.page.html',\n  styleUrls: ['./own-task.page.scss'],\n})\nexport class OwnTaskPage implements OnInit {\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n  ownTaskItems: Array<any>;\n  currentUserId: string;\n\n  constructor(\n    private router: Router,\n    private loadingCtrl: LoadingController,\n    private logic: OwnTaskLogic,\n    private alertCtrl: AlertController,\n    private readonly toastCtrl: ToastController,\n  ) { }\n\n  ngOnInit() {\n    this.logic.fetchCurrentUser()\n      .pipe(map(result => this.currentUserAttribute = result))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map((items) => this.currentUser = items[0]))\n      .pipe(concatMap(() => this.logic.getTaskChargeItems(this.currentUser.id)))\n      .pipe(concatMap(({ items }) => this.logic.setTaskPerRoom(items)))\n      .pipe(concatMap((items) => this.logic.filterExceptDoneTask(items)))\n      .subscribe((items) => {\n        this.ownTaskItems = items;\n      })\n  }\n\n  ionViewWillEnter() {\n  }\n\n  async presentLoading() {\n    const loading = await this.loadingCtrl.create({\n      cssClass: 'custom-loading',\n      message: '読込中...',\n      translucent: true,\n      backdropDismiss: true\n    });\n    await loading.present();\n    await loading.onDidDismiss();\n  }\n\n  navigateToTaskDetail(item) {\n    this.router.navigate(['task-detail', `${item.task.id}`, `active`]);\n  }\n\n  async presentDoneTaskAlert(alertBody): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '完了にしますか？',\n      message: `${alertBody.task.title}を完了します。`,\n      buttons: [\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        },\n        {\n          text: 'OK',\n          role: 'ok',\n          handler: () => {\n            const presentToast = from(this.presentDoneToast());\n            this.logic.updateDoneTaskItem(alertBody, 10)\n              .pipe(tap(() => presentToast))\n              .pipe(concatMap(() => this.logic.getTaskChargeItems(this.currentUserId)))\n              .pipe(concatMap(({ items }) => this.logic.setTaskPerRoom(items)))\n              .pipe(concatMap((items) => this.logic.filterExceptDoneTask(items)))\n              .subscribe((data) => {\n                this.ownTaskItems = data;\n              })\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  async presentDoneToast(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: 'おつかれさまでした',\n      duration: 5000,\n    });\n    toast.present();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-header {\n    margin-top: 5px;\n}\n\n.card-margin {\n    margin: auto;\n}\n\n.card-background {\n    --background: '#1c1c1d';\n}\n\n.task-card-content {\n    padding-top: 30px;\n    padding-bottom: 10px\n}\n\n.button-center {\n    text-align: center;\n    margin: 0;\n}",
                    "styleUrl": "./own-task.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingCtrl",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "OwnTaskLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastCtrl",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingCtrl",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "OwnTaskLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastCtrl",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>担当タスク</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list class=\"list-header\">\n    <ion-card *ngFor=\"let item of ownTaskItems\">\n      <ion-card-header (click)=\"navigateToTaskDetail(item)\">\n        <ion-card-subtitle>\n          {{item.room.name}} {{ item.task.scheduleDate | date: 'yyyy/MM/dd'\n          }}まで\n        </ion-card-subtitle>\n        <ion-card-title>{{item.task.title}}</ion-card-title>\n      </ion-card-header>\n      <ion-card-content (click)=\"navigateToTaskDetail(item)\">\n        <ion-item class=\"card-background\" lines=\"none\">\n          <p>{{ item.task.description}}</p>\n        </ion-item>\n      </ion-card-content>\n      <ion-button\n        expand=\"full\"\n        class=\"button-center\"\n        (click)=\"presentDoneTaskAlert(item)\"\n        color=\"primary\"\n      >\n        <ion-icon name=\"checkmark\"></ion-icon>\n      </ion-button>\n    </ion-card>\n  </ion-list>\n</ion-content>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegistrationCompanyPage",
            "id": "component-RegistrationCompanyPage-2590f78e3ac51a2638afcebc1aa1bde6",
            "file": "src/app/pages/registration-company/registration-company.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration-company",
            "styleUrls": [
                "./registration-company.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration-company.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyForm",
                    "defaultValue": "new FormGroup({\n    companyIcon: new FormControl(''),\n    companyName: new FormControl('', [Validators.required]),\n    companyEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    companyTel: new FormControl('', Validators.compose([Validators.required, Validators.pattern(/\\d{10}/)])), // 数字10桁\n    companyOfficer: new FormArray([new FormGroup({\n      officerName: new FormControl('', Validators.compose([Validators.required])),\n      officerEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    })]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "companyInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Company",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "slides",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IonSlides",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'companySlides', {static: false}"
                        }
                    ]
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addOfficerMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n担当者を画面に追加します\n",
                    "description": "<p>担当者を画面に追加します</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentCorrectToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTokenが正常のときに表示します\n",
                    "description": "<p>Tokenが正常のときに表示します</p>\n",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentIncorrectToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTokenが間違っていれば、ホーム画面に戻す注意書きと一緒に表示します。\n",
                    "description": "<p>Tokenが間違っていれば、ホーム画面に戻す注意書きと一緒に表示します。</p>\n",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "registerCompany",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n 会社を本登録します\n",
                    "description": "<p> 会社を本登録します</p>\n"
                },
                {
                    "name": "removeOfficer",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n担当者を画面から削除します\n",
                    "description": "<p>担当者を画面から削除します</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4130,
                                "end": 4135,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4124,
                                "end": 4129,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>FormArrayのIndex値</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormControl, FormArray, Validators } from '@angular/forms';\nimport { AlertController, IonSlides } from '@ionic/angular';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { Company } from 'src/app/shared/service/amplify.service';\nimport { RegistrationCompanyLogic } from './logic/registration-company.logic';\n\n@Component({\n  selector: 'app-registration-company',\n  templateUrl: './registration-company.page.html',\n  styleUrls: ['./registration-company.page.scss'],\n})\nexport class RegistrationCompanyPage implements OnInit {\n  @ViewChild('companySlides', { static: false }) slides: IonSlides;\n  companyInfo: Company;\n  companyForm = new FormGroup({\n    companyIcon: new FormControl(''),\n    companyName: new FormControl('', [Validators.required]),\n    companyEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    companyTel: new FormControl('', Validators.compose([Validators.required, Validators.pattern(/\\d{10}/)])), // 数字10桁\n    companyOfficer: new FormArray([new FormGroup({\n      officerName: new FormControl('', Validators.compose([Validators.required])),\n      officerEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    })]),\n  });\n\n  token: string;\n\n  get officerForm(): FormGroup {\n    return new FormGroup({\n      officerName: new FormControl('', Validators.compose([Validators.required])),\n      officerEmail: new FormControl('', Validators.compose([Validators.required, Validators.email])),\n    });\n  }\n\n  get officerArray(): FormArray {\n    return <FormArray>this.companyForm.get('companyOfficer');\n  }\n\n  constructor(\n    private readonly alertCtrl: AlertController,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private logic: RegistrationCompanyLogic,\n  ) { }\n\n  ngOnInit(): void {\n    // これはNgOnInitの処理とする\n    // this.logic.isValidOneTimePassword(this.token, this.companyInfo.id)\n    this.route.queryParams.pipe(filter(params => params.token))\n      .pipe(map(({ token }) => this.token = token))\n      .pipe(concatMap((token) => this.logic.fetchCompanyInfo(token)))\n      .pipe(map(({ items }) => items))\n      .subscribe((result) => {\n        this.companyInfo = result[0];\n        this.companyForm.patchValue({\n          companyName: this.companyInfo.name,\n        });\n        this.officerArray.patchValue([{\n          officerName: this.companyInfo.officer[0].officerName,\n          officerEmail: this.companyInfo.officer[0].officerEmail,\n        }])\n        this.presentCorrectToken();\n      })\n  }\n\n  /**\n   * Tokenが正常のときに表示します\n   */\n  async presentCorrectToken(): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '確認いたしました',\n      message: '本登録を進めてください',\n      buttons: ['OK'],  // Alertを閉じるのみ\n    });\n    await alert.present();\n  }\n\n  /**\n   * Tokenが間違っていれば、ホーム画面に戻す注意書きと一緒に表示します。\n   */\n  async presentIncorrectToken(): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '不正です',\n      message: '正常な登録ができませんでした。正常な登録処理を行い、メール内容のリンクをクリックをクリックし登録作業を行ってください',\n      buttons: [\n        {\n          text: 'OK',\n          role: 'incorrect',\n          handler: () => {\n            this.router.navigate(['/create-company']);\n          },\n        }\n      ],\n    });\n    await alert.present();\n  }\n\n  /**\n   *  会社を本登録します\n   */\n  registerCompany(): void {\n    this.logic.updateCompanyInfo(this.companyInfo, this.companyForm.value)\n      .pipe(concatMap(() => this.logic.createCompanyMembersToDynamoDb(this.companyInfo, this.officerArray.value)))\n      // Officerに会員登録用のURLをメール送信し、そこにはCompanyと紐付けられるようにする\n      .pipe(concatMap(() => this.logic.sendToOfficerForRegister(this.companyInfo, this.officerArray.value)))\n      .subscribe(() => {\n        this.router.navigate(['/complete-register'], { queryParams: { status: 'done' } });\n      });\n  }\n\n  /**\n   * 担当者を画面に追加します\n   */\n  addOfficerMember(): void {\n    this.officerArray.push(this.officerForm);\n  }\n\n  /**\n   * 担当者を画面から削除します\n   * @param index FormArrayのIndex値\n   */\n  removeOfficer(index: number): void {\n    this.officerArray.removeAt(index);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-content {\n    margin: 10% 5% 20% 5%;\n}\n\nion-slides {\n    width: 100%\n}",
                    "styleUrl": "./registration-company.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "RegistrationCompanyLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "RegistrationCompanyLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "officerForm": {
                    "name": "officerForm",
                    "getSignature": {
                        "name": "officerForm",
                        "type": "",
                        "returnType": "FormGroup",
                        "line": 30
                    }
                },
                "officerArray": {
                    "name": "officerArray",
                    "getSignature": {
                        "name": "officerArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 37
                    }
                }
            },
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>会社を登録する</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"companyForm\" class=\"form-content\">\n    <ion-list>\n      <ion-list-header>\n        <ion-label>基本情報</ion-label>\n      </ion-list-header>\n      <ion-item>\n        <ion-label position=\"stacked\">会社名</ion-label>\n        <ion-input formControlName=\"companyName\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">会社のメールアドレス</ion-label>\n        <ion-input formControlName=\"companyEmail\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"stacked\">会社の電話番号</ion-label>\n        <ion-input formControlName=\"companyTel\"></ion-input>\n      </ion-item>\n\n      <ng-container formArrayName=\"companyOfficer\">\n        <ion-list-header>\n          <ion-label>担当者</ion-label>\n          <ion-button (click)=\"addOfficerMember()\">追加</ion-button>\n        </ion-list-header>\n        <ng-container\n          *ngFor=\"let officerGroup of officerArray.controls; let i = index\"\n        >\n          <ng-container [formGroupName]=\"i\">\n            <ion-item-divider>\n              <ion-buttons slot=\"start\">\n                <ion-button\n                  *ngIf=\"i !== 0\"\n                  color=\"danger\"\n                  (click)=\"removeOfficer(i)\"\n                >\n                  <ion-icon name=\"close-circle-outline\"></ion-icon>\n                </ion-button>\n              </ion-buttons>\n              <ion-label> {{i+1}} 人目 </ion-label>\n            </ion-item-divider>\n            <ion-item [disabled]=\"i === 0\">\n              <ion-label position=\"stacked\">担当者名</ion-label>\n              <ion-input formControlName=\"officerName\"></ion-input>\n            </ion-item>\n            <ion-item [disabled]=\"i === 0\">\n              <ion-label position=\"stacked\">担当者Email</ion-label>\n              <ion-input formControlName=\"officerEmail\"></ion-input>\n            </ion-item>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ion-list>\n  </form>\n</ion-content>\n<ion-footer>\n  <ion-toolbar>\n    <ion-button\n      expand=\"block\"\n      [disabled]=\"companyForm.invalid\"\n      (click)=\"registerCompany()\"\n      >登録</ion-button\n    >\n  </ion-toolbar>\n</ion-footer>\n"
        },
        {
            "name": "RoomMembersPage",
            "id": "component-RoomMembersPage-87ce4a4b1456a4e2c929c31a38f4dccb",
            "file": "src/app/pages/room-members/room-members.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-room-members",
            "styleUrls": [
                "./room-members.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./room-members.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "companyMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "currentUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "notAssignMembers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<MemberTask>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "roomId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "roomMembers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscriptionCreateRoomMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subscriptionDeleteRoomMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptionUpdateRoomMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addMemberOnRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "checkNotAssignMember",
                    "args": [
                        {
                            "name": "companyMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roomMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "companyMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roomMembers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRoomMembers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goBackToRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeApp",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchRoomMembers",
                    "args": [
                        {
                            "name": "ev",
                            "type": "CustomEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "CustomEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withdrawalFromAnyRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ModalController, Platform } from '@ionic/angular';\nimport { from, Observable, Subscription } from 'rxjs';\nimport { concatMap, map, switchMap, filter } from 'rxjs/operators';\nimport { RoomMembersLogic } from './logic/room-members.logic';\nimport { AddPersonModalComponent } from '../task/component/add-person-modal/add-person-modal.component';\nimport { CurrentUser, Attribute } from './models/room-members.model';\nimport { MemberTask } from 'src/app/pages/task/model/task-member.model';\n\n@Component({\n  selector: 'app-room-members',\n  templateUrl: './room-members.page.html',\n  styleUrls: ['./room-members.page.scss'],\n})\nexport class RoomMembersPage implements OnInit {\n  currentUserId: string;\n  companyId: number | string;\n  roomId: string;\n  companyMembers: any;\n  roomMembers = [];\n  notAssignMembers: Array<MemberTask> = [];\n\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n\n  subscriptionCreateRoomMember: Subscription;\n  subscriptionUpdateRoomMember: Subscription;\n  subscriptionDeleteRoomMember: Subscription;\n\n  constructor(\n    private readonly logic: RoomMembersLogic,\n    private readonly modalCtrl: ModalController,\n    private readonly location: Location,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly platform: Platform,\n  ) {\n    this.initializeApp().subscribe(() => {\n      this.subscriptionCreateRoomMember = this.logic.onCreateRoomMemberListener()\n        .subscribe({\n          next: () => this.fetchRoomMembers(),\n        });\n      this.subscriptionUpdateRoomMember = this.logic.onUpdateRoomMemberListener().subscribe({\n        next: () => this.fetchRoomMembers(),\n      })\n      this.subscriptionDeleteRoomMember = this.logic.onDeleteRoomMemberListener().subscribe({\n        next: () => this.fetchRoomMembers(),\n      })\n    })\n  }\n\n  initializeApp(): Observable<string> {\n    return from(this.platform.ready());\n  }\n\n  fetchRoomMembers(): void {\n    this.logic.fetchRoomMembers(this.roomId)\n      .pipe(concatMap(({ items: members }) => this.logic.setRoomMembers(members, this.currentUser.id)))\n      .subscribe((members) => {\n        this.roomMembers = members;\n        this.roomMembers.unshift(this.currentUser);\n        this.notAssignMembers = this.checkNotAssignMember(this.companyMembers, this.roomMembers);\n      });\n  }\n\n  ngOnInit(): void {\n    this.notAssignMembers = [];\n    this.companyId = this.route.snapshot.paramMap.get('companyId');\n    this.roomId = this.route.snapshot.paramMap.get('roomId');\n    this.logic.fetchCurrentUser()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map((items) => this.currentUser = items[0]))\n      .pipe(concatMap(() => this.logic.fetchRoomMemberGroup(this.roomId)))\n      .pipe(concatMap((result) => this.logic.setRoomMembers(result, this.currentUser.id)))\n      .pipe(map((members) => this.roomMembers = members))\n      .pipe(concatMap(() => this.logic.fetchCompanyMember(this.companyId)))\n      .subscribe((data) => {\n        this.companyMembers = data.items;\n        this.roomMembers.unshift(this.currentUser);\n        this.notAssignMembers = this.checkNotAssignMember(this.companyMembers, this.roomMembers);\n      });\n  }\n\n  checkNotAssignMember(companyMembers, roomMembers): Array<any> {\n    return companyMembers.filter((companyMember) => {\n      return !roomMembers.some((roomMember) => {\n        return companyMember.id === roomMember.id;\n      })\n    });\n  }\n\n  goBackToRoom(): void {\n    this.location.back();\n  }\n\n  withdrawalFromAnyRoom(): void {\n    this.logic.fetchRoomMembersExceptOwn(this.roomId, this.currentUser.id)\n      .pipe(switchMap((data) => data.length === 0 ?\n        this.logic.deleteRoomItem(this.roomId) : this.logic.removeOwnFromRoom(this.roomId, this.currentUser.id)\n      ))\n      .subscribe(() => {\n        this.router.navigate(['/home']);\n      })\n  }\n\n  searchRoomMembers(ev: CustomEvent): void {\n    const nameQuery = ev.detail.value;\n    if (nameQuery !== null) {\n      this.logic.fetchRoomMembers(this.roomId, nameQuery)\n        .pipe(map((result) => result.items))\n        .subscribe((items) => {\n          this.roomMembers = items;\n        })\n    } else {\n      this.logic.fetchRoomMembers(this.roomId)\n        .pipe(map((result) => result.items))\n        .subscribe(() => { });\n    }\n  }\n\n  async addMemberOnRoom(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddPersonModalComponent,\n      componentProps: {\n        notAssignMembers: this.notAssignMembers,\n        companyMembers: this.companyMembers,\n        companyId: this.companyId,\n        roomId: this.roomId,\n      }\n    });\n    const observableDismiss = from(modal.onDidDismiss());\n    observableDismiss\n      .pipe(filter(({ data }) => data.result === 'dismiss'))\n      .pipe(concatMap(() => this.logic.fetchRoomMembers(this.roomId)))\n      .pipe(concatMap(({ items: members }) => this.logic.setRoomMembers(members, this.currentUser.id)))\n      .subscribe((members) => {\n        this.roomMembers = members;\n        this.roomMembers.unshift(this.currentUser);\n        this.notAssignMembers = this.checkNotAssignMember(this.companyMembers, this.roomMembers);\n      })\n    return modal.present();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionCreateRoomMember.unsubscribe();\n    this.subscriptionUpdateRoomMember.unsubscribe();\n    this.subscriptionDeleteRoomMember.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./room-members.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "RoomMembersLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "RoomMembersLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>メンバー</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"goBackToRoom()\">\n        <ion-icon name=\"chevron-back-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"withdrawalFromAnyRoom()\">退出</ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-item (click)=\"addMemberOnRoom()\">\n    <ion-icon name=\"add-outline\"></ion-icon>\n    <ion-label>メンバーの追加</ion-label>\n  </ion-item>\n  <ion-list>\n    <ion-item-divider>\n      <ion-label>メンバー</ion-label>\n    </ion-item-divider>\n    <ion-item *ngFor=\"let member of roomMembers; index as i\">\n      <ion-label>\n        <h2>{{ member.username}}</h2>\n        <p>{{ member.positionName}}</p>\n      </ion-label>\n      <ion-badge *ngIf=\"i === 0\" slot=\"end\" color=\"medium\">本人</ion-badge>\n    </ion-item>\n  </ion-list>\n</ion-content>\n"
        },
        {
            "name": "SettingPage",
            "id": "component-SettingPage-f33593f3e220525531991da20955ff0c",
            "file": "src/app/pages/setting/setting.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-setting",
            "styleUrls": [
                "./setting.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./setting.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ButtonEdit",
                    "defaultValue": "[\n    {\n      text: '\bログアウト',\n      role: 'destructive',\n      handler: () => {\n        this.actionLogout()\n      }\n    },\n    {\n      text: 'キャンセル',\n      role: 'cancel',\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentUserIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "actionLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "navigateToCreateCompany",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate Company Pageに遷移する\nTempで作成、LPから作成するようにする\n",
                    "description": "<p>Create Company Pageに遷移する\nTempで作成、LPから作成するようにする</p>\n"
                },
                {
                    "name": "navigateToMemberList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCompanyに紐づくメンバーリストページへ遷移する\n",
                    "description": "<p>Companyに紐づくメンバーリストページへ遷移する</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentEditModal",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ActionSheetController, ModalController } from '@ionic/angular';\nimport { SettingLogic } from './logic/setting.logic';\nimport { EditProfileModalComponent } from '../../shared/component/modal/edit-profile-modal/edit-profile-modal.component';\nimport { from } from 'rxjs';\nimport { concatMap, map } from 'rxjs/operators';\nimport { IUser, Attribute, CurrentUser } from './interface/setting.interface';\n@Component({\n  selector: 'app-setting',\n  templateUrl: './setting.page.html',\n  styleUrls: ['./setting.page.scss'],\n})\nexport class SettingPage implements OnInit {\n\n  isAdmin: boolean = false;\n\n  ButtonEdit = [\n    {\n      text: '\bログアウト',\n      role: 'destructive',\n      handler: () => {\n        this.actionLogout()\n      }\n    },\n    {\n      text: 'キャンセル',\n      role: 'cancel',\n    }\n  ]\n  user: IUser;\n\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n  currentUserIcon: string | null;\n\n  constructor(\n    private logic: SettingLogic,\n    private readonly actionSheetCtrl: ActionSheetController,\n    private readonly router: Router,\n    private readonly modalCtrl: ModalController,\n  ) { }\n\n  ngOnInit(): void {\n    this.logic.fetchCurrentUser()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map(({ items }) => this.currentUser = items[0]))\n      .pipe(concatMap(() => this.logic.modifiedAvatarIconUrl(this.currentUser.iconImage)))\n      .subscribe((data) => {\n        if (this.currentUser.email === 'r.taaaaabo+wantto01@gmail.com') {\n          this.isAdmin = true;\n        }\n        this.currentUserIcon = data;\n      });\n  }\n\n  async confirmLogout(): Promise<void> {\n    const logoutActionSheet = await this.actionSheetCtrl.create({\n      cssClass: 'my-custom-class',\n      buttons: this.ButtonEdit,\n    });\n    return logoutActionSheet.present();\n  }\n\n  actionLogout(): void {\n    this.logic.signOut()\n      .subscribe(() => this.router.navigate(['/login']));\n  }\n\n  async presentEditModal(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: EditProfileModalComponent,\n      componentProps: {\n        'status': 'already',\n        'user': this.currentUser,\n        'userIcon': this.currentUserIcon,\n      }\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(concatMap(() => this.logic.fetchUserInfo(this.currentUser.id)))\n      .pipe(map((result) => this.currentUser = result))\n      .pipe(concatMap(() => this.logic.modifiedAvatarIconUrl(this.currentUser.iconImage)))\n      .subscribe((data) => {\n        this.currentUserIcon = data;\n      });\n    return modal.present();\n  }\n\n  /**\n   * Companyに紐づくメンバーリストページへ遷移する\n   */\n  navigateToMemberList(): void {\n    this.router.navigate(['/member-list']);\n  }\n\n  /**\n   * Create Company Pageに遷移する\n   * Tempで作成、LPから作成するようにする\n   */\n  navigateToCreateCompany(): void {\n    this.router.navigate(['/create-company']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".margin-left {\n    margin-left: 20px;\n}\n\n.profile-icon {\n    width: 48px;\n    height: 48px;\n}\n\n.setting-line {\n    margin: 10px;\n}\n\n.margin-bottom {\n    margin-bottom: 10px;\n}",
                    "styleUrl": "./setting.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "SettingLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionSheetCtrl",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "SettingLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionSheetCtrl",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>設定</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-item>\n    <ion-avatar class=\"profile-icon\">\n      <img *ngIf=\"currentUserIcon\" [src]=\"currentUserIcon\" />\n      <img *ngIf=\"!currentUserIcon\" src=\"../../../assets/img/undefined.jpeg\" />\n    </ion-avatar>\n    <ion-label class=\"margin-left\">\n      <h2>{{ currentUser?.username }}</h2>\n      <p>{{ currentUser?.positionName }}</p>\n      <a color=\"primary\" (click)=\"presentEditModal()\">編集</a>\n    </ion-label>\n  </ion-item>\n  <ion-item class=\"setting-line\" (click)=\"navigateToMemberList()\">\n    メンバー\n  </ion-item>\n  <ion-item class=\"setting-line\"> 運営について </ion-item>\n  <ion-item\n    class=\"setting-line\"\n    *ngIf=\"isAdmin\"\n    (click)=\"navigateToCreateCompany()\"\n    >会社の追加</ion-item\n  >\n  <ion-item\n    class=\"logout-line\"\n    lines=\"none\"\n    color=\"danger\"\n    (click)=\"confirmLogout()\"\n    >ログアウト</ion-item\n  >\n</ion-content>\n"
        },
        {
            "name": "SignupPage",
            "id": "component-SignupPage-6d70aaafd8fbf4037aa4cea41046f0b5",
            "file": "src/app/pages/signup/signup.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [
                "./signup.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "signUpForm",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    passwordform: new FormControl('', [Validators.required, Validators.minLength(8)]),\n    confirmPasswordform: new FormControl('', [Validators.required, Validators.minLength(8)])\n  }, this.checkPasswords)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPasswords",
                    "args": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "null | literal type",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBackToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { SignupLogic } from './logic/signup.logic';\nimport { InterfaceSignup } from '../../interfaces/signup.interface';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.page.html',\n  styleUrls: ['./signup.page.scss'],\n})\nexport class SignupPage implements OnInit {\n  signUpForm = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    passwordform: new FormControl('', [Validators.required, Validators.minLength(8)]),\n    confirmPasswordform: new FormControl('', [Validators.required, Validators.minLength(8)])\n  }, this.checkPasswords);\n\n  companyId: string;\n\n  constructor(\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly location: Location,\n    private logic: SignupLogic\n  ) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.signUpForm.patchValue({ email: params.email });\n    })\n  }\n\n  checkPasswords(group: FormGroup): null | { notSame: boolean } {\n    let password = group.get('passwordform').value;\n    let confirmPassword = group.get('confirmPasswordform').value;\n    return password = confirmPassword ? null : { notSame: true }\n  }\n\n  onSubmit(): void {\n    const value: InterfaceSignup = this.signUpForm.value;\n    this.logic.entrySignupUser(value)\n      .subscribe(() => {\n        this.router.navigate(['/confirm'], { state: { data: { email: value.email } } });\n      })\n    if (this.signUpForm.invalid) {\n      return;\n    }\n  }\n\n  goBackToLogin(): void {\n    this.location.back();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text-center {\n    text-align: center;\n}",
                    "styleUrl": "./signup.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "SignupLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "SignupLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>新規登録</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"goBackToLogin()\">\n        <ion-icon name=\"chevron-back-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <form [formGroup]=\"signUpForm\">\n    <ion-list>\n      <ion-item>\n        <ion-label for=\"name\" position=\"stacked\">氏名</ion-label>\n        <ion-input type=\"text\" formControlName=\"name\"></ion-input>\n      </ion-item>\n\n      <ion-item>\n        <ion-label for=\"email\" position=\"stacked\">メールアドレス</ion-label>\n        <ion-input type=\"email\" formControlName=\"email\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label for=\"passwordform\" position=\"stacked\">パスワード</ion-label>\n        <ion-input type=\"password\" formControlName=\"passwordform\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label for=\"confirmPasswordform\" position=\"stacked\"\n          >パスワード（確認）</ion-label\n        >\n        <ion-input\n          type=\"password\"\n          formControlName=\"confirmPasswordform\"\n        ></ion-input>\n      </ion-item>\n    </ion-list>\n  </form>\n  <div class=\"register-button\">\n    <ion-button\n      (click)=\"onSubmit()\"\n      [disabled]=\"signUpForm.invalid\"\n      expand=\"block\"\n      >登録</ion-button\n    >\n  </div>\n</ion-content>\n"
        },
        {
            "name": "TabsPage",
            "id": "component-TabsPage-b201b824629e7dc52ffc96c61509f27f",
            "file": "src/app/pages/tabs/tabs.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [
                "tabs.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "tabs.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tabs',\n  templateUrl: 'tabs.page.html',\n  styleUrls: ['tabs.page.scss']\n})\nexport class TabsPage implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "tabs.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-tabs>\n  <ion-tab-bar slot=\"bottom\">\n    <ion-tab-button tab=\"home\">\n      <ion-icon name=\"home-outline\"></ion-icon>\n      <ion-label>ホーム</ion-label>\n    </ion-tab-button>\n    <ion-tab-button tab=\"task-own\">\n      <ion-icon name=\"bookmarks-outline\"></ion-icon>\n      <ion-label>担当タスク</ion-label>\n    </ion-tab-button>\n    <ion-tab-button tab=\"setting\">\n      <ion-icon name=\"person-circle-outline\"></ion-icon>\n      <ion-label>設定</ion-label>\n    </ion-tab-button>\n  </ion-tab-bar>\n</ion-tabs>\n"
        },
        {
            "name": "TaskDetailPage",
            "id": "component-TaskDetailPage-f8d555bb59a27a3308ef4e82d0b7c8fc",
            "file": "src/app/pages/task-detail/task-detail.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-detail",
            "styleUrls": [
                "./task-detail.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-detail.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arrayImageBase64Data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'comment'"
                        }
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IonContent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IonContent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "currentUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentUserInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "fragmentComment",
                    "defaultValue": "'\u001d'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "link",
                    "defaultValue": "\"comment\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IMessageWithAttachUrl>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "newMsg",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "previousParam",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "previousUrl",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "roomMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ListRoomGroupsQuery>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptionMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "taskDetail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetTaskQuery",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "taskPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskPage",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TaskPage"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteImage",
                    "args": [
                        {
                            "name": "indexTarget",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "indexTarget",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doneTask",
                    "args": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreviousParam",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "goBackToRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeApp",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveTask",
                    "args": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentActionSheet",
                    "args": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "presentAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentDoneToast",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentModalEditTask",
                    "args": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskDetail",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "presentMoveTask",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "selectFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "takePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ɵCompiler_compileModuleSync__POST_R3__ } from '@angular/core';\nimport { Location, ViewportScroller, LocationStrategy } from '@angular/common';\nimport { Router, ActivatedRoute, RoutesRecognized } from '@angular/router';\nimport { ModalController, ActionSheetController, ToastController, IonContent, Platform, AlertController } from '@ionic/angular';\nimport { Camera, CameraResultType } from '@capacitor/camera';\nimport { forkJoin, from, Observable, Subscription } from 'rxjs';\nimport { filter, tap, map, concatMap, toArray, pairwise } from 'rxjs/operators';\nimport { TaskDetailLogic } from './logic/task-detail.logic';\nimport { AddTaskModalComponent } from 'src/app/shared/component/modal/add-task-modal/add-task-modal.component';\nimport { GetTaskQuery, ListRoomGroupsQuery } from 'src/app/shared/service/amplify.service';\nimport { IMessageWithAttachUrl, CurrentUser } from './models/task-detail.interface';\nimport { TaskPage } from '../task/task.page';\n\ninterface Attribute {\n  name: string,\n  email: string,\n  email_verified: boolean,\n  sub: string,\n};\n@Component({\n  selector: 'app-task-detail',\n  templateUrl: './task-detail.page.html',\n  styleUrls: ['./task-detail.page.scss'],\n})\nexport class TaskDetailPage implements OnInit {\n  @ViewChild('comment') child: HTMLElement;\n  @ViewChild(IonContent, { static: false }) content: IonContent;\n  @ViewChild(TaskPage) taskPage: TaskPage;\n  taskId: string;\n  segment: string;\n  taskDetail: GetTaskQuery;\n  message: Array<IMessageWithAttachUrl>;\n  currentUserId: string;\n  roomMembers: Array<ListRoomGroupsQuery>;\n  arrayImageBase64Data: Array<string> = [];\n  subscriptionMessage: Subscription;\n  link = \"comment\"\n  fragmentComment = '\u001d';\n  newMsg: string = '';\n  private previousUrl: string = undefined;\n  private previousParam: string = undefined;\n\n  currentUserAttribute: Attribute;\n  currentUserInfo: CurrentUser;\n\n  constructor(\n    private logic: TaskDetailLogic,\n    private readonly scroll: ViewportScroller,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly location: Location,\n    private readonly modalCtrl: ModalController,\n    private readonly actionSheetCtrl: ActionSheetController,\n    private readonly toastCtrl: ToastController,\n    private readonly platform: Platform,\n    private readonly alertCtrl: AlertController,\n    private readonly locationStrate: LocationStrategy,\n  ) {\n    this.segment = this.route.snapshot.paramMap.get('segment');\n\n    let resultMessage;\n    this.taskId = this.route.snapshot.paramMap.get('id');\n    this.initializeApp().subscribe(() => {\n      this.subscriptionMessage = this.logic.onCreateMessageListener()\n        .subscribe({\n          next: () => this.logic.fetchMessagePerTask(this.taskId)\n            .pipe(map((result) => resultMessage = result.items))\n            .pipe(concatMap(() => this.logic.makeMessageAuthorImageUrl(resultMessage)))\n            .pipe(concatMap((result) => this.logic.makeAttachmentUrl(result)))\n            .pipe(concatMap((arrayAttachment) => this.logic.modifiedMessageItems(arrayAttachment, resultMessage)))\n            .subscribe((items) => {\n              this.message = items\n            }),\n        });\n    });\n    this.router.events\n      .pipe(filter((event: any) => event instanceof RoutesRecognized), pairwise())\n      .subscribe((event: any) => {\n        this.previousUrl = event[0].urlAfterRedirects;\n      });\n    this.locationStrate.onPopState(() => {\n      // システムの戻るボタンクリック時の挙動\n    })\n  }\n\n  // 前のURLだけを取得\n  public getPreviousParam() {\n    return this.previousParam;\n  }\n\n  ngOnInit(): void {\n    let resultMessage;\n    this.segment = this.route.snapshot.paramMap.get('segment');\n    const observerFetchCurrentUserInfo = this.logic.fetchCurrentUserInfo()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n    const observerFetchAnyTask = this.logic.fetchAnyTask(this.taskId)\n      .pipe(map((data) => this.taskDetail = data))\n      .pipe(concatMap(() => this.logic.fetchMemberListOnRoom(this.taskDetail.roomID)));\n    const observerFetchMessagePerTask = this.logic.fetchMessagePerTask(this.taskId);\n    const observerMakeMessageAttachmentUrl = observerFetchMessagePerTask\n      .pipe(map((result) => resultMessage = result.items))\n      .pipe(concatMap((result) => this.logic.makeMessageAuthorImageUrl(result))) //AuthorIconのURLを設定する\n      .pipe(concatMap((result) => this.logic.makeAttachmentUrl(result)))\n      .pipe(concatMap((arrayAttachment) => this.logic.modifiedMessageItems(arrayAttachment, resultMessage)))\n\n    forkJoin({\n      currentUserInfo: observerFetchCurrentUserInfo,\n      anyTask: observerFetchAnyTask,\n      messageAttachment: observerMakeMessageAttachmentUrl,\n    }).subscribe((result) => {\n      this.currentUserInfo = result.currentUserInfo[0];\n      this.roomMembers = result.anyTask.items;\n      this.message = result.messageAttachment;\n    });\n  }\n\n  sendMessage(): void {\n    if (this.arrayImageBase64Data.length === 0) {\n      this.logic.sendNewMessage(this.taskId, this.newMsg, this.currentUserInfo.id)\n        .subscribe(() => this.newMsg = '');\n    } else {\n      this.logic.uploadFile(this.arrayImageBase64Data, this.taskId, this.currentUserInfo.id)\n        .pipe(concatMap(({ key }) => this.logic.makeS3Object(key)))\n        .pipe(toArray())\n        .pipe(concatMap((imageContent) => this.logic.sendNewMessage(this.taskId, this.newMsg, this.currentUserInfo.id, imageContent)))\n        .subscribe(() => {\n          this.newMsg = '';\n          this.arrayImageBase64Data = [];\n        });\n    }\n  }\n\n  async presentDoneToast(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: 'おつかれさまでした！',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  async presentMoveTask(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: '再度、戻しました。',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  ngAfterViewInit(): void {\n    this.route.fragment.subscribe((result) => {\n      this.scroll.scrollToAnchor(result);\n    });\n  }\n\n  async presentModalEditTask(taskDetail): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddTaskModalComponent,\n      componentProps: {\n        taskDetail: taskDetail,\n        roomMembers: this.roomMembers,\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    let resultObj;\n    dismissObservable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(map((data) => resultObj = data))\n      .pipe(concatMap(({ data }) => this.logic.updateTaskToRoom(data.taskValue, this.taskId)))\n      .pipe(concatMap((result) => this.logic.createMessage(result, resultObj)))\n      .pipe(concatMap(() => this.logic.fetchAnyTask(this.taskId)))\n      .subscribe((data) => {\n        this.taskDetail = data;\n      });\n    return modal.present();\n  }\n\n  doneTask(taskDetail): void {\n    const presentToast = from(this.presentDoneToast());\n    const messageContent = 'このタスクを完了としました';\n    this.logic.updateTaskItem(taskDetail, 10)\n      .pipe(concatMap((data) => this.logic.createMessage(data, messageContent)))\n      .pipe(concatMap(() => this.logic.fetchAnyTask(taskDetail.id)))\n      .pipe(tap(() => presentToast))\n      .subscribe((data) => {\n        this.taskDetail = data;\n      });\n  }\n\n  moveTask(taskDetail): void {\n    const presentToast = from(this.presentMoveTask());\n    const messageContent = 'このタスクをActiveにもどしました。';\n    this.logic.updateTaskItem(taskDetail, 0)\n      .pipe(concatMap((result) => this.logic.createMessage(result, messageContent)))\n      .pipe(concatMap(() => this.logic.fetchAnyTask(taskDetail.id)))\n      .pipe(tap(() => presentToast))\n      .subscribe((data) => {\n        this.taskDetail = data;\n      });\n  }\n\n  async presentActionSheet(taskDetail): Promise<void> {\n    const activeActionSheet = await this.actionSheetCtrl.create({\n      cssClass: 'my-custom-class',\n      buttons: [\n        {\n          text: '完了',\n          handler: () => {\n            this.doneTask(taskDetail);\n          }\n        },\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        }\n      ]\n    });\n\n    const doneActionSheet = await this.actionSheetCtrl.create({\n      cssClass: 'my-custom-class',\n      buttons: [\n        {\n          text: 'Activeに移動',\n          handler: () => {\n            this.moveTask(taskDetail);\n          }\n        },\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        }\n      ]\n    });\n\n    if (this.segment === 'active') {\n      await activeActionSheet.present();\n    } else if (this.segment === 'done') {\n      await doneActionSheet.present();\n    }\n  }\n\n  goBackToRoom(): void {\n    this.location.back();\n  }\n\n  selectFile(): void { }\n\n  async takePhoto(): Promise<void> {\n    const image = await Camera.getPhoto({\n      quality: 50,\n      allowEditing: true,\n      resultType: CameraResultType.DataUrl,\n      promptLabelHeader: 'カメラ',\n      promptLabelCancel: 'キャンセル',\n      promptLabelPhoto: 'ライブラリから',\n      promptLabelPicture: 'カメラ'\n    });\n    this.arrayImageBase64Data.push(image.dataUrl);\n  }\n\n  initializeApp(): Observable<string> {\n    return from(this.platform.ready());\n  }\n\n  deleteImage(indexTarget: number): void {\n    this.arrayImageBase64Data.splice(indexTarget, 1);\n  }\n\n  async presentAlert(): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: 'アップロード最大値です',\n      message: '一度にアップロードできる数は一件です',\n      buttons: ['了解']\n    });\n    await alert.present();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionMessage.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".my-custom-class .action-sheet-group {\n    background: #e5e5e5;\n}\n\n.card-background {\n    --background: '#1c1c1d';\n}\n\n.end-done-icon {\n    margin-left: auto;\n    margin-right: 50px;\n}\n\n.message-input {\n    width: 100%;\n    border: 1px solid var(--ion-color-medium);\n    border-radius: 10px;\n    resize: none;\n    padding-left: 30px; // padding-right: 10px;\n    --background: '#1c1c1d';\n}\n\n.msg-btn {\n    --padding-start: 0.5em;\n    --padding-end: 0.5em;\n}\n\n.card-title {\n    font-size: medium;\n}\n\n.center-align {\n    margin-top: auto;\n}\n\n.text-right {\n    text-align: right;\n}\n\n.size-icon-col {\n    --ion-grid-width: 20px\n}\n\n.width-height {\n    width: 75px;\n    height: 75px;\n    margin: 2px;\n    position: relative;\n}\n\n/*ボタンを重ねるためのブロック要素*/\n.deleteButtonContainer {\n    width: 15px;\n    height: 15px;\n    position: absolute;\n    top: 0;\n}\n\n/*各サムネイル画像に重ねる削除ボタン*/\n.deleteButton {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    padding-left: 0;\n    padding-right: 0;\n    text-align: center;\n    line-height: 9px;\n    vertical-align: middle;\n    color: grey;\n    cursor: pointer;\n    position: absolute;\n    top: 0;\n    left: 3px;\n}\n\n.label-wrap {\n    max-width: none;\n    flex: 0%;\n}\n\n.breke {\n    white-space: pre-wrap;\n}",
                    "styleUrl": "./task-detail.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logic",
                        "type": "TaskDetailLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scroll",
                        "type": "ViewportScroller",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionSheetCtrl",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastCtrl",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "locationStrate",
                        "type": "LocationStrategy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "logic",
                        "type": "TaskDetailLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scroll",
                        "type": "ViewportScroller",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionSheetCtrl",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastCtrl",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locationStrate",
                        "type": "LocationStrategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>タスクの詳細</ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-back-button\n        defaultHref=\"/\"\n        text=\"\"\n        icon=\"chevron-back-outline\"\n      ></ion-back-button>\n    </ion-buttons>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"presentActionSheet(taskDetail)\">\n        <ion-icon\n          *ngIf=\"segment !== 'done'\"\n          name=\"checkmark-outline\"\n        ></ion-icon>\n        <ion-icon\n          *ngIf=\"segment === 'done'\"\n          name=\"arrow-redo-outline\"\n        ></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content fullscreen=\"true\">\n  <ion-card (click)=\"presentModalEditTask(taskDetail)\">\n    <ion-card-header class=\"card-title\">\n      <ion-card-subtitle>\n        {{taskDetail?.scheduleDate | date: 'yyyy/MM/dd' }} まで\n      </ion-card-subtitle>\n      <ion-card-title>{{ taskDetail?.title }}</ion-card-title>\n      <ion-card-subtitle>\n        担当者 : {{taskDetail?.chargePerson.username }}\n      </ion-card-subtitle>\n    </ion-card-header>\n    <ion-card-content>\n      <ion-item class=\"card-background\" lines=\"none\">\n        <p>{{ taskDetail?.description}}</p>\n      </ion-item>\n    </ion-card-content>\n  </ion-card>\n\n  <div>\n    <ion-list>\n      <ion-list-header>\n        <ion-label>コミュニケーション</ion-label>\n      </ion-list-header>\n      <ion-item *ngFor=\"let item of message\">\n        <ion-avatar slot=\"start\">\n          <img\n            *ngIf=\"item.authorIconWithUrl !== ''\"\n            [src]=\"item.authorIconWithUrl\"\n          />\n          <img\n            *ngIf=\"item.authorIconWithUrl === ''\"\n            src=\"../../../assets/img/undefined.jpeg\"\n          />\n        </ion-avatar>\n        <ion-label class=\"label-wrap\">\n          <p>{{item.author.username}}</p>\n          <p class=\"text-right\">\n            {{ item.createdAt | date: \"yyyy/MM/dd HH:mm\" }}\n          </p>\n          <h3 class=\"breke\">{{ item.content }}</h3>\n          <ion-row>\n            <ion-card\n              *ngFor=\"let imageSrc of item.attachmentWithUrl\"\n              class=\"width-height\"\n            >\n              <img [src]=\"imageSrc\" />\n            </ion-card>\n          </ion-row>\n        </ion-label>\n      </ion-item>\n    </ion-list>\n  </div>\n</ion-content>\n\n<ion-footer>\n  <ion-toolbar light=\"light\">\n    <ion-row class=\"ion-no-padding\">\n      <ion-col>\n        <ion-textarea\n          placeholder=\"メッセージ\"\n          class=\"message-input\"\n          maxRows=\"2\"\n          [(ngModel)]=\"newMsg\"\n        ></ion-textarea>\n      </ion-col>\n    </ion-row>\n  </ion-toolbar>\n\n  <!-- 写真添付時に表示される -->\n  <ion-toolbar *ngIf=\"arrayImageBase64Data.length !== 0\">\n    <ion-grid>\n      <ion-row>\n        <ion-card\n          *ngFor=\"let imageItem of arrayImageBase64Data; index as i\"\n          class=\"width-height\"\n        >\n          <img [src]=\"imageItem\" />\n          <div class=\"deleteButtonContainer\">\n            <button type=\"submit\" class=\"deleteButton\" (click)=\"deleteImage(i)\">\n              <ion-icon name=\"close-outline\"></ion-icon>\n            </button>\n          </div>\n        </ion-card>\n      </ion-row>\n    </ion-grid>\n  </ion-toolbar>\n\n  <ion-toolbar class=\"text-right\">\n    <ion-col class=\"size-icon-col\" size=\"1\">\n      <ion-button\n        fill=\"clear\"\n        [disabled]=\"arrayImageBase64Data.length === 2\"\n        (click)=\"takePhoto()\"\n      >\n        <ion-icon\n          expand=\"block\"\n          name=\"camera-outline\"\n          slot=\"icon-only\"\n        ></ion-icon>\n      </ion-button>\n    </ion-col>\n    <ion-col class=\"size-icon-col\" size=\"2\">\n      <ion-button\n        fill=\"clear\"\n        color=\"primary\"\n        [disabled]=\"newMsg === ''\"\n        (click)=\"sendMessage()\"\n      >\n        <ion-icon expand=\"block\" name=\"send\" slot=\"icon-only\"></ion-icon>\n      </ion-button>\n    </ion-col>\n  </ion-toolbar>\n</ion-footer>\n"
        },
        {
            "name": "TaskPage",
            "id": "component-TaskPage-84e692cebe62160fbc25812a338ce10d",
            "file": "src/app/pages/task/task.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [
                "./task.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "companyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "companyMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CompanyMembersInfo>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "currentUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CurrentUser",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "currentUserAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attribute",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "isReorder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "previousParam",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "previousUrl",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "room",
                    "defaultValue": "{} as GetRoomQuery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "roomId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "roomMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CompanyMembers>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "segment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "subscriptionCreateTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "subscriptionUpdateRoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "subscriptionUpdateTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "taskActiveItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<InterfaceTask>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "taskDoneItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<InterfaceTask>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "taskFormData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskFormModel",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetUserQuery",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "activeSortTaskItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addCommentToTaskDetail",
                    "args": [
                        {
                            "name": "task",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreviousParam",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "goBackToRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeApp",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToRoomMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToTaskDetail",
                    "args": [
                        {
                            "name": "task",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isReorder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isReorder",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentAddTask",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentDoneTaskAlert",
                    "args": [
                        {
                            "name": "alertBody",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "alertBody",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "presentDoneToast",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "presentEditRoom",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "reorderTask",
                    "args": [
                        {
                            "name": "ev",
                            "type": "CustomEvent<ItemReorderEventDetail>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "CustomEvent<ItemReorderEventDetail>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "segmentChanged",
                    "args": [
                        {
                            "name": "ev",
                            "type": "CustomEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "CustomEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location, LocationStrategy } from '@angular/common';\nimport { Router, ActivatedRoute, RoutesRecognized, NavigationExtras } from '@angular/router';\nimport { ItemReorderEventDetail } from '@ionic/core';\nimport { ModalController, ToastController, AlertController, Platform } from '@ionic/angular';\nimport { forkJoin, from, of, Observable, Subscription } from 'rxjs';\nimport { tap, map, concatMap, filter, pairwise } from 'rxjs/operators';\nimport { GetRoomQuery, GetUserQuery } from 'src/app/shared/service/amplify.service';\nimport { TaskLogic } from './logic/task.logic';\nimport { CompanyMembersInfo } from './interface/current-user-info.interface';\nimport { AddTaskModalComponent } from '../../shared/component/modal/add-task-modal/add-task-modal.component';\nimport { AddRoomModalComponent } from '../../shared/component/modal/add-room-modal/add-room-modal.component';\nimport { InterfaceTask } from 'src/app/interfaces/task.interface';\nimport { TaskFormModel } from 'src/app/shared/model/task-form.model';\nimport { CompanyMembers, CurrentUser } from './model/task-member.model';\n\ninterface Attribute {\n  name: string,\n  email: string,\n  email_verified: boolean,\n  sub: string,\n}\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.page.html',\n  styleUrls: ['./task.page.scss'],\n})\nexport class TaskPage implements OnInit {\n  room = {} as GetRoomQuery;\n  roomId: string;\n  isReorder: boolean;\n  segment: string;\n  companyId: string;\n  companyMembers: Array<CompanyMembersInfo>;\n  roomMembers: Array<CompanyMembers>;\n  user: GetUserQuery;\n  taskFormData: TaskFormModel;\n  taskActiveItems: Array<InterfaceTask>;\n  taskDoneItems: Array<InterfaceTask>;\n  private previousUrl: string = undefined;\n  private previousParam: string = undefined;\n\n  currentUserAttribute: Attribute;\n  currentUser: CurrentUser;\n\n  subscriptionCreateTask: Subscription;\n  subscriptionUpdateTask: Subscription;\n  subscriptionUpdateRoom: Subscription;\n\n  constructor(\n    private readonly locationStrate: LocationStrategy,\n    private readonly router: Router,\n    private readonly location: Location,\n    private readonly alertCtrl: AlertController,\n    private readonly toastCtrl: ToastController,\n    private readonly modalCtrl: ModalController,\n    private readonly route: ActivatedRoute,\n    private readonly logic: TaskLogic,\n    private readonly platform: Platform,\n  ) {\n    this.roomId = this.route.snapshot.paramMap.get('id');\n    this.isReorder = false;\n    this.initializeApp().subscribe(() => {\n      this.subscriptionCreateTask = this.logic.onCreateTaskListener().subscribe({\n        next: () => this.logic.fetchActiveTaskPerRoom(this.roomId)\n          .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n          .subscribe((items) => {\n            this.taskActiveItems = items.sort(this.logic.compareTaskArray);;\n          }),\n      })\n      this.subscriptionUpdateTask = this.logic.onUpdateTaskListener().subscribe({\n        next: () => this.logic.fetchActiveTaskPerRoom(this.roomId)\n          .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n          .pipe(map((data) => this.taskActiveItems = data.sort(this.logic.compareTaskArray)))\n          .pipe(concatMap(() => this.logic.fetchDoneTaskPerRoom(this.roomId).pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 10)))))\n          .pipe(map((doneResult) => this.taskDoneItems = doneResult))\n          .subscribe(() => { }),\n      });\n      this.subscriptionUpdateRoom = this.logic.onUpdateRoomListener().subscribe({\n        next: () => this.logic.fetchRoomInfo(this.roomId)\n          .pipe(map((result) => this.room = result))\n          .pipe(concatMap(() => this.logic.fetchMemberListOnRoom(this.roomId).pipe(map(({ items }) => items))))\n          .subscribe((result) => {\n            this.roomMembers = result\n          })\n      });\n    });\n    this.segment = this.router.getCurrentNavigation().extras.state?.status;\n    if (!this.segment) {\n      this.segment = 'active';\n    }\n\n    this.locationStrate.onPopState(() => {\n      // システムの戻るボタンクリック時の挙動\n    })\n  }\n\n  initializeApp(): Observable<string> {\n    return from(this.platform.ready());\n  }\n\n  ngOnInit(): void {\n    this.isReorder = false;\n    this.companyId = this.roomId.split(/(.*)_room/)[1];\n    this.logic.fetchCurrentUserCognitoInfo()\n      .pipe(map((data) => this.currentUserAttribute = data))\n      .pipe(concatMap(() => this.logic.fetchAnyUserInfoFromList(this.currentUserAttribute.email)))\n      .pipe(map((items) => this.currentUser = items[0]))\n      .pipe(concatMap(() => this.logic.fetchCompanyMembers(this.companyId)))\n      .subscribe((data) => {\n        this.companyMembers = data.companyMembers.items;\n      });\n    this.companyId = this.roomId.split(/(.*)_room/)[1];\n    forkJoin({\n      companyUser: this.logic.fetchCompanyMembers(this.companyId),\n      activeTaskItems: this.logic.fetchActiveTaskPerRoom(this.roomId).pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0))),\n      doneTaskItems: this.logic.fetchDoneTaskPerRoom(this.roomId).pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 10))),\n      room: this.logic.fetchRoomInfo(this.roomId),\n      roomMembers: this.logic.fetchMemberListOnRoom(this.roomId).pipe(map(({ items }) => items)),\n    }).subscribe(({ companyUser, activeTaskItems, doneTaskItems, room, roomMembers }) => {\n      this.companyMembers = companyUser.companyMembers.items;\n      this.taskActiveItems = activeTaskItems.sort(this.logic.compareTaskArray);\n      this.taskDoneItems = doneTaskItems;\n      this.room = room;\n      this.roomMembers = roomMembers;\n    });\n  }\n\n  // 前のURLだけを取得\n  public getPreviousParam() {\n    return this.previousParam;\n  }\n\n  async presentDoneToast(): Promise<void> {\n    const toast = await this.toastCtrl.create({\n      message: 'おつかれさまでした！',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  async presentAddTask(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddTaskModalComponent,\n      componentProps: {\n        room: this.room,\n        userId: this.currentUser.id,\n        roomMembers: this.roomMembers\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(map(({ data }) => this.taskFormData = data.taskValue))\n      .pipe(concatMap(() => this.taskActiveItems.length !== 0 ?\n        this.logic.updateStatusTaskItems(this.taskActiveItems) : of(this.taskActiveItems)\n      ))\n      .pipe(concatMap(() => this.logic.createTaskToRoom(this.taskFormData, this.roomId, this.currentUser.id)))\n      .pipe(concatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n      .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n      .subscribe((items) => {\n        this.taskActiveItems = items.sort(this.logic.compareTaskArray);;\n      });\n    return modal.present();\n  }\n\n  async presentEditRoom(): Promise<void> {\n    const modal = await this.modalCtrl.create({\n      component: AddRoomModalComponent,\n      componentProps: {\n        room: this.room,\n      },\n    });\n    const dismissObservable = from(modal.onDidDismiss());\n    dismissObservable\n      .pipe(filter(({ data }) => data !== undefined))\n      .pipe(concatMap(({ data }) => this.logic.updateRoom(data, this.room.id)))\n      .pipe(concatMap(() => this.logic.fetchRoomInfo(this.roomId)))\n      .subscribe((room) => {\n        this.room = room;\n      })\n    return modal.present();\n  }\n\n  goBackToRoom(): void {\n    this.location.back();\n  }\n\n  activeSortTaskItem(): void {\n    this.isReorder = !this.isReorder;\n  }\n\n  get isCheckFabButton(): boolean {\n    if (this.segment === 'active' && !this.isReorder) {\n      return true;\n    } else if (this.segment === 'active' && this.isReorder) {\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n  reorderTask(ev: CustomEvent<ItemReorderEventDetail>): void {\n    const itemMove = this.taskActiveItems.splice(ev.detail.from, 1)[0];\n    this.taskActiveItems.splice(ev.detail.to, 0, itemMove);\n    ev.detail.complete();\n    from(this.taskActiveItems)\n      .pipe(concatMap((taskActiveItem) => this.logic.getIndexNewArray(this.taskActiveItems, taskActiveItem)))\n      .pipe(concatMap((indexArray: number) => this.logic.updateTaskItemPriority(indexArray, this.taskActiveItems)))\n      .pipe(concatMap((data) => this.logic.reorderTaskMessage(data)))\n      .subscribe();\n  }\n\n  navigateToTaskDetail(task, segment: string, isReorder: boolean): void {\n    if (isReorder) return;\n    let navigationExtras: NavigationExtras = {\n      state: {\n        segment: segment,\n      }\n    };\n    this.router.navigate(['task-detail', `${task.id}`, `${segment}`], navigationExtras);\n  }\n\n  async addCommentToTaskDetail(task): Promise<void> {\n    await this.router.navigate(['task-detail', `${task.id}`, 'active'], {\n      fragment: 'comment'\n    });\n  }\n\n  segmentChanged(ev: CustomEvent): void {\n    this.segment = ev.detail.value;\n    this.location.replaceState(`task/${this.roomId}`, `status=${this.segment}`);\n    this.logic.fetchDoneTaskPerRoom(this.roomId)\n      .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 10)))\n      .subscribe((data) => {\n        this.taskDoneItems = data;\n      });\n  }\n\n  async presentDoneTaskAlert(alertBody): Promise<void> {\n    const alert = await this.alertCtrl.create({\n      header: '完了にしますか？',\n      message: `${alertBody.title}を完了にします。`,\n      buttons: [\n        {\n          text: 'キャンセル',\n          role: 'cancel',\n        },\n        {\n          text: 'OK',\n          role: 'ok',\n          handler: () => {\n            const presentToast = from(this.presentDoneToast());\n            this.logic.updateDoneTaskItem(alertBody, 10)\n              .pipe(concatMap(() => this.logic.fetchActiveTaskPerRoom(this.roomId)))\n              .pipe(concatMap((result) => this.logic.fetchEachStatusTask(result, 0)))\n              .pipe(tap(() => presentToast))\n              .subscribe((data) => { this.taskActiveItems = data });\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  navigateToRoomMember(): void {\n    this.router.navigate(['room-members', `${this.roomId}`, `${this.companyId}`]);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptionCreateTask.unsubscribe();\n    this.subscriptionUpdateRoom.unsubscribe();\n    this.subscriptionUpdateTask.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".task-title {\n    font-weight: 500;\n    font-size: large;\n}\n\n.button-center {\n    text-align: center;\n    margin: 0;\n}\n\n.card-background {\n    --background: '#1c1c1d';\n}",
                    "styleUrl": "./task.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "locationStrate",
                        "type": "LocationStrategy",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastCtrl",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logic",
                        "type": "TaskLogic",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "locationStrate",
                        "type": "LocationStrategy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertCtrl",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastCtrl",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logic",
                        "type": "TaskLogic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isCheckFabButton": {
                    "name": "isCheckFabButton",
                    "getSignature": {
                        "name": "isCheckFabButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 194
                    }
                }
            },
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title (click)=\"presentEditRoom()\"> {{ room.name }} </ion-title>\n    <ion-buttons slot=\"start\">\n      <ion-back-button\n        *ngIf=\"!isReorder\"\n        defaultHref=\"/\"\n        text=\"\"\n        icon=\"chevron-back-outline\"\n      ></ion-back-button>\n    </ion-buttons>\n    <ion-buttons *ngIf=\"segment === 'active'\" slot=\"end\">\n      <ion-button *ngIf=\"!isReorder\" (click)=\"navigateToRoomMember()\">\n        <ion-icon name=\"people-outline\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"!isReorder\" (click)=\"activeSortTaskItem()\">\n        <ion-icon name=\"swap-vertical-sharp\"></ion-icon>\n      </ion-button>\n      <ion-button *ngIf=\"isReorder\" (click)=\"activeSortTaskItem()\">\n        <ion-icon name=\"checkmark-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n  <ion-toolbar *ngIf=\"!isReorder\">\n    <ion-segment [value]=\"segment\" (ionChange)=\"segmentChanged($event)\">\n      <ion-segment-button value=\"active\">\n        <ion-label>Active</ion-label>\n      </ion-segment-button>\n      <ion-segment-button value=\"done\">\n        <ion-label>Done</ion-label>\n      </ion-segment-button>\n    </ion-segment>\n  </ion-toolbar>\n</ion-header>\n\n<!-- Segment: Activeの場合 -->\n<ion-content *ngIf=\"segment === 'active'\">\n  <ion-list>\n    <ion-reorder-group\n      (ionItemReorder)=\"reorderTask($event)\"\n      [disabled]=\"!isReorder\"\n    >\n      <ion-card *ngFor=\"let item of taskActiveItems\">\n        <ion-reorder (click)=\"navigateToTaskDetail(item, segment, isReorder)\">\n          <ion-card-header>\n            <ion-card-subtitle>\n              {{ item.scheduleDate | date: 'yyyy/MM/dd' }} まで\n            </ion-card-subtitle>\n            <ion-card-title> {{ item.title }} </ion-card-title>\n            <ion-card-subtitle>\n              担当者：{{ item.chargePerson.username }}\n            </ion-card-subtitle>\n          </ion-card-header>\n          <ion-card-content>\n            <ion-item class=\"card-background\" lines=\"none\">\n              <p>{{ item.description }}</p>\n            </ion-item>\n          </ion-card-content>\n        </ion-reorder>\n\n        <!-- ボタン部分 -->\n        <ion-button\n          *ngIf=\"!isReorder\"\n          expand=\"full\"\n          class=\"button-center\"\n          (click)=\"presentDoneTaskAlert(item)\"\n          color=\"primary\"\n        >\n          <ion-icon name=\"checkmark\"></ion-icon>\n        </ion-button>\n        <!-- /ボタン部分 -->\n      </ion-card>\n    </ion-reorder-group>\n  </ion-list>\n</ion-content>\n<ion-fab vertical=\"bottom\" horizontal=\"end\" *ngIf=\"isCheckFabButton\">\n  <ion-fab-button (click)=\"presentAddTask()\">\n    <ion-icon name=\"add-sharp\"></ion-icon>\n  </ion-fab-button>\n</ion-fab>\n\n<!-- Segment: DONEの場合 -->\n<ion-content *ngIf=\"segment === 'done'\">\n  <ion-list>\n    <ion-card\n      *ngFor=\"let item of taskDoneItems\"\n      (click)=\"navigateToTaskDetail(item, segment, isReorder)\"\n    >\n      <ion-card-header>\n        <ion-card-subtitle>\n          {{ item.scheduleDate | date: 'yyyy/MM/dd'\u001d }} まで\n        </ion-card-subtitle>\n        <ion-card-title> {{ item.title }}</ion-card-title>\n      </ion-card-header>\n      <ion-card-content>\n        <ion-item class=\"card-background\" lines=\"none\">\n          <p>{{item.description}}</p>\n        </ion-item>\n      </ion-card-content>\n    </ion-card>\n  </ion-list>\n</ion-content>\n<!-- /Segment: DONEの場合 -->\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-fa7cdb02a1fd3578461e5a06b58e78ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(),\n    AppRoutingModule,\n    SharedModule,\n    HttpClientModule,\n  ],\n  providers: [\n    StatusBar,\n    SplashScreen,\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ef73d27894ae165fa43e09752bbc4a00",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ExtraOptions, RouterModule, Routes } from '@angular/router';\nimport { DataResolverService } from './shared/service/resolver/data-resolver.service';\nimport { AuthGuard } from './guard/auth.guard';\n\nconst routerOptions: ExtraOptions = {\n  scrollPositionRestoration: 'enabled',\n  anchorScrolling: 'enabled',\n  scrollOffset: [0, 64],\n  relativeLinkResolution: 'legacy'\n};\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => \"import('./pages/tabs/tabs.module').then(m => m.TabsPageModule)\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'signup',\n    loadChildren: () => \"import('./pages/signup/signup.module').then(m => m.SignupPageModule)\",\n  },\n  {\n    path: 'confirm',\n    loadChildren: () => \"import('./pages/confirm/confirm.module').then(m => m.ConfirmPageModule)\"\n  },\n  {\n    path: 'login',\n    loadChildren: () => \"import('./pages/login/login.module').then(m => m.LoginPageModule)\"\n  },\n  {\n    path: 'create-company',\n    loadChildren: () => \"import('./pages/create-company/create-company.module').then(m => m.CreateCompanyPageModule)\"\n  },\n  {\n    path: 'registration-company',\n    loadChildren: () => \"import('./pages/registration-company/registration-company.module').then(m => m.RegistrationCompanyPageModule)\"\n  },\n  {\n    path: 'complete-register',\n    loadChildren: () => \"import('./pages/complete-register/complete-register.module').then(m => m.CompleteRegisterPageModule)\"\n  },\n  {\n    path: 'task',\n    loadChildren: () => \"import('./pages/task/task.module').then((m) => m.TaskPageModule)\",\n    resolve: {\n      special: DataResolverService\n    },\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'task-detail',\n    loadChildren: () => \"import('./pages/task-detail/task-detail.module').then(m => m.TaskDetailPageModule)\",\n    resolve: {\n      special: DataResolverService\n    },\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'comment',\n    loadChildren: () => \"import('./pages/comment/comment.module').then(m => m.CommentPageModule)\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'room-members',\n    loadChildren: () => \"import('./pages/room-members/room-members.module').then(m => m.RoomMembersPageModule)\",\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'member-list',\n    loadChildren: () => \"import('./pages/member-list/member-list.module').then(m => m.MemberListPageModule)\",\n    canActivate: [AuthGuard],\n  },\n];\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, routerOptions)\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommentPageModule",
            "id": "module-CommentPageModule-356b6a610c2e41ae8cbf48d712f60ce1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/comment/comment.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CommentPageRoutingModule } from './comment-routing.module';\n\nimport { CommentPage } from './comment.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CommentPageRoutingModule\n  ],\n  declarations: [CommentPage]\n})\nexport class CommentPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommentPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommentPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommentPageRoutingModule",
            "id": "module-CommentPageRoutingModule-e4d38cf7ca6abdad078578ad20c43afe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/comment/comment-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CommentPage } from './comment.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CommentPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CommentPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CompleteRegisterPageModule",
            "id": "module-CompleteRegisterPageModule-cf0c79408fd430829ee4ffad73042206",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/complete-register/complete-register.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { CompleteRegisterPageRoutingModule } from './complete-register-routing.module';\nimport { CompleteRegisterPage } from './complete-register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CompleteRegisterPageRoutingModule\n  ],\n  declarations: [CompleteRegisterPage]\n})\nexport class CompleteRegisterPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CompleteRegisterPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CompleteRegisterPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CompleteRegisterPageRoutingModule",
            "id": "module-CompleteRegisterPageRoutingModule-4e4cc6a51cf26a2aaa69bc0d0cdd7d0c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/complete-register/complete-register-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CompleteRegisterPage } from './complete-register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CompleteRegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CompleteRegisterPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfirmPageModule",
            "id": "module-ConfirmPageModule-8b46c323926a04a6406c0ebcdb67bc54",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/confirm/confirm.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { ConfirmPageRoutingModule } from './confirm-routing.module';\nimport { ConfirmPage } from './confirm.page';\nimport { ConfirmLogic } from './logic/confirm.logic';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    ConfirmPageRoutingModule\n  ],\n  declarations: [ConfirmPage],\n  providers: [ConfirmLogic],\n})\nexport class ConfirmPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfirmLogic"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ConfirmPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfirmPageRoutingModule",
            "id": "module-ConfirmPageRoutingModule-f062f88926e9073e92f4cdced6656d83",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/confirm/confirm-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ConfirmPage } from './confirm.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ConfirmPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConfirmPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CreateCompanyPageModule",
            "id": "module-CreateCompanyPageModule-69757e51a0cb4ba4d73dff7605019b83",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/create-company/create-company.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { CreateCompanyPageRoutingModule } from './create-company-routing.module';\nimport { CreateCompanyPage } from './create-company.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    CreateCompanyPageRoutingModule,\n    SharedModule,\n  ],\n  declarations: [CreateCompanyPage]\n})\nexport class CreateCompanyPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreateCompanyPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CreateCompanyPageRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CreateCompanyPageRoutingModule",
            "id": "module-CreateCompanyPageRoutingModule-4511d53ae1264b28349f2da98ef86eb6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/create-company/create-company-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CreateCompanyPage } from './create-company.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CreateCompanyPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CreateCompanyPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomePageModule",
            "id": "module-HomePageModule-dbb23a47ffdf62aa6013a1d1581f3cf7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { HomePageRoutingModule } from './home-routing.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { HomePage } from './home.page';\nimport { ListRoomComponent } from './componet/list-room/list-room.component';\nimport { HomeService } from './service/home.service';\nimport { HomeLogic } from './logic/home.logic';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    HomePageRoutingModule,\n    SharedModule,\n  ],\n  entryComponents: [\n\n  ],\n  declarations: [HomePage, ListRoomComponent],\n  providers: [HomeService, HomeLogic]\n})\nexport class HomePageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "HomeLogic"
                        },
                        {
                            "name": "HomeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomePage"
                        },
                        {
                            "name": "ListRoomComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomePageRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomePageRoutingModule",
            "id": "module-HomePageRoutingModule-9e8045299cac0f427ca5543ae7d317b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/home/home-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomePage\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomePageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginPageModule",
            "id": "module-LoginPageModule-9a20681fbdd5e5bdc2725204d6815cb4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { LoginPageRoutingModule } from './login-routing.module';\nimport { LoginPage } from './login.page';\nimport { LoginLogic } from './logic/login-logic.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage],\n  providers: [LoginLogic],\n})\nexport class LoginPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LoginLogic"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginPageRoutingModule",
            "id": "module-LoginPageRoutingModule-ed842764bd08f7ec079a4acd7a79a3cc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/login/login-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MemberListPageModule",
            "id": "module-MemberListPageModule-f7caea5d4852d829712b8cd3c7de37f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/member-list/member-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MemberListPageRoutingModule } from './member-list-routing.module';\n\nimport { MemberListPage } from './member-list.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MemberListPageRoutingModule\n  ],\n  declarations: [MemberListPage]\n})\nexport class MemberListPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MemberListPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MemberListPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MemberListPageRoutingModule",
            "id": "module-MemberListPageRoutingModule-38a939edc42932d5337ebf2d3b4ac9e4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/member-list/member-list-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MemberListPage } from './member-list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MemberListPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MemberListPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OwnTaskPageModule",
            "id": "module-OwnTaskPageModule-9746d93cf6cf384601b1026cf2a07905",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/own-task/own-task.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OwnTaskPageRoutingModule } from './own-task-routing.module';\n\nimport { OwnTaskPage } from './own-task.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    OwnTaskPageRoutingModule\n  ],\n  declarations: [OwnTaskPage]\n})\nexport class OwnTaskPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OwnTaskPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "OwnTaskPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OwnTaskPageRoutingModule",
            "id": "module-OwnTaskPageRoutingModule-9b5204801065eed18d222ba8d4c6f5f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/own-task/own-task-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OwnTaskPage } from './own-task.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OwnTaskPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OwnTaskPageRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegistrationCompanyPageModule",
            "id": "module-RegistrationCompanyPageModule-411705a2a10ef047c08bad40ce0ccc13",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/registration-company/registration-company.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RegistrationCompanyPageRoutingModule } from './registration-company-routing.module';\nimport { RegistrationCompanyPage } from './registration-company.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegistrationCompanyPageRoutingModule,\n    SharedModule,\n  ],\n  declarations: [RegistrationCompanyPage]\n})\nexport class RegistrationCompanyPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RegistrationCompanyPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RegistrationCompanyPageRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RegistrationCompanyPageRoutingModule",
            "id": "module-RegistrationCompanyPageRoutingModule-7c0964c31c7e6092dc24cad76900c231",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/registration-company/registration-company-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegistrationCompanyPage } from './registration-company.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegistrationCompanyPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegistrationCompanyPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RoomMembersPageModule",
            "id": "module-RoomMembersPageModule-a82ab135dea4849aef13c086f4d3bb6a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/room-members/room-members.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RoomMembersPageRoutingModule } from './room-members-routing.module';\n\nimport { RoomMembersPage } from './room-members.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RoomMembersPageRoutingModule\n  ],\n  declarations: [RoomMembersPage]\n})\nexport class RoomMembersPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RoomMembersPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RoomMembersPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RoomMembersPageRoutingModule",
            "id": "module-RoomMembersPageRoutingModule-7340b670a8425cb68983f68335d9682c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/room-members/room-members-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RoomMembersPage } from './room-members.page';\n\nconst routes: Routes = [\n  {\n    path: ':roomId/:companyId',\n    component: RoomMembersPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RoomMembersPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingPageModule",
            "id": "module-SettingPageModule-087ab559dbd401db6867808ddcd9efdf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/setting/setting.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingPageRoutingModule } from './setting-routing.module';\n\nimport { SettingPage } from './setting.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SettingPageRoutingModule\n  ],\n  declarations: [SettingPage]\n})\nexport class SettingPageModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SettingPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SettingPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingPageRoutingModule",
            "id": "module-SettingPageRoutingModule-871a151e18e29da9e034be7f0be283f7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/setting/setting-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SettingPage } from './setting.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-35bd3bb9d9a332b85b98a5e2ee00e9da",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { SessionService } from './service/session.service';\nimport { AddRoomModalComponent } from './component/modal/add-room-modal/add-room-modal.component';\nimport { AddTaskModalComponent } from './component/modal/add-task-modal/add-task-modal.component';\nimport { DeleteTaskModalComponent } from './component/modal/delete-task-modal/delete-task-modal.component';\nimport { MemberDetailModalComponent } from './component/modal/member-detail-modal/member-detail-modal.component';\nimport { EditProfileModalComponent } from './component/modal/edit-profile-modal/edit-profile-modal.component';\nimport { InviteMemberComponent } from 'src/app/pages/member-list/component/modal/invite-member/invite-member.component';\nimport { AddPersonModalComponent } from '../pages/task/component/add-person-modal/add-person-modal.component';\nimport { NoContentComponent } from './component/no-content/no-content.component';\nimport { EditRoomModalComponent } from './component/modal/edit-room-modal/edit-room-modal.component';\nimport { ImagePicker } from '@ionic-native/image-picker/ngx';\n\n\n@NgModule({\n  declarations: [\n    AddRoomModalComponent,\n    AddTaskModalComponent,\n    DeleteTaskModalComponent,\n    EditProfileModalComponent,\n    AddPersonModalComponent,\n    NoContentComponent,\n    InviteMemberComponent,\n    MemberDetailModalComponent,\n    EditRoomModalComponent,\n  ],\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  entryComponents: [\n    AddRoomModalComponent,\n    AddTaskModalComponent,\n    DeleteTaskModalComponent,\n    EditProfileModalComponent,\n    AddPersonModalComponent,\n    InviteMemberComponent,\n    MemberDetailModalComponent,\n    EditRoomModalComponent,\n  ],\n  exports: [\n    AddRoomModalComponent,\n    AddTaskModalComponent,\n    DeleteTaskModalComponent,\n    EditProfileModalComponent,\n    AddPersonModalComponent,\n    InviteMemberComponent,\n    MemberDetailModalComponent,\n    NoContentComponent,\n    ReactiveFormsModule,\n    FormsModule,\n    EditRoomModalComponent,\n  ],\n  providers: [\n    SessionService,\n    ImagePicker,\n  ]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SessionService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddPersonModalComponent"
                        },
                        {
                            "name": "AddRoomModalComponent"
                        },
                        {
                            "name": "AddTaskModalComponent"
                        },
                        {
                            "name": "DeleteTaskModalComponent"
                        },
                        {
                            "name": "EditProfileModalComponent"
                        },
                        {
                            "name": "EditRoomModalComponent"
                        },
                        {
                            "name": "InviteMemberComponent"
                        },
                        {
                            "name": "MemberDetailModalComponent"
                        },
                        {
                            "name": "NoContentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddPersonModalComponent"
                        },
                        {
                            "name": "AddRoomModalComponent"
                        },
                        {
                            "name": "AddTaskModalComponent"
                        },
                        {
                            "name": "DeleteTaskModalComponent"
                        },
                        {
                            "name": "EditProfileModalComponent"
                        },
                        {
                            "name": "EditRoomModalComponent"
                        },
                        {
                            "name": "InviteMemberComponent"
                        },
                        {
                            "name": "MemberDetailModalComponent"
                        },
                        {
                            "name": "NoContentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SignupPageModule",
            "id": "module-SignupPageModule-86f9d7e78433498ff57607b37d0ec42b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/signup/signup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\nimport { SharedModule } from '../../shared/shared.module';\nimport { SignupPageRoutingModule } from './signup-routing.module';\nimport { SignupPage } from './signup.page';\nimport { SignupLogic } from './logic/signup.logic';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    ReactiveFormsModule,\n    SignupPageRoutingModule\n  ],\n  declarations: [SignupPage],\n  providers: [SignupLogic],\n})\nexport class SignupPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SignupLogic"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SignupPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SignupPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SignupPageRoutingModule",
            "id": "module-SignupPageRoutingModule-da283a151177299bf7155e2409ab9f6b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/signup/signup-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupPage } from './signup.page';\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignupPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SignupPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsPageModule",
            "id": "module-TabsPageModule-f158209b375ec78d743ea2cd285189cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { IonicModule } from '@ionic/angular';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { TabsPageRoutingModule } from './tabs-routing.module';\n\nimport { TabsPage } from './tabs.page';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    TabsPageRoutingModule\n  ],\n  declarations: [TabsPage]\n})\nexport class TabsPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabsPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TabsPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsPageRoutingModule",
            "id": "module-TabsPageRoutingModule-c5ac68145a3ab6d17e08c476569932c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/tabs/tabs-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TabsPage } from './tabs.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TabsPage,\n    children: [\n      {\n        path: 'home',\n        loadChildren: () => \"import('../home/home.module').then(m => m.HomePageModule)\"\n      },\n      {\n        path: 'task-own',\n        loadChildren: () => \"import('../own-task/own-task.module').then(m => m.OwnTaskPageModule)\"\n      },\n      {\n        path: 'setting',\n        loadChildren: () => \"import('../setting/setting.module').then(m => m.SettingPageModule)\"\n      },\n      {\n        path: '',\n        redirectTo: '/home',\n        pathMatch: 'full'\n      }\n    ]\n  },\n  {\n    path: '',\n    redirectTo: '/home',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TabsPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskDetailPageModule",
            "id": "module-TaskDetailPageModule-d8fcf96f743b4f838b796707da141261",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/task-detail/task-detail.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { TaskDetailPageRoutingModule } from './task-detail-routing.module';\n\nimport { TaskDetailPage } from './task-detail.page';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    TaskDetailPageRoutingModule\n  ],\n  declarations: [TaskDetailPage]\n})\nexport class TaskDetailPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskDetailPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TaskDetailPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskDetailPageRoutingModule",
            "id": "module-TaskDetailPageRoutingModule-65bead3c115e564313818d641ff655cb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/task-detail/task-detail-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, ExtraOptions } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { TaskDetailPage } from './task-detail.page';\n\nconst routes: Routes = [\n  {\n    path: ':id/:segment',\n    component: TaskDetailPage\n  },\n  {\n    path: '',\n    redirectTo: ':id',\n    pathMatch: 'full'\n  }\n];\n\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TaskDetailPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskPageModule",
            "id": "module-TaskPageModule-eb33fa9f4f5b39dbc913911ff667ba5e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/task/task.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TaskPageRoutingModule } from './task-routing.module';\n\nimport { TaskPage } from './task.page';\nimport { TaskLogic } from './logic/task.logic';\nimport { TaskService } from './service/task.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TaskPageRoutingModule\n  ],\n  declarations: [TaskPage],\n  providers: [TaskLogic, TaskService]\n})\nexport class TaskPageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TaskLogic"
                        },
                        {
                            "name": "TaskService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TaskPageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskPageRoutingModule",
            "id": "module-TaskPageRoutingModule-6b402337900ae650d94aa10ef220386f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/task/task-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TaskPage } from './task.page';\n\nconst routes: Routes = [\n  {\n    path: ':id',\n    component: TaskPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TaskPageRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "apiAuthSendEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/create-company/service/create-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'authSendEmail'"
            },
            {
                "name": "apiSendEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'authSendEmail'"
            },
            {
                "name": "apiSendInvite",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/member-list/service/member-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'authSendEmail'"
            },
            {
                "name": "apiVerifyOTP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/create-company/service/create-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'verifyotp'"
            },
            {
                "name": "apiVerifyOTP",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'verifyotp'"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "capacitor.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CapacitorConfig",
                "defaultValue": "{\n  appId: 'com.taku.wantto',\n  appName: 'wantto',\n  webDir: 'www',\n  plugins: {\n    SplashScreen: {\n      launchAutoHide: false,\n    },\n    LocalNotifications: {\n      smallIcon: 'ic_stat_icon_config_sample',\n      iconColor: '#CE0B7C',\n    },\n    PushNotifications: {\n      presentationOptions: ['alert', 'sound'],\n    },\n  },\n}"
            },
            {
                "name": "configureTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "test-config.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  url: 'http://localhost:8100/',\n  apiUrl: 'https://gvr6cyp3r3.execute-api.ap-northeast-1.amazonaws.com/dev',\n  ADMIN_EMAIL: 'r.taaaaabo+ses@gmail.com',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  url: 'http://localhost:8100/',\n  apiUrl: 'https://gvr6cyp3r3.execute-api.ap-northeast-1.amazonaws.com/dev',\n  bucket: 'wattofilestorage234052-dev',\n  ADMIN_EMAIL: 'r.taaaaabo+ses@gmail.com',\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setup-jest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "optionPicture",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  quality: 50,\n  allowEditing: true,\n  resultType: CameraResultType.DataUrl,\n  promptLabelPicture: 'カメラ',\n  promptLabelHeader: 'カメラ',\n  promptLabelPhoto: 'ライブラリから',\n  promptLabelCancel: 'キャンセル',\n}"
            },
            {
                "name": "pathCheckVerify",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/create-company/service/create-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/verify-otp'"
            },
            {
                "name": "pathCheckVerify",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/verify-otp/check'"
            },
            {
                "name": "pathRegisterCompany",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/create-company/service/create-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/register/company'"
            },
            {
                "name": "pathRegisterInvite",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/member-list/service/member-list.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/register/member'"
            },
            {
                "name": "pathRegisterOfficer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/register/officer'"
            },
            {
                "name": "pathVerifyGenerate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/create-company/service/create-company.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/verify-otp/generate'"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "routerOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ExtraOptions",
                "defaultValue": "{\n  scrollPositionRestoration: 'enabled',\n  anchorScrolling: 'enabled',\n  scrollOffset: [0, 64],\n  relativeLinkResolution: 'legacy'\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "titleContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/complete-register/complete-register.page.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  progress: {\n    title: '仮登録完了',\n    content: `登録して頂いたメールアドレスに本登録用のリンクを送信しました。\n      会社情報の本登録をお願いいたします。`,\n    button: 'OK',\n  },\n  done: {\n    title: '本登録完了',\n    content: `会社情報の本登録が完了しました。\\n\n    下記のリンクから、ログインしていただき利用を初めてください。\n    これから御社内でイノベーションを作り上げていくことを望んでおります。\n    (ここにサブスクリプションを設定するページを入れる)\n    `,\n    button: '完了',\n  },\n}"
            },
            {
                "name": "viewKind",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/component/no-content/no-content.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { value: 'room', name: 'ルーム' },\n  { value: 'task', name: 'タスク' },\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Company",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Company",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CompilerOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "test-config.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "ConfigureFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "test-config.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 175
            },
            {
                "name": "CreateCompanyInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateCompanyInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateCompanyMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateCompanyMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateMessageInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateMessageInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateMessageMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateMessageMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateRoomMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateTaskMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "CreateUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteCompanyInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteCompanyInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteCompanyMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteCompanyMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteMessageInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteMessageInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteMessageMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteMessageMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteRoomMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteTaskMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "DeleteUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetCompanyQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetCompanyQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetMessageQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetMessageQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetRoomGroupQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetRoomGroupQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetRoomQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetRoomQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetTaskGroupQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetTaskGroupQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetTaskQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetTaskQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetUserQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "GetUserQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListCompanysQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListCompanysQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListMessagesQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListMessagesQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListRoomGroupsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListRoomGroupsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListRoomMembersInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/pages/room-members/models/room-members.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListRoomsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListRoomsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListTaskGroupsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListTaskGroupsQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListTasksQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListTasksQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListUserInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/pages/room-members/models/room-members.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListUsersQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ListUsersQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Message",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Message",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelBooleanInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelBooleanInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelCompanyConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelCompanyConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelCompanyConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelCompanyConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelCompanyFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelCompanyFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelIDInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelIDInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelIntInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelIntInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelMessageConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelMessageConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelMessageConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelMessageConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelMessageFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelMessageFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomGroupConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomGroupConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomGroupConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomGroupConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomGroupFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelRoomGroupFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelSizeInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelSizeInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelStringInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelStringInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelStringKeyConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelStringKeyConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskGroupConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskGroupConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskGroupConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskGroupConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskGroupFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelTaskGroupFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelUserConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelUserConditionInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelUserConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelUserConnection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelUserFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "ModelUserFilterInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Officer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Officer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OfficerInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OfficerInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateCompanySubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateCompanySubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateMessageSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateMessageSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateRoomGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateRoomGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateRoomSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateRoomSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateTaskGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateTaskGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateTaskSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateTaskSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateUserSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnCreateUserSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteCompanySubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteCompanySubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteMessageSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteMessageSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteRoomGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteRoomGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteRoomSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteRoomSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteTaskGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteTaskGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteTaskSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteTaskSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteUserSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnDeleteUserSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateCompanySubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateCompanySubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateMessageSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateMessageSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateRoomGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateRoomGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateRoomSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateRoomSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateTaskGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateTaskGroupSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateTaskSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateTaskSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateUserSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "OnUpdateUserSubscription",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Room",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Room",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "RoomGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "RoomGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "S3Object",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "S3Object",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "S3ObjectInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "S3ObjectInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Task",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "Task",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "TaskByCreatedAtQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "TaskByCreatedAtQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "TaskGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "TaskGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateCompanyInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateCompanyInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateCompanyMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateCompanyMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateMessageInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateMessageInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateMessageMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateMessageMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateRoomMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskGroupInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskGroupMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateTaskMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateUserInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "UpdateUserMutation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "User",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/API.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "User",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/service/amplify.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "ModelAttributeTypes",
                "childs": [
                    {
                        "name": "binary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "binary"
                    },
                    {
                        "name": "binarySet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "binarySet"
                    },
                    {
                        "name": "bool",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bool"
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "list"
                    },
                    {
                        "name": "map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "map"
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "number"
                    },
                    {
                        "name": "numberSet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "numberSet"
                    },
                    {
                        "name": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "string"
                    },
                    {
                        "name": "stringSet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stringSet"
                    },
                    {
                        "name": "_null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "_null"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/API.service.ts"
            },
            {
                "name": "ModelAttributeTypes",
                "childs": [
                    {
                        "name": "binary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "binary"
                    },
                    {
                        "name": "binarySet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "binarySet"
                    },
                    {
                        "name": "bool",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bool"
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "list"
                    },
                    {
                        "name": "map",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "map"
                    },
                    {
                        "name": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "number"
                    },
                    {
                        "name": "numberSet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "numberSet"
                    },
                    {
                        "name": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "string"
                    },
                    {
                        "name": "stringSet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stringSet"
                    },
                    {
                        "name": "_null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "_null"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/service/amplify.service.ts"
            },
            {
                "name": "ModelSortDirection",
                "childs": [
                    {
                        "name": "ASC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ASC"
                    },
                    {
                        "name": "DESC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DESC"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/API.service.ts"
            },
            {
                "name": "ModelSortDirection",
                "childs": [
                    {
                        "name": "ASC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ASC"
                    },
                    {
                        "name": "DESC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DESC"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/service/amplify.service.ts"
            }
        ],
        "groupedVariables": {
            "src/app/pages/create-company/service/create-company.service.ts": [
                {
                    "name": "apiAuthSendEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/create-company/service/create-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'authSendEmail'"
                },
                {
                    "name": "apiVerifyOTP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/create-company/service/create-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'verifyotp'"
                },
                {
                    "name": "pathCheckVerify",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/create-company/service/create-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/verify-otp'"
                },
                {
                    "name": "pathRegisterCompany",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/create-company/service/create-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/register/company'"
                },
                {
                    "name": "pathVerifyGenerate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/create-company/service/create-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/verify-otp/generate'"
                }
            ],
            "src/app/pages/registration-company/service/registration-company.service.ts": [
                {
                    "name": "apiSendEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'authSendEmail'"
                },
                {
                    "name": "apiVerifyOTP",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'verifyotp'"
                },
                {
                    "name": "pathCheckVerify",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/verify-otp/check'"
                },
                {
                    "name": "pathRegisterOfficer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/registration-company/service/registration-company.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/register/officer'"
                }
            ],
            "src/app/pages/member-list/service/member-list.service.ts": [
                {
                    "name": "apiSendInvite",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/member-list/service/member-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'authSendEmail'"
                },
                {
                    "name": "pathRegisterInvite",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/member-list/service/member-list.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/register/member'"
                }
            ],
            "capacitor.config.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "capacitor.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CapacitorConfig",
                    "defaultValue": "{\n  appId: 'com.taku.wantto',\n  appName: 'wantto',\n  webDir: 'www',\n  plugins: {\n    SplashScreen: {\n      launchAutoHide: false,\n    },\n    LocalNotifications: {\n      smallIcon: 'ic_stat_icon_config_sample',\n      iconColor: '#CE0B7C',\n    },\n    PushNotifications: {\n      presentationOptions: ['alert', 'sound'],\n    },\n  },\n}"
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "configureTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "test-config.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configure: ConfigureFn, compilerOptions: CompilerOptions = {}) => {\n  const compilerConfig: CompilerOptions = {\n    preserveWhitespaces: false,\n    ...compilerOptions,\n  };\n\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\n\n  configure(configuredTestBed);\n\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  url: 'http://localhost:8100/',\n  apiUrl: 'https://gvr6cyp3r3.execute-api.ap-northeast-1.amazonaws.com/dev',\n  ADMIN_EMAIL: 'r.taaaaabo+ses@gmail.com',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  url: 'http://localhost:8100/',\n  apiUrl: 'https://gvr6cyp3r3.execute-api.ap-northeast-1.amazonaws.com/dev',\n  bucket: 'wattofilestorage234052-dev',\n  ADMIN_EMAIL: 'r.taaaaabo+ses@gmail.com',\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "setup-jest.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setup-jest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  let storage: { [key: string]: string } = {};\n  return {\n    getItem: (key: string) => (key in storage ? storage[key] : null),\n    setItem: (key: string, value: string) => (storage[key] = value || ''),\n    removeItem: (key: string) => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ],
            "src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts": [
                {
                    "name": "optionPicture",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  quality: 50,\n  allowEditing: true,\n  resultType: CameraResultType.DataUrl,\n  promptLabelPicture: 'カメラ',\n  promptLabelHeader: 'カメラ',\n  promptLabelPhoto: 'ライブラリから',\n  promptLabelCancel: 'キャンセル',\n}"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "routerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtraOptions",
                    "defaultValue": "{\n  scrollPositionRestoration: 'enabled',\n  anchorScrolling: 'enabled',\n  scrollOffset: [0, 64],\n  relativeLinkResolution: 'legacy'\n}"
                }
            ],
            "src/app/pages/complete-register/complete-register.page.ts": [
                {
                    "name": "titleContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/complete-register/complete-register.page.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  progress: {\n    title: '仮登録完了',\n    content: `登録して頂いたメールアドレスに本登録用のリンクを送信しました。\n      会社情報の本登録をお願いいたします。`,\n    button: 'OK',\n  },\n  done: {\n    title: '本登録完了',\n    content: `会社情報の本登録が完了しました。\\n\n    下記のリンクから、ログインしていただき利用を初めてください。\n    これから御社内でイノベーションを作り上げていくことを望んでおります。\n    (ここにサブスクリプションを設定するページを入れる)\n    `,\n    button: '完了',\n  },\n}"
                }
            ],
            "src/app/shared/component/no-content/no-content.component.ts": [
                {
                    "name": "viewKind",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/component/no-content/no-content.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { value: 'room', name: 'ルーム' },\n  { value: 'task', name: 'タスク' },\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/API.service.ts": [
                {
                    "name": "ModelAttributeTypes",
                    "childs": [
                        {
                            "name": "binary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "binary"
                        },
                        {
                            "name": "binarySet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "binarySet"
                        },
                        {
                            "name": "bool",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bool"
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "list"
                        },
                        {
                            "name": "map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "map"
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "number"
                        },
                        {
                            "name": "numberSet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "numberSet"
                        },
                        {
                            "name": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "string"
                        },
                        {
                            "name": "stringSet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stringSet"
                        },
                        {
                            "name": "_null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "_null"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/API.service.ts"
                },
                {
                    "name": "ModelSortDirection",
                    "childs": [
                        {
                            "name": "ASC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ASC"
                        },
                        {
                            "name": "DESC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DESC"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/API.service.ts"
                }
            ],
            "src/app/shared/service/amplify.service.ts": [
                {
                    "name": "ModelAttributeTypes",
                    "childs": [
                        {
                            "name": "binary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "binary"
                        },
                        {
                            "name": "binarySet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "binarySet"
                        },
                        {
                            "name": "bool",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bool"
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "list"
                        },
                        {
                            "name": "map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "map"
                        },
                        {
                            "name": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "number"
                        },
                        {
                            "name": "numberSet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "numberSet"
                        },
                        {
                            "name": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "string"
                        },
                        {
                            "name": "stringSet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stringSet"
                        },
                        {
                            "name": "_null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "_null"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/service/amplify.service.ts"
                },
                {
                    "name": "ModelSortDirection",
                    "childs": [
                        {
                            "name": "ASC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ASC"
                        },
                        {
                            "name": "DESC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DESC"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/service/amplify.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/API.service.ts": [
                {
                    "name": "Company",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateCompanyInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateCompanyMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateMessageInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateMessageMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteCompanyInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteCompanyMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteMessageInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteMessageMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetCompanyQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetMessageQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetRoomGroupQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetRoomQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetTaskGroupQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetTaskQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetUserQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListCompanysQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListMessagesQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListRoomGroupsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListRoomsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListTaskGroupsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListTasksQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListUsersQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Message",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelBooleanInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelCompanyConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelCompanyConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelCompanyFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelIDInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelIntInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelMessageConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelMessageConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelMessageFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomGroupConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomGroupConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomGroupFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelSizeInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelStringInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelStringKeyConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskGroupConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskGroupConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskGroupFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelUserConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelUserConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelUserFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Officer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OfficerInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateCompanySubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateMessageSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateRoomGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateRoomSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateTaskGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateTaskSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateUserSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteCompanySubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteMessageSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteRoomGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteRoomSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteTaskGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteTaskSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteUserSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateCompanySubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateMessageSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateRoomGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateRoomSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateTaskGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateTaskSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateUserSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Room",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "RoomGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "S3Object",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "S3ObjectInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Task",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "TaskByCreatedAtQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "TaskGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateCompanyInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateCompanyMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateMessageInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateMessageMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "User",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/API.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "src/app/shared/service/amplify.service.ts": [
                {
                    "name": "Company",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateCompanyInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateCompanyMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateMessageInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateMessageMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateRoomMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateTaskMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "CreateUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteCompanyInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteCompanyMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteMessageInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteMessageMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteRoomMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteTaskMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "DeleteUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetCompanyQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetMessageQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetRoomGroupQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetRoomQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetTaskGroupQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetTaskQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "GetUserQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListCompanysQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListMessagesQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListRoomGroupsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListRoomsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListTaskGroupsQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListTasksQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListUsersQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Message",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelBooleanInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelCompanyConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelCompanyConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelCompanyFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelIDInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelIntInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelMessageConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelMessageConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelMessageFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomGroupConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomGroupConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelRoomGroupFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelSizeInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelStringInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelStringKeyConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskGroupConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskGroupConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelTaskGroupFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelUserConditionInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelUserConnection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ModelUserFilterInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Officer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OfficerInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateCompanySubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateMessageSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateRoomGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateRoomSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateTaskGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateTaskSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnCreateUserSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteCompanySubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteMessageSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteRoomGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteRoomSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteTaskGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteTaskSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnDeleteUserSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateCompanySubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateMessageSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateRoomGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateRoomSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateTaskGroupSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateTaskSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "OnUpdateUserSubscription",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Room",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "RoomGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "S3Object",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "S3ObjectInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "Task",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "TaskByCreatedAtQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "TaskGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateCompanyInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateCompanyMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateMessageInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateMessageMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateRoomMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskGroupInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskGroupMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateTaskMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateUserInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "UpdateUserMutation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "User",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/service/amplify.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "test-config.helper.ts": [
                {
                    "name": "CompilerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "test-config.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                },
                {
                    "name": "ConfigureFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "test-config.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 175
                }
            ],
            "src/app/pages/room-members/models/room-members.model.ts": [
                {
                    "name": "ListRoomMembersInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/pages/room-members/models/room-members.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                },
                {
                    "name": "ListUserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/pages/room-members/models/room-members.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./pages/tabs/tabs.module#TabsPageModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/tabs/tabs-routing.module.ts",
                                        "module": "TabsPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "TabsPage",
                                                "children": [
                                                    {
                                                        "path": "home",
                                                        "loadChildren": "../home/home.module#HomePageModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/pages/home/home-routing.module.ts",
                                                                        "module": "HomePageRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "HomePage"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "HomePageModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "task-own",
                                                        "loadChildren": "../own-task/own-task.module#OwnTaskPageModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/pages/own-task/own-task-routing.module.ts",
                                                                        "module": "OwnTaskPageRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "OwnTaskPage"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "OwnTaskPageModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "setting",
                                                        "loadChildren": "../setting/setting.module#SettingPageModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/pages/setting/setting-routing.module.ts",
                                                                        "module": "SettingPageRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "SettingPage"
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "SettingPageModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "/home",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": "",
                                                "redirectTo": "/home",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TabsPageModule"
                            }
                        ]
                    },
                    {
                        "path": "signup",
                        "loadChildren": "./pages/signup/signup.module#SignupPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/signup/signup-routing.module.ts",
                                        "module": "SignupPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "SignupPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "SignupPageModule"
                            }
                        ]
                    },
                    {
                        "path": "confirm",
                        "loadChildren": "./pages/confirm/confirm.module#ConfirmPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/confirm/confirm-routing.module.ts",
                                        "module": "ConfirmPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ConfirmPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ConfirmPageModule"
                            }
                        ]
                    },
                    {
                        "path": "login",
                        "loadChildren": "./pages/login/login.module#LoginPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/login/login-routing.module.ts",
                                        "module": "LoginPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LoginPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "LoginPageModule"
                            }
                        ]
                    },
                    {
                        "path": "create-company",
                        "loadChildren": "./pages/create-company/create-company.module#CreateCompanyPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/create-company/create-company-routing.module.ts",
                                        "module": "CreateCompanyPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CreateCompanyPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CreateCompanyPageModule"
                            }
                        ]
                    },
                    {
                        "path": "registration-company",
                        "loadChildren": "./pages/registration-company/registration-company.module#RegistrationCompanyPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/registration-company/registration-company-routing.module.ts",
                                        "module": "RegistrationCompanyPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RegistrationCompanyPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RegistrationCompanyPageModule"
                            }
                        ]
                    },
                    {
                        "path": "complete-register",
                        "loadChildren": "./pages/complete-register/complete-register.module#CompleteRegisterPageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/complete-register/complete-register-routing.module.ts",
                                        "module": "CompleteRegisterPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CompleteRegisterPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CompleteRegisterPageModule"
                            }
                        ]
                    },
                    {
                        "path": "task",
                        "loadChildren": "./pages/task/task.module#TaskPageModule",
                        "resolve": {
                            "special": "DataResolverService"
                        },
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/task/task-routing.module.ts",
                                        "module": "TaskPageRoutingModule",
                                        "children": [
                                            {
                                                "path": ":id",
                                                "component": "TaskPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TaskPageModule"
                            }
                        ]
                    },
                    {
                        "path": "task-detail",
                        "loadChildren": "./pages/task-detail/task-detail.module#TaskDetailPageModule",
                        "resolve": {
                            "special": "DataResolverService"
                        },
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/task-detail/task-detail-routing.module.ts",
                                        "module": "TaskDetailPageRoutingModule",
                                        "children": [
                                            {
                                                "path": ":id/:segment",
                                                "component": "TaskDetailPage"
                                            },
                                            {
                                                "path": "",
                                                "redirectTo": ":id",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TaskDetailPageModule"
                            }
                        ]
                    },
                    {
                        "path": "comment",
                        "loadChildren": "./pages/comment/comment.module#CommentPageModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/comment/comment-routing.module.ts",
                                        "module": "CommentPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CommentPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CommentPageModule"
                            }
                        ]
                    },
                    {
                        "path": "room-members",
                        "loadChildren": "./pages/room-members/room-members.module#RoomMembersPageModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/room-members/room-members-routing.module.ts",
                                        "module": "RoomMembersPageRoutingModule",
                                        "children": [
                                            {
                                                "path": ":roomId/:companyId",
                                                "component": "RoomMembersPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RoomMembersPageModule"
                            }
                        ]
                    },
                    {
                        "path": "member-list",
                        "loadChildren": "./pages/member-list/member-list.module#MemberListPageModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/member-list/member-list-routing.module.ts",
                                        "module": "MemberListPageRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MemberListPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MemberListPageModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "capacitor.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/API.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "APIService",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "src/app/API.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubscriptionResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guard/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/signup.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceSignup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/task.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceTask",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/comment/comment.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/complete-register/complete-register.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompleteRegisterPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/complete-register/complete-register.page.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/confirm/confirm.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmPage",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/pages/confirm/logic/confirm.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfirmLogic",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/app/pages/confirm/service/confirm.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfirmService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/create-company.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateCompanyPage",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/logic/create-company.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CreateCompanyLogic",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/pages/create-company/models/signup.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SignUpValue",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/service/create-company.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CreateCompanyService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/pages/create-company/service/create-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiAuthSendEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/service/create-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiVerifyOTP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/service/create-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathCheckVerify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/service/create-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathRegisterCompany",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/create-company/service/create-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathVerifyGenerate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/componet/list-room/list-room.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListRoomComponent",
                "coveragePercent": 23,
                "coverageCount": "5/21",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/logic/home.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomeLogic",
                "coveragePercent": 12,
                "coverageCount": "4/32",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/logic/home.logic.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FetchTaskGroup",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterTaskGroupPerUser",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILResponseFetchRoomMembers",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceArgsCreateRoom",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceLogicArgsCreateRoom",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceLogicArgsCreateUser",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISArgsCreateRoomGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/model/home.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoomGroupItems",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/service/home.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomeService",
                "coveragePercent": 4,
                "coverageCount": "1/21",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/service/response/response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseListRoomGroupsQueryItems",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/logic/login-logic.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginLogic",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/component/modal/invite-member/invite-member.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InviteMemberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/logic/member-list.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemberListLogic",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/member-list.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberListPage",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/models/member-list.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/models/member-list.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompanyMember",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/models/member-list.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/models/member-list.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IconImage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/models/member-list.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OptionData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/models/member-list.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestRegisterCompanyMember",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/service/member-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemberListService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/service/member-list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiSendInvite",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/member-list/service/member-list.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathRegisterInvite",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/own-task/logic/own-task.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OwnTaskLogic",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/own-task/model/own-task.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/own-task/model/own-task.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/own-task/own-task.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "OwnTaskPage",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/own-task/service/own-task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OwnTaskService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/interface/company-register.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompanyRegister",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/interface/company-register.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OfficerRegister",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/logic/registration-company.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegistrationCompanyLogic",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/registration-company.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationCompanyPage",
                "coveragePercent": 41,
                "coverageCount": "5/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/pages/registration-company/service/registration-company.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegistrationCompanyService",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/service/registration-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiSendEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/service/registration-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiVerifyOTP",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/service/registration-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathCheckVerify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/registration-company/service/registration-company.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pathRegisterOfficer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/interface/room-members.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceRoomMembers",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/interface/room-members.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InterfaceUser",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/logic/room-members.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoomMembersLogic",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/models/room-members.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/models/room-members.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/models/room-members.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoomGroupItems",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/models/room-members.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoomGroupUser",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/room-members.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoomMembersPage",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/room-members/service/room-member.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoomMemberService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/interface/setting.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/interface/setting.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/interface/setting.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IconImage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/interface/setting.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOwnUser",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/interface/setting.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/interface/setting.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoomGroupItems",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/logic/setting.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingLogic",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/service/setting.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/setting/setting.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingPage",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/signup/logic/signup.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignupLogic",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/signup/signup.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupPage",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/tabs/tabs.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/logic/task-detail.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskDetailLogic",
                "coveragePercent": 51,
                "coverageCount": "15/29",
                "status": "good"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImageFile",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMessageAttachment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMessageWithAttachUrl",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IS3Object",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IsMessageContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessageContent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/models/task-detail.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskByCreatedAtItems",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/service/task-detail.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskDetailService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/task-detail.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskDetailPage",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task-detail/task-detail.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/component/add-person-modal/add-person-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddPersonModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/interface/current-user-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompanyMembersInfo",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/interface/current-user-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/logic/task.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskLogic",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/model/task-member.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompanyMembers",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/model/task-member.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/model/task-member.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemberTask",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/service/task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/task.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskPage",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/task/task.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/add-room-modal/add-room-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddRoomModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/add-task-modal/add-task-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTaskModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/delete-task-modal/delete-task-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteTaskModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProfileModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/edit-profile-modal/edit-profile-modal.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optionPicture",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/edit-room-modal/edit-room-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditRoomModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/modal/member-detail-modal/member-detail-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberDetailModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/no-content/no-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/component/no-content/no-content.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "viewKind",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/logic/data/data.logic.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataLogic",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/task-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IArgsEntrySignup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/task-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskFormModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/service/amplify.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AmplifyService",
                "coveragePercent": 0,
                "coverageCount": "0/51",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/service/amplify.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubscriptionResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/service/resolver/data-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "DataResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/service/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "test-config.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configureTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}